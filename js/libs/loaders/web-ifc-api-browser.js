var WebIFC=(()=>{var __defProp=Object.defineProperty,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__require=x=>{if("undefined"!=typeof require)return require(x);throw new Error('Dynamic require of "'+x+'" is not supported')},__commonJS=(cb,mod)=>function(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports},__async=(__this,__arguments,generator)=>new Promise(((resolve,reject)=>{var fulfilled=value=>{try{step(generator.next(value))}catch(e){reject(e)}},rejected=value=>{try{step(generator.throw(value))}catch(e){reject(e)}},step=x=>x.done?resolve(x.value):Promise.resolve(x.value).then(fulfilled,rejected);step((generator=generator.apply(__this,__arguments)).next())})),require_crypto=__commonJS({"(disabled):crypto"(){}}),require_web_ifc_mt=__commonJS({"dist/web-ifc-mt.js"(exports,module){var _scriptDir,WebIFCWasm2=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(WebIFCWasm3){function GROWABLE_HEAP_I8(){return wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAP8}function GROWABLE_HEAP_U8(){return wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAPU8}function GROWABLE_HEAP_I16(){return wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAP16}function GROWABLE_HEAP_U16(){return wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAPU16}function GROWABLE_HEAP_I32(){return wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAP32}function GROWABLE_HEAP_U32(){return wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAPU32}function GROWABLE_HEAP_F64(){return wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAPF64}var readyPromiseResolve,readyPromiseReject,Module=void 0!==(WebIFCWasm3=WebIFCWasm3||{})?WebIFCWasm3:{};Module.ready=new Promise((function(resolve,reject){readyPromiseResolve=resolve,readyPromiseReject=reject}));var key,moduleOverrides={};for(key in Module)Module.hasOwnProperty(key)&&(moduleOverrides[key]=Module[key]);var read_,readAsync,readBinary,nodeFS,nodePath,arguments_=[],thisProgram="./this.program",quit_=function(status,toThrow){throw toThrow},ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,ENVIRONMENT_IS_PTHREAD=Module.ENVIRONMENT_IS_PTHREAD||!1,scriptDirectory="";function locateFile(path){return Module.locateFile?Module.locateFile(path,scriptDirectory):scriptDirectory+path}if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads;scriptDirectory=ENVIRONMENT_IS_WORKER?__require("path").dirname(scriptDirectory)+"/":__dirname+"/",read_=function(filename,binary){return nodeFS||(nodeFS=__require("fs")),nodePath||(nodePath=__require("path")),filename=nodePath.normalize(filename),nodeFS.readFileSync(filename,binary?null:"utf8")},readBinary=function(filename){var ret=read_(filename,!0);return ret.buffer||(ret=new Uint8Array(ret)),assert(ret.buffer),ret},readAsync=function(filename,onload,onerror){nodeFS||(nodeFS=__require("fs")),nodePath||(nodePath=__require("path")),filename=nodePath.normalize(filename),nodeFS.readFile(filename,(function(err2,data){err2?onerror(err2):onload(data.buffer)}))},process.argv.length>1&&(thisProgram=process.argv[1].replace(/\\/g,"/")),arguments_=process.argv.slice(2),process.on("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus))throw ex})),process.on("unhandledRejection",abort),quit_=function(status,toThrow){if(keepRuntimeAlive())throw process.exitCode=status,toThrow;process.exit(status)},Module.inspect=function(){return"[Emscripten Module object]"};try{nodeWorkerThreads=__require("worker_threads")}catch(e){throw e}global.Worker=nodeWorkerThreads.Worker}else(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&(ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:"undefined"!=typeof document&&document.currentScript&&(scriptDirectory=document.currentScript.src),_scriptDir&&(scriptDirectory=_scriptDir),scriptDirectory=0!==scriptDirectory.indexOf("blob:")?scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1):"",ENVIRONMENT_IS_NODE?(read_=function(filename,binary){return nodeFS||(nodeFS=__require("fs")),nodePath||(nodePath=__require("path")),filename=nodePath.normalize(filename),nodeFS.readFileSync(filename,binary?null:"utf8")},readBinary=function(filename){var ret=read_(filename,!0);return ret.buffer||(ret=new Uint8Array(ret)),assert(ret.buffer),ret},readAsync=function(filename,onload,onerror){nodeFS||(nodeFS=__require("fs")),nodePath||(nodePath=__require("path")),filename=nodePath.normalize(filename),nodeFS.readFile(filename,(function(err2,data){err2?onerror(err2):onload(data.buffer)}))}):(read_=function(url){var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.send(null),xhr.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=function(url){var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.responseType="arraybuffer",xhr.send(null),new Uint8Array(xhr.response)}),readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="arraybuffer",xhr.onload=function(){200==xhr.status||0==xhr.status&&xhr.response?onload(xhr.response):onerror()},xhr.onerror=onerror,xhr.send(null)}));ENVIRONMENT_IS_NODE&&"undefined"==typeof performance&&(global.performance=__require("perf_hooks").performance);var out=Module.print||void 0,err=Module.printErr||void 0;for(key in moduleOverrides)moduleOverrides.hasOwnProperty(key)&&(Module[key]=moduleOverrides[key]);moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Module.thisProgram&&(thisProgram=Module.thisProgram),Module.quit&&(quit_=Module.quit);var STACK_ALIGN=16;function warnOnce(text){warnOnce.shown||(warnOnce.shown={}),warnOnce.shown[text]||(warnOnce.shown[text]=1,err(text))}var wasmBinary,setTempRet0=function(value){};Atomics.load,Atomics.store,Atomics.compareExchange,Module.wasmBinary&&(wasmBinary=Module.wasmBinary);var wasmMemory,wasmModule,noExitRuntime=Module.noExitRuntime||!0;"object"!=typeof WebAssembly&&abort("no native wasm support detected");var ABORT=!1;function assert(condition,text){condition||abort("Assertion failed: "+text)}function TextDecoderWrapper(encoding){var textDecoder=new TextDecoder(encoding);this.decode=function(data){return data.buffer instanceof SharedArrayBuffer&&(data=new Uint8Array(data)),textDecoder.decode.call(textDecoder,data)}}var UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoderWrapper("utf8"):void 0;function UTF8ArrayToString(heap,idx,maxBytesToRead){for(var endIdx=(idx>>>=0)+maxBytesToRead,endPtr=idx;heap[endPtr>>>0]&&!(endPtr>=endIdx);)++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder)return UTF8Decoder.decode(heap.subarray(idx>>>0,endPtr>>>0));for(var str="";idx<endPtr;){var u0=heap[idx++>>>0];if(128&u0){var u1=63&heap[idx++>>>0];if(192!=(224&u0)){var u2=63&heap[idx++>>>0];if((u0=224==(240&u0)?(15&u0)<<12|u1<<6|u2:(7&u0)<<18|u1<<12|u2<<6|63&heap[idx++>>>0])<65536)str+=String.fromCharCode(u0);else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)}}else str+=String.fromCharCode((31&u0)<<6|u1)}else str+=String.fromCharCode(u0)}return str}function UTF8ToString(ptr,maxBytesToRead){return(ptr>>>=0)?UTF8ArrayToString(GROWABLE_HEAP_U8(),ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;for(var startIdx=outIdx>>>=0,endIdx=outIdx+maxBytesToWrite-1,i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&str.charCodeAt(++i)),u<=127){if(outIdx>=endIdx)break;heap[outIdx++>>>0]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++>>>0]=192|u>>6,heap[outIdx++>>>0]=128|63&u}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++>>>0]=224|u>>12,heap[outIdx++>>>0]=128|u>>6&63,heap[outIdx++>>>0]=128|63&u}else{if(outIdx+3>=endIdx)break;heap[outIdx++>>>0]=240|u>>18,heap[outIdx++>>>0]=128|u>>12&63,heap[outIdx++>>>0]=128|u>>6&63,heap[outIdx++>>>0]=128|63&u}}return heap[outIdx>>>0]=0,outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,GROWABLE_HEAP_U8(),outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){for(var len=0,i=0;i<str.length;++i){var u=str.charCodeAt(i);u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&str.charCodeAt(++i)),u<=127?++len:len+=u<=2047?2:u<=65535?3:4}return len}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64,UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoderWrapper("utf-16le"):void 0;function UTF16ToString(ptr,maxBytesToRead){for(var endPtr=ptr,idx=endPtr>>1,maxIdx=idx+maxBytesToRead/2;!(idx>=maxIdx)&&GROWABLE_HEAP_U16()[idx>>>0];)++idx;if((endPtr=idx<<1)-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(GROWABLE_HEAP_U8().subarray(ptr>>>0,endPtr>>>0));for(var str="",i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=GROWABLE_HEAP_I16()[ptr+2*i>>>1];if(0==codeUnit)break;str+=String.fromCharCode(codeUnit)}return str}function stringToUTF16(str,outPtr,maxBytesToWrite){if(void 0===maxBytesToWrite&&(maxBytesToWrite=2147483647),maxBytesToWrite<2)return 0;for(var startPtr=outPtr,numCharsToWrite=(maxBytesToWrite-=2)<2*str.length?maxBytesToWrite/2:str.length,i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);GROWABLE_HEAP_I16()[outPtr>>>1]=codeUnit,outPtr+=2}return GROWABLE_HEAP_I16()[outPtr>>>1]=0,outPtr-startPtr}function lengthBytesUTF16(str){return 2*str.length}function UTF32ToString(ptr,maxBytesToRead){for(var i=0,str="";!(i>=maxBytesToRead/4);){var utf32=GROWABLE_HEAP_I32()[ptr+4*i>>>2];if(0==utf32)break;if(++i,utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)}else str+=String.fromCharCode(utf32)}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(void 0===maxBytesToWrite&&(maxBytesToWrite=2147483647),maxBytesToWrite<4)return 0;for(var startPtr=outPtr>>>=0,endPtr=startPtr+maxBytesToWrite-4,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343&&(codeUnit=65536+((1023&codeUnit)<<10)|1023&str.charCodeAt(++i)),GROWABLE_HEAP_I32()[outPtr>>>2]=codeUnit,(outPtr+=4)+4>endPtr)break}return GROWABLE_HEAP_I32()[outPtr>>>2]=0,outPtr-startPtr}function lengthBytesUTF32(str){for(var len=0,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);codeUnit>=55296&&codeUnit<=57343&&++i,len+=4}return len}function updateGlobalBufferAndViews(buf){buffer=buf,Module.HEAP8=HEAP8=new Int8Array(buf),Module.HEAP16=HEAP16=new Int16Array(buf),Module.HEAP32=HEAP32=new Int32Array(buf),Module.HEAPU8=HEAPU8=new Uint8Array(buf),Module.HEAPU16=HEAPU16=new Uint16Array(buf),Module.HEAPU32=HEAPU32=new Uint32Array(buf),Module.HEAPF32=HEAPF32=new Float32Array(buf),Module.HEAPF64=HEAPF64=new Float64Array(buf)}ENVIRONMENT_IS_PTHREAD&&(buffer=Module.buffer);var wasmTable,INITIAL_MEMORY=Module.INITIAL_MEMORY||16777216;if(ENVIRONMENT_IS_PTHREAD)wasmMemory=Module.wasmMemory,buffer=Module.buffer;else if(Module.wasmMemory)wasmMemory=Module.wasmMemory;else if(!((wasmMemory=new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw err("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");wasmMemory&&(buffer=wasmMemory.buffer),INITIAL_MEMORY=buffer.byteLength,updateGlobalBufferAndViews(buffer);var __ATPRERUN__=[],__ATINIT__=[],__ATMAIN__=[],__ATEXIT__=[],__ATPOSTRUN__=[],runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}function initRuntime(){ENVIRONMENT_IS_PTHREAD||(Module.noFSInit||FS.init.initialized||FS.init(),FS.ignorePermissions=!1,TTY.init(),callRuntimeCallbacks(__ATINIT__))}var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function addRunDependency(id){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(id){if(runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)){var callback=dependenciesFulfilled;dependenciesFulfilled=null,callback()}}function abort(what){Module.onAbort&&Module.onAbort(what),err(what+=""),ABORT=!0,what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);throw readyPromiseReject(e),e}Module.preloadedImages={},Module.preloadedAudios={};var wasmBinaryFile,tempDouble,tempI64,dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(file);throw"both async and sync fetching of the wasm failed"}catch(err2){abort(err2)}}isDataURI(wasmBinaryFile="web-ifc-mt.wasm")||(wasmBinaryFile=locateFile(wasmBinaryFile));var ASM_CONSTS={44848:function(){throw"Canceled!"},44866:function($0,$1){setTimeout((function(){__emscripten_do_dispatch_to_thread($0,$1)}),0)}};function callRuntimeCallbacks(callbacks){for(;callbacks.length>0;){var callback=callbacks.shift();if("function"!=typeof callback){var func=callback.func;"number"==typeof func?void 0===callback.arg?wasmTable.get(func)():wasmTable.get(func)(callback.arg):func(void 0===callback.arg?null:callback.arg)}else callback(Module)}}function _emscripten_futex_wake(addr,count){if(addr<=0||addr>GROWABLE_HEAP_I8().length||!0&addr||count<0)return-28;if(0==count)return 0;count>=2147483647&&(count=1/0);var mainThreadWaitAddress=Atomics.load(GROWABLE_HEAP_I32(),__emscripten_main_thread_futex>>2),mainThreadWoken=0;if(mainThreadWaitAddress==addr&&Atomics.compareExchange(GROWABLE_HEAP_I32(),__emscripten_main_thread_futex>>2,mainThreadWaitAddress,0)==mainThreadWaitAddress&&(mainThreadWoken=1,--count<=0))return 1;var ret=Atomics.notify(GROWABLE_HEAP_I32(),addr>>2,count);if(ret>=0)return ret+mainThreadWoken;throw"Atomics.notify returned an unexpected value "+ret}Module._emscripten_futex_wake=_emscripten_futex_wake;var _emscripten_get_now,PThread={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var pthreadPoolSize=navigator.hardwareConcurrency,i=0;i<pthreadPoolSize;++i)PThread.allocateUnusedWorker()},initRuntime:function(){for(var tb=_malloc(228),i=0;i<57;++i)GROWABLE_HEAP_U32()[tb/4+i>>>0]=0;GROWABLE_HEAP_I32()[tb+12>>>2]=tb;var headPtr=tb+152;GROWABLE_HEAP_I32()[headPtr>>>2]=headPtr;var tlsMemory=_malloc(512);for(i=0;i<128;++i)GROWABLE_HEAP_U32()[tlsMemory/4+i>>>0]=0;Atomics.store(GROWABLE_HEAP_U32(),tb+100>>2,tlsMemory),Atomics.store(GROWABLE_HEAP_U32(),tb+40>>2,tb),__emscripten_thread_init(tb,!ENVIRONMENT_IS_WORKER,1),_emscripten_register_main_browser_thread_id(tb)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;PThread.threadExitHandlers.length>0;)PThread.threadExitHandlers.pop()();___pthread_tsd_run_dtors()},runExitHandlersAndDeinitThread:function(tb,exitCode){Atomics.store(GROWABLE_HEAP_U32(),tb+56>>2,1),Atomics.store(GROWABLE_HEAP_U32(),tb+60>>2,0),PThread.runExitHandlers(),Atomics.store(GROWABLE_HEAP_U32(),tb+4>>2,exitCode),Atomics.store(GROWABLE_HEAP_U32(),tb+0>>2,1),_emscripten_futex_wake(tb+0,2147483647),__emscripten_thread_init(0,0,0)},setExitStatus:function(status){},threadExit:function(exitCode){var tb=_pthread_self();tb&&(PThread.runExitHandlersAndDeinitThread(tb,exitCode),ENVIRONMENT_IS_PTHREAD&&postMessage({cmd:"exit"}))},threadCancel:function(){PThread.runExitHandlersAndDeinitThread(_pthread_self(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var t in PThread.pthreads)(pthread=PThread.pthreads[t])&&pthread.worker&&PThread.returnWorkerToPool(pthread.worker);PThread.pthreads={};for(var i=0;i<PThread.unusedWorkers.length;++i)(worker=PThread.unusedWorkers[i]).terminate();for(PThread.unusedWorkers=[],i=0;i<PThread.runningWorkers.length;++i){var worker,pthread=(worker=PThread.runningWorkers[i]).pthread;PThread.freeThreadData(pthread),worker.terminate()}PThread.runningWorkers=[]},freeThreadData:function(pthread){if(pthread){if(pthread.threadInfoStruct){var tlsMemory=GROWABLE_HEAP_I32()[pthread.threadInfoStruct+100>>>2];GROWABLE_HEAP_I32()[pthread.threadInfoStruct+100>>>2]=0,_free(tlsMemory),_free(pthread.threadInfoStruct)}pthread.threadInfoStruct=0,pthread.allocatedOwnStack&&pthread.stackBase&&_free(pthread.stackBase),pthread.stackBase=0,pthread.worker&&(pthread.worker.pthread=null)}},returnWorkerToPool:function(worker){PThread.runWithoutMainThreadQueuedCalls((function(){delete PThread.pthreads[worker.pthread.threadInfoStruct],PThread.unusedWorkers.push(worker),PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker),1),PThread.freeThreadData(worker.pthread),worker.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(func){GROWABLE_HEAP_I32()[__emscripten_allow_main_runtime_queued_calls>>>2]=0;try{func()}finally{GROWABLE_HEAP_I32()[__emscripten_allow_main_runtime_queued_calls>>>2]=1}},receiveObjectTransfer:function(data){},threadInit:function(){for(var i in PThread.tlsInitFunctions)PThread.tlsInitFunctions[i]()},loadWasmModuleToWorker:function(worker,onFinishedLoading){worker.onmessage=function(e){var d=e.data,cmd=d.cmd;if(worker.pthread&&(PThread.currentProxiedOperationCallerThread=worker.pthread.threadInfoStruct),d.targetThread&&d.targetThread!=_pthread_self()){var thread=PThread.pthreads[d.targetThread];return thread&&thread.worker.postMessage(e.data,d.transferList),void(PThread.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===cmd)_emscripten_main_thread_process_queued_calls();else if("spawnThread"===cmd)spawnThread(e.data);else if("cleanupThread"===cmd)!function(pthread_ptr){if(ENVIRONMENT_IS_PTHREAD)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!pthread_ptr)throw"Internal Error! Null pthread_ptr in cleanupThread!";var pthread=PThread.pthreads[pthread_ptr];if(pthread){GROWABLE_HEAP_I32()[pthread_ptr+12>>>2]=0;var worker=pthread.worker;PThread.returnWorkerToPool(worker)}}(d.thread);else if("killThread"===cmd)!function(pthread_ptr){if(ENVIRONMENT_IS_PTHREAD)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!pthread_ptr)throw"Internal Error! Null pthread_ptr in killThread!";GROWABLE_HEAP_I32()[pthread_ptr+12>>>2]=0;var pthread=PThread.pthreads[pthread_ptr];pthread.worker.terminate(),PThread.freeThreadData(pthread),PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(pthread.worker),1),pthread.worker.pthread=void 0}(d.thread);else if("cancelThread"===cmd)!function(pthread_ptr){if(ENVIRONMENT_IS_PTHREAD)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!pthread_ptr)throw"Internal Error! Null pthread_ptr in cancelThread!";PThread.pthreads[pthread_ptr].worker.postMessage({cmd:"cancel"})}(d.thread);else if("loaded"===cmd)worker.loaded=!0,onFinishedLoading&&onFinishedLoading(worker),worker.runPthread&&(worker.runPthread(),delete worker.runPthread);else if("print"===cmd)out("Thread "+d.threadId+": "+d.text);else if("printErr"===cmd)err("Thread "+d.threadId+": "+d.text);else if("alert"===cmd)alert("Thread "+d.threadId+": "+d.text);else if("exit"===cmd)worker.pthread&&Atomics.load(GROWABLE_HEAP_U32(),worker.pthread.threadInfoStruct+64>>2)&&PThread.returnWorkerToPool(worker);else if("exitProcess"===cmd)try{exit(d.returnCode)}catch(e2){if(e2 instanceof ExitStatus)return;throw e2}else"cancelDone"===cmd?PThread.returnWorkerToPool(worker):"objectTransfer"===cmd?PThread.receiveObjectTransfer(e.data):"setimmediate"===e.data.target?worker.postMessage(e.data):err("worker sent an unknown command "+cmd);PThread.currentProxiedOperationCallerThread=void 0},worker.onerror=function(e){err("pthread sent an error! "+e.filename+":"+e.lineno+": "+e.message)},ENVIRONMENT_IS_NODE&&(worker.on("message",(function(data){worker.onmessage({data})})),worker.on("error",(function(data){worker.onerror(data)})),worker.on("exit",(function(data){}))),worker.postMessage({cmd:"load",urlOrBlob:Module.mainScriptUrlOrBlob||_scriptDir,wasmMemory,wasmModule})},allocateUnusedWorker:function(){var pthreadMainJs=locateFile("web-ifc-mt.worker.js");PThread.unusedWorkers.push(new Worker(pthreadMainJs))},getNewWorker:function(){return 0==PThread.unusedWorkers.length&&(PThread.allocateUnusedWorker(),PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0])),PThread.unusedWorkers.pop()},busySpinWait:function(msecs){for(var t=performance.now()+msecs;performance.now()<t;);}};Module.establishStackSpace=function(stackTop,stackMax){_emscripten_stack_set_limits(stackTop,stackMax),stackRestore(stackTop)},Module.invokeEntryPoint=function(ptr,arg){return wasmTable.get(ptr)(arg)},_emscripten_get_now=ENVIRONMENT_IS_NODE?function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:ENVIRONMENT_IS_PTHREAD?function(){return performance.now()-Module.__performance_now_clock_drift}:function(){return performance.now()};var _emscripten_get_now_is_monotonic=!0;function setErrNo(value){return GROWABLE_HEAP_I32()[___errno_location()>>>2]=value,value}function ExceptionInfo(excPtr){this.excPtr=excPtr,this.ptr=excPtr-16,this.set_type=function(type){GROWABLE_HEAP_I32()[this.ptr+4>>>2]=type},this.get_type=function(){return GROWABLE_HEAP_I32()[this.ptr+4>>>2]},this.set_destructor=function(destructor){GROWABLE_HEAP_I32()[this.ptr+8>>>2]=destructor},this.get_destructor=function(){return GROWABLE_HEAP_I32()[this.ptr+8>>>2]},this.set_refcount=function(refcount){GROWABLE_HEAP_I32()[this.ptr>>>2]=refcount},this.set_caught=function(caught){caught=caught?1:0,GROWABLE_HEAP_I8()[this.ptr+12>>>0]=caught},this.get_caught=function(){return 0!=GROWABLE_HEAP_I8()[this.ptr+12>>>0]},this.set_rethrown=function(rethrown){rethrown=rethrown?1:0,GROWABLE_HEAP_I8()[this.ptr+13>>>0]=rethrown},this.get_rethrown=function(){return 0!=GROWABLE_HEAP_I8()[this.ptr+13>>>0]},this.init=function(type,destructor){this.set_type(type),this.set_destructor(destructor),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(GROWABLE_HEAP_I32(),this.ptr+0>>2,1)},this.release_ref=function(){return 1===Atomics.sub(GROWABLE_HEAP_I32(),this.ptr+0>>2,1)}}var PATH={splitPath:function(filename){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){for(var up=0,i=parts.length-1;i>=0;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up;up--)parts.unshift("..");return parts},normalize:function(path){var isAbsolute="/"===path.charAt(0),trailingSlash="/"===path.substr(-1);return(path=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!isAbsolute).join("/"))||isAbsolute||(path="."),path&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];return root||dir?(dir&&(dir=dir.substr(0,dir.length-1)),root+dir):"."},basename:function(path){if("/"===path)return"/";var lastSlash=(path=(path=PATH.normalize(path)).replace(/\/$/,"")).lastIndexOf("/");return-1===lastSlash?path:path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}},PATH_FS={resolve:function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");if(!path)return"";resolvedPath=path+"/"+resolvedPath,resolvedAbsolute="/"===path.charAt(0)}return(resolvedAbsolute?"/":"")+(resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter((function(p){return!!p})),!resolvedAbsolute).join("/"))||"."},relative:function(from,to){function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;end>=0&&""===arr[end];end--);return start>end?[]:arr.slice(start,end-start+1)}from=PATH_FS.resolve(from).substr(1),to=PATH_FS.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;i<length;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}var outputParts=[];for(i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return(outputParts=outputParts.concat(toParts.slice(samePartsLength))).join("/")}},TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops},FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty)throw new FS.ErrnoError(43);stream.tty=tty,stream.seekable=!1},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer2,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char)throw new FS.ErrnoError(60);for(var bytesRead=0,i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer2[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer2,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char)throw new FS.ErrnoError(60);try{for(var i=0;i<length;i++)stream.tty.ops.put_char(stream.tty,buffer2[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var buf=Buffer.alloc(256),bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,256,null)}catch(e){if(!e.toString().includes("EOF"))throw e;bytesRead=0}result=bytesRead>0?buf.slice(0,bytesRead).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(result=window.prompt("Input: "))&&(result+="\n"):"function"==typeof readline&&null!==(result=readline())&&(result+="\n");if(!result)return null;tty.input=intArrayFromString(result,!0)}return tty.input.shift()},put_char:function(tty,val){null===val||10===val?(out(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},flush:function(tty){tty.output&&tty.output.length>0&&(out(UTF8ArrayToString(tty.output,0)),tty.output=[])}},default_tty1_ops:{put_char:function(tty,val){null===val||10===val?(err(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},flush:function(tty){tty.output&&tty.output.length>0&&(err(UTF8ArrayToString(tty.output,0)),tty.output=[])}}};function mmapAlloc(size){size=function(size,factor){return factor||(factor=STACK_ALIGN),Math.ceil(size/factor)*factor}(size,65536);var ptr=_memalign(65536,size);return ptr?(function(address,size){GROWABLE_HEAP_U8().fill(0,address,address+size)}(ptr,size),ptr):0}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16895,0)},createNode:function(parent,name2,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode))throw new FS.ErrnoError(63);MEMFS.ops_table||(MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}});var node=FS.createNode(parent,name2,mode,dev);return FS.isDir(node.mode)?(node.node_ops=MEMFS.ops_table.dir.node,node.stream_ops=MEMFS.ops_table.dir.stream,node.contents={}):FS.isFile(node.mode)?(node.node_ops=MEMFS.ops_table.file.node,node.stream_ops=MEMFS.ops_table.file.stream,node.usedBytes=0,node.contents=null):FS.isLink(node.mode)?(node.node_ops=MEMFS.ops_table.link.node,node.stream_ops=MEMFS.ops_table.link.stream):FS.isChrdev(node.mode)&&(node.node_ops=MEMFS.ops_table.chrdev.node,node.stream_ops=MEMFS.ops_table.chrdev.stream),node.timestamp=Date.now(),parent&&(parent.contents[name2]=node,parent.timestamp=node.timestamp),node},getFileDataAsTypedArray:function(node){return node.contents?node.contents.subarray?node.contents.subarray(0,node.usedBytes):new Uint8Array(node.contents):new Uint8Array(0)},expandFileStorage:function(node,newCapacity){newCapacity>>>=0;var prevCapacity=node.contents?node.contents.length:0;if(!(prevCapacity>=newCapacity)){newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<1048576?2:1.125)>>>0),0!=prevCapacity&&(newCapacity=Math.max(newCapacity,256));var oldContents=node.contents;node.contents=new Uint8Array(newCapacity),node.usedBytes>0&&node.contents.set(oldContents.subarray(0,node.usedBytes),0)}},resizeFileStorage:function(node,newSize){if(newSize>>>=0,node.usedBytes!=newSize)if(0==newSize)node.contents=null,node.usedBytes=0;else{var oldContents=node.contents;node.contents=new Uint8Array(newSize),oldContents&&node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes))),node.usedBytes=newSize}},node_ops:{getattr:function(node){var attr={};return attr.dev=FS.isChrdev(node.mode)?node.id:1,attr.ino=node.id,attr.mode=node.mode,attr.nlink=1,attr.uid=0,attr.gid=0,attr.rdev=node.rdev,FS.isDir(node.mode)?attr.size=4096:FS.isFile(node.mode)?attr.size=node.usedBytes:FS.isLink(node.mode)?attr.size=node.link.length:attr.size=0,attr.atime=new Date(node.timestamp),attr.mtime=new Date(node.timestamp),attr.ctime=new Date(node.timestamp),attr.blksize=4096,attr.blocks=Math.ceil(attr.size/attr.blksize),attr},setattr:function(node,attr){void 0!==attr.mode&&(node.mode=attr.mode),void 0!==attr.timestamp&&(node.timestamp=attr.timestamp),void 0!==attr.size&&MEMFS.resizeFileStorage(node,attr.size)},lookup:function(parent,name2){throw FS.genericErrors[44]},mknod:function(parent,name2,mode,dev){return MEMFS.createNode(parent,name2,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node)for(var i in new_node.contents)throw new FS.ErrnoError(55)}delete old_node.parent.contents[old_node.name],old_node.parent.timestamp=Date.now(),old_node.name=new_name,new_dir.contents[new_name]=old_node,new_dir.timestamp=old_node.parent.timestamp,old_node.parent=new_dir},unlink:function(parent,name2){delete parent.contents[name2],parent.timestamp=Date.now()},rmdir:function(parent,name2){var node=FS.lookupNode(parent,name2);for(var i in node.contents)throw new FS.ErrnoError(55);delete parent.contents[name2],parent.timestamp=Date.now()},readdir:function(node){var entries=[".",".."];for(var key2 in node.contents)node.contents.hasOwnProperty(key2)&&entries.push(key2);return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,41471,0);return node.link=oldpath,node},readlink:function(node){if(!FS.isLink(node.mode))throw new FS.ErrnoError(28);return node.link}},stream_ops:{read:function(stream,buffer2,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray)buffer2.set(contents.subarray(position,position+size),offset);else for(var i=0;i<size;i++)buffer2[offset+i]=contents[position+i];return size},write:function(stream,buffer2,offset,length,position,canOwn){if(buffer2.buffer===GROWABLE_HEAP_I8().buffer&&(canOwn=!1),!length)return 0;var node=stream.node;if(node.timestamp=Date.now(),buffer2.subarray&&(!node.contents||node.contents.subarray)){if(canOwn)return node.contents=buffer2.subarray(offset,offset+length),node.usedBytes=length,length;if(0===node.usedBytes&&0===position)return node.contents=buffer2.slice(offset,offset+length),node.usedBytes=length,length;if(position+length<=node.usedBytes)return node.contents.set(buffer2.subarray(offset,offset+length),position),length}if(MEMFS.expandFileStorage(node,position+length),node.contents.subarray&&buffer2.subarray)node.contents.set(buffer2.subarray(offset,offset+length),position);else for(var i=0;i<length;i++)node.contents[position+i]=buffer2[offset+i];return node.usedBytes=Math.max(node.usedBytes,position+length),length},llseek:function(stream,offset,whence){var position=offset;if(1===whence?position+=stream.position:2===whence&&FS.isFile(stream.node.mode)&&(position+=stream.node.usedBytes),position<0)throw new FS.ErrnoError(28);return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length),stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){if(0!==address)throw new FS.ErrnoError(28);if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);var ptr,allocated,contents=stream.node.contents;if(2&flags||contents.buffer!==buffer){if((position>0||position+length<contents.length)&&(contents=contents.subarray?contents.subarray(position,position+length):Array.prototype.slice.call(contents,position,position+length)),allocated=!0,!(ptr=mmapAlloc(length)))throw new FS.ErrnoError(48);ptr>>>=0,GROWABLE_HEAP_I8().set(contents,ptr>>>0)}else allocated=!1,ptr=contents.byteOffset;return{ptr,allocated}},msync:function(stream,buffer2,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);return 2&mmapFlags||MEMFS.stream_ops.write(stream,buffer2,0,length,offset,!1),0}}},FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path,opts){if(opts=opts||{},!(path=PATH_FS.resolve(FS.cwd(),path)))return{path:"",node:null};var defaults={follow_mount:!0,recurse_count:0};for(var key2 in defaults)void 0===opts[key2]&&(opts[key2]=defaults[key2]);if(opts.recurse_count>8)throw new FS.ErrnoError(32);for(var parts=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!1),current=FS.root,current_path="/",i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent)break;if(current=FS.lookupNode(current,parts[i]),current_path=PATH.join2(current_path,parts[i]),FS.isMountpoint(current)&&(!islast||islast&&opts.follow_mount)&&(current=current.mounted.root),!islast||opts.follow)for(var count=0;FS.isLink(current.mode);){var link=FS.readlink(current_path);if(current_path=PATH_FS.resolve(PATH.dirname(current_path),link),current=FS.lookupPath(current_path,{recurse_count:opts.recurse_count}).node,count++>40)throw new FS.ErrnoError(32)}}return{path:current_path,node:current}},getPath:function(node){for(var path;;){if(FS.isRoot(node)){var mount=node.mount.mountpoint;return path?"/"!==mount[mount.length-1]?mount+"/"+path:mount+path:mount}path=path?node.name+"/"+path:node.name,node=node.parent}},hashName:function(parentid,name2){for(var hash=0,i=0;i<name2.length;i++)hash=(hash<<5)-hash+name2.charCodeAt(i)|0;return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash],FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node)FS.nameTable[hash]=node.name_next;else for(var current=FS.nameTable[hash];current;){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}},lookupNode:function(parent,name2){var errCode=FS.mayLookup(parent);if(errCode)throw new FS.ErrnoError(errCode,parent);for(var hash=FS.hashName(parent.id,name2),node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name2)return node}return FS.lookup(parent,name2)},createNode:function(parent,name2,mode,rdev){var node=new FS.FSNode(parent,name2,mode,rdev);return FS.hashAddNode(node),node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return 32768==(61440&mode)},isDir:function(mode){return 16384==(61440&mode)},isLink:function(mode){return 40960==(61440&mode)},isChrdev:function(mode){return 8192==(61440&mode)},isBlkdev:function(mode){return 24576==(61440&mode)},isFIFO:function(mode){return 4096==(61440&mode)},isSocket:function(mode){return 49152==(49152&mode)},flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(void 0===flags)throw new Error("Unknown file open mode: "+str);return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][3&flag];return 512&flag&&(perms+="w"),perms},nodePermissions:function(node,perms){return FS.ignorePermissions||(!perms.includes("r")||292&node.mode)&&(!perms.includes("w")||146&node.mode)&&(!perms.includes("x")||73&node.mode)?0:2},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");return errCode||(dir.node_ops.lookup?0:2)},mayCreate:function(dir,name2){try{return FS.lookupNode(dir,name2),20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name2,isdir){var node;try{node=FS.lookupNode(dir,name2)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode)return errCode;if(isdir){if(!FS.isDir(node.mode))return 54;if(FS.isRoot(node)||FS.getPath(node)===FS.cwd())return 10}else if(FS.isDir(node.mode))return 31;return 0},mayOpen:function(node,flags){return node?FS.isLink(node.mode)?32:FS.isDir(node.mode)&&("r"!==FS.flagsToPermissionString(flags)||512&flags)?31:FS.nodePermissions(node,FS.flagsToPermissionString(flags)):44},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0,fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++)if(!FS.streams[fd])return fd;throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){FS.FSStream||(FS.FSStream=function(){},FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}});var newStream=new FS.FSStream;for(var p in stream)newStream[p]=stream[p];stream=newStream;var fd=FS.nextfd(fd_start,fd_end);return stream.fd=fd,FS.streams[fd]=stream,stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops,stream.stream_ops.open&&stream.stream_ops.open(stream)},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return 255&dev},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){for(var mounts=[],check=[mount];check.length;){var m=check.pop();mounts.push(m),check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){"function"==typeof populate&&(callback=populate,populate=!1),FS.syncFSRequests++,FS.syncFSRequests>1&&err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var mounts=FS.getMounts(FS.root.mount),completed=0;function doCallback(errCode){return FS.syncFSRequests--,callback(errCode)}function done(errCode){if(errCode)return done.errored?void 0:(done.errored=!0,doCallback(errCode));++completed>=mounts.length&&doCallback(null)}mounts.forEach((function(mount){if(!mount.type.syncfs)return done(null);mount.type.syncfs(mount,populate,done)}))},mount:function(type,opts,mountpoint){var node,root="/"===mountpoint,pseudo=!mountpoint;if(root&&FS.root)throw new FS.ErrnoError(10);if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:!1});if(mountpoint=lookup.path,node=lookup.node,FS.isMountpoint(node))throw new FS.ErrnoError(10);if(!FS.isDir(node.mode))throw new FS.ErrnoError(54)}var mount={type,opts,mountpoint,mounts:[]},mountRoot=type.mount(mount);return mountRoot.mount=mount,mount.root=mountRoot,root?FS.root=mountRoot:node&&(node.mounted=mount,node.mount&&node.mount.mounts.push(mount)),mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:!1});if(!FS.isMountpoint(lookup.node))throw new FS.ErrnoError(28);var node=lookup.node,mount=node.mounted,mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach((function(hash){for(var current=FS.nameTable[hash];current;){var next=current.name_next;mounts.includes(current.mount)&&FS.destroyNode(current),current=next}})),node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:function(parent,name2){return parent.node_ops.lookup(parent,name2)},mknod:function(path,mode,dev){var parent=FS.lookupPath(path,{parent:!0}).node,name2=PATH.basename(path);if(!name2||"."===name2||".."===name2)throw new FS.ErrnoError(28);var errCode=FS.mayCreate(parent,name2);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.mknod)throw new FS.ErrnoError(63);return parent.node_ops.mknod(parent,name2,mode,dev)},create:function(path,mode){return mode=void 0!==mode?mode:438,mode&=4095,mode|=32768,FS.mknod(path,mode,0)},mkdir:function(path,mode){return mode=void 0!==mode?mode:511,mode&=1023,mode|=16384,FS.mknod(path,mode,0)},mkdirTree:function(path,mode){for(var dirs=path.split("/"),d="",i=0;i<dirs.length;++i)if(dirs[i]){d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(20!=e.errno)throw e}}},mkdev:function(path,mode,dev){return void 0===dev&&(dev=mode,mode=438),mode|=8192,FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath))throw new FS.ErrnoError(44);var parent=FS.lookupPath(newpath,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var newname=PATH.basename(newpath),errCode=FS.mayCreate(parent,newname);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.symlink)throw new FS.ErrnoError(63);return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dir,new_dir,old_dirname=PATH.dirname(old_path),new_dirname=PATH.dirname(new_path),old_name=PATH.basename(old_path),new_name=PATH.basename(new_path);if(old_dir=FS.lookupPath(old_path,{parent:!0}).node,new_dir=FS.lookupPath(new_path,{parent:!0}).node,!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount)throw new FS.ErrnoError(75);var new_node,old_node=FS.lookupNode(old_dir,old_name),relative=PATH_FS.relative(old_path,new_dirname);if("."!==relative.charAt(0))throw new FS.ErrnoError(28);if("."!==(relative=PATH_FS.relative(new_path,old_dirname)).charAt(0))throw new FS.ErrnoError(55);try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node!==new_node){var isdir=FS.isDir(old_node.mode),errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode)throw new FS.ErrnoError(errCode);if(errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name))throw new FS.ErrnoError(errCode);if(!old_dir.node_ops.rename)throw new FS.ErrnoError(63);if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node))throw new FS.ErrnoError(10);if(new_dir!==old_dir&&(errCode=FS.nodePermissions(old_dir,"w")))throw new FS.ErrnoError(errCode);try{FS.trackingDelegate.willMovePath&&FS.trackingDelegate.willMovePath(old_path,new_path)}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{FS.trackingDelegate.onMovePath&&FS.trackingDelegate.onMovePath(old_path,new_path)}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}}},rmdir:function(path){var parent=FS.lookupPath(path,{parent:!0}).node,name2=PATH.basename(path),node=FS.lookupNode(parent,name2),errCode=FS.mayDelete(parent,name2,!0);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.rmdir)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);try{FS.trackingDelegate.willDeletePath&&FS.trackingDelegate.willDeletePath(path)}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name2),FS.destroyNode(node);try{FS.trackingDelegate.onDeletePath&&FS.trackingDelegate.onDeletePath(path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var node=FS.lookupPath(path,{follow:!0}).node;if(!node.node_ops.readdir)throw new FS.ErrnoError(54);return node.node_ops.readdir(node)},unlink:function(path){var parent=FS.lookupPath(path,{parent:!0}).node,name2=PATH.basename(path),node=FS.lookupNode(parent,name2),errCode=FS.mayDelete(parent,name2,!1);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.unlink)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);try{FS.trackingDelegate.willDeletePath&&FS.trackingDelegate.willDeletePath(path)}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name2),FS.destroyNode(node);try{FS.trackingDelegate.onDeletePath&&FS.trackingDelegate.onDeletePath(path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var link=FS.lookupPath(path).node;if(!link)throw new FS.ErrnoError(44);if(!link.node_ops.readlink)throw new FS.ErrnoError(28);return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var node=FS.lookupPath(path,{follow:!dontFollow}).node;if(!node)throw new FS.ErrnoError(44);if(!node.node_ops.getattr)throw new FS.ErrnoError(63);return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,!0)},chmod:function(path,mode,dontFollow){var node;if(!(node="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);node.node_ops.setattr(node,{mode:4095&mode|-4096&node.mode,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,!0)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(!(node="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,!0)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0)throw new FS.ErrnoError(28);var node;if(!(node="string"==typeof path?FS.lookupPath(path,{follow:!0}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);if(FS.isDir(node.mode))throw new FS.ErrnoError(31);if(!FS.isFile(node.mode))throw new FS.ErrnoError(28);var errCode=FS.nodePermissions(node,"w");if(errCode)throw new FS.ErrnoError(errCode);node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(28);FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var node=FS.lookupPath(path,{follow:!0}).node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(""===path)throw new FS.ErrnoError(44);var node;if(mode=void 0===mode?438:mode,mode=64&(flags="string"==typeof flags?FS.modeStringToFlags(flags):flags)?4095&mode|32768:0,"object"==typeof path)node=path;else{path=PATH.normalize(path);try{node=FS.lookupPath(path,{follow:!(131072&flags)}).node}catch(e){}}var created=!1;if(64&flags)if(node){if(128&flags)throw new FS.ErrnoError(20)}else node=FS.mknod(path,mode,0),created=!0;if(!node)throw new FS.ErrnoError(44);if(FS.isChrdev(node.mode)&&(flags&=-513),65536&flags&&!FS.isDir(node.mode))throw new FS.ErrnoError(54);if(!created){var errCode=FS.mayOpen(node,flags);if(errCode)throw new FS.ErrnoError(errCode)}512&flags&&FS.truncate(node,0),flags&=-131713;var stream=FS.createStream({node,path:FS.getPath(node),flags,seekable:!0,position:0,stream_ops:node.stream_ops,ungotten:[],error:!1},fd_start,fd_end);stream.stream_ops.open&&stream.stream_ops.open(stream),!Module.logReadFiles||1&flags||(FS.readFiles||(FS.readFiles={}),path in FS.readFiles||(FS.readFiles[path]=1,err("FS.trackingDelegate error on read file: "+path)));try{if(FS.trackingDelegate.onOpenFile){var trackingFlags=0;1!=(2097155&flags)&&(trackingFlags|=FS.tracking.openFlags.READ),0!=(2097155&flags)&&(trackingFlags|=FS.tracking.openFlags.WRITE),FS.trackingDelegate.onOpenFile(path,trackingFlags)}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream))throw new FS.ErrnoError(8);stream.getdents&&(stream.getdents=null);try{stream.stream_ops.close&&stream.stream_ops.close(stream)}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return null===stream.fd},llseek:function(stream,offset,whence){if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(!stream.seekable||!stream.stream_ops.llseek)throw new FS.ErrnoError(70);if(0!=whence&&1!=whence&&2!=whence)throw new FS.ErrnoError(28);return stream.position=stream.stream_ops.llseek(stream,offset,whence),stream.ungotten=[],stream.position},read:function(stream,buffer2,offset,length,position){if(offset>>>=0,length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(1==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.read)throw new FS.ErrnoError(28);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;var bytesRead=stream.stream_ops.read(stream,buffer2,offset,length,position);return seeking||(stream.position+=bytesRead),bytesRead},write:function(stream,buffer2,offset,length,position,canOwn){if(offset>>>=0,length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.write)throw new FS.ErrnoError(28);stream.seekable&&1024&stream.flags&&FS.llseek(stream,0,2);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;var bytesWritten=stream.stream_ops.write(stream,buffer2,offset,length,position,canOwn);seeking||(stream.position+=bytesWritten);try{stream.path&&FS.trackingDelegate.onWriteToFile&&FS.trackingDelegate.onWriteToFile(stream.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(offset<0||length<=0)throw new FS.ErrnoError(28);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode))throw new FS.ErrnoError(43);if(!stream.stream_ops.allocate)throw new FS.ErrnoError(138);stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,address,length,position,prot,flags){if(address>>>=0,0!=(2&prot)&&0==(2&flags)&&2!=(2097155&stream.flags))throw new FS.ErrnoError(2);if(1==(2097155&stream.flags))throw new FS.ErrnoError(2);if(!stream.stream_ops.mmap)throw new FS.ErrnoError(43);return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:function(stream,buffer2,offset,length,mmapFlags){return offset>>>=0,stream&&stream.stream_ops.msync?stream.stream_ops.msync(stream,buffer2,offset,length,mmapFlags):0},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl)throw new FS.ErrnoError(59);return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){if((opts=opts||{}).flags=opts.flags||0,opts.encoding=opts.encoding||"binary","utf8"!==opts.encoding&&"binary"!==opts.encoding)throw new Error('Invalid encoding type "'+opts.encoding+'"');var ret,stream=FS.open(path,opts.flags),length=FS.stat(path).size,buf=new Uint8Array(length);return FS.read(stream,buf,0,length,0),"utf8"===opts.encoding?ret=UTF8ArrayToString(buf,0):"binary"===opts.encoding&&(ret=buf),FS.close(stream),ret},writeFile:function(path,data,opts){(opts=opts||{}).flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if("string"==typeof data){var buf=new Uint8Array(lengthBytesUTF8(data)+1),actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,void 0,opts.canOwn)}else{if(!ArrayBuffer.isView(data))throw new Error("Unsupported data type");FS.write(stream,data,0,data.byteLength,void 0,opts.canOwn)}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:!0});if(null===lookup.node)throw new FS.ErrnoError(44);if(!FS.isDir(lookup.node.mode))throw new FS.ErrnoError(54);var errCode=FS.nodePermissions(lookup.node,"x");if(errCode)throw new FS.ErrnoError(errCode);FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp"),FS.mkdir("/home"),FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev"),FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer2,offset,length,pos){return length}}),FS.mkdev("/dev/null",FS.makedev(1,3)),TTY.register(FS.makedev(5,0),TTY.default_tty_ops),TTY.register(FS.makedev(6,0),TTY.default_tty1_ops),FS.mkdev("/dev/tty",FS.makedev(5,0)),FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var randomBuffer=new Uint8Array(1);return function(){return crypto.getRandomValues(randomBuffer),randomBuffer[0]}}if(ENVIRONMENT_IS_NODE)try{var crypto_module=require_crypto();return function(){return crypto_module.randomBytes(1)[0]}}catch(e){}return function(){abort("randomDevice")}}();FS.createDevice("/dev","random",random_device),FS.createDevice("/dev","urandom",random_device),FS.mkdir("/dev/shm"),FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd"),FS.mount({mount:function(){var node=FS.createNode(proc_self,"fd",16895,73);return node.node_ops={lookup:function(parent,name2){var fd=+name2,stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};return ret.parent=ret,ret}},node}},{},"/proc/self/fd")},createStandardStreams:function(){Module.stdin?FS.createDevice("/dev","stdin",Module.stdin):FS.symlink("/dev/tty","/dev/stdin"),Module.stdout?FS.createDevice("/dev","stdout",null,Module.stdout):FS.symlink("/dev/tty","/dev/stdout"),Module.stderr?FS.createDevice("/dev","stderr",null,Module.stderr):FS.symlink("/dev/tty1","/dev/stderr"),FS.open("/dev/stdin",0),FS.open("/dev/stdout",1),FS.open("/dev/stderr",1)},ensureErrnoError:function(){FS.ErrnoError||(FS.ErrnoError=function(errno,node){this.node=node,this.setErrno=function(errno2){this.errno=errno2},this.setErrno(errno),this.message="FS error"},FS.ErrnoError.prototype=new Error,FS.ErrnoError.prototype.constructor=FS.ErrnoError,[44].forEach((function(code){FS.genericErrors[code]=new FS.ErrnoError(code),FS.genericErrors[code].stack="<generic error, no stack>"})))},staticInit:function(){FS.ensureErrnoError(),FS.nameTable=new Array(4096),FS.mount(MEMFS,{},"/"),FS.createDefaultDirectories(),FS.createDefaultDevices(),FS.createSpecialDirectories(),FS.filesystems={MEMFS}},init:function(input,output,error){FS.init.initialized=!0,FS.ensureErrnoError(),Module.stdin=input||Module.stdin,Module.stdout=output||Module.stdout,Module.stderr=error||Module.stderr,FS.createStandardStreams()},quit:function(){FS.init.initialized=!1;var fflush=Module._fflush;fflush&&fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];stream&&FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;return canRead&&(mode|=365),canWrite&&(mode|=146),mode},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);return ret.exists?ret.object:null},analyzePath:function(path,dontResolveLastLink){try{path=(lookup=FS.lookupPath(path,{follow:!dontResolveLastLink})).path}catch(e){}var ret={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:!0});ret.parentExists=!0,ret.parentPath=lookup.path,ret.parentObject=lookup.node,ret.name=PATH.basename(path),lookup=FS.lookupPath(path,{follow:!dontResolveLastLink}),ret.exists=!0,ret.path=lookup.path,ret.object=lookup.node,ret.name=lookup.node.name,ret.isRoot="/"===lookup.path}catch(e){ret.error=e.errno}return ret},createPath:function(parent,path,canRead,canWrite){parent="string"==typeof parent?parent:FS.getPath(parent);for(var parts=path.split("/").reverse();parts.length;){var part=parts.pop();if(part){var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}}return current},createFile:function(parent,name2,properties,canRead,canWrite){var path=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name2),mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name2,data,canRead,canWrite,canOwn){var path=name2?PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name2):parent,mode=FS.getMode(canRead,canWrite),node=FS.create(path,mode);if(data){if("string"==typeof data){for(var arr=new Array(data.length),i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,146|mode);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn),FS.close(stream),FS.chmod(node,mode)}return node},createDevice:function(parent,name2,input,output){var path=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name2),mode=FS.getMode(!!input,!!output);FS.createDevice.major||(FS.createDevice.major=64);var dev=FS.makedev(FS.createDevice.major++,0);return FS.registerDevice(dev,{open:function(stream){stream.seekable=!1},close:function(stream){output&&output.buffer&&output.buffer.length&&output(10)},read:function(stream,buffer2,offset,length,pos){for(var bytesRead=0,i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer2[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer2,offset,length,pos){for(var i=0;i<length;i++)try{output(buffer2[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}}),FS.mkdev(path,mode,dev)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!read_)throw new Error("Cannot load without read() or XMLHttpRequest.");try{obj.contents=intArrayFromString(read_(obj.url),!0),obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}},createLazyFile:function(parent,name2,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(idx){if(!(idx>this.length-1||idx<0)){var chunkOffset=idx%this.chunkSize,chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]}},LazyUint8Array.prototype.setDataGetter=function(getter){this.getter=getter},LazyUint8Array.prototype.cacheLength=function(){var xhr=new XMLHttpRequest;if(xhr.open("HEAD",url,!1),xhr.send(null),!(xhr.status>=200&&xhr.status<300||304===xhr.status))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var header,datalength=Number(xhr.getResponseHeader("Content-length")),hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&"bytes"===header,usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&"gzip"===header,chunkSize=1048576;hasByteServing||(chunkSize=datalength);var lazyArray2=this;lazyArray2.setDataGetter((function(chunkNum){var start=chunkNum*chunkSize,end=(chunkNum+1)*chunkSize-1;if(end=Math.min(end,datalength-1),void 0===lazyArray2.chunks[chunkNum]&&(lazyArray2.chunks[chunkNum]=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr2=new XMLHttpRequest;if(xhr2.open("GET",url,!1),datalength!==chunkSize&&xhr2.setRequestHeader("Range","bytes="+from+"-"+to),"undefined"!=typeof Uint8Array&&(xhr2.responseType="arraybuffer"),xhr2.overrideMimeType&&xhr2.overrideMimeType("text/plain; charset=x-user-defined"),xhr2.send(null),!(xhr2.status>=200&&xhr2.status<300||304===xhr2.status))throw new Error("Couldn't load "+url+". Status: "+xhr2.status);return void 0!==xhr2.response?new Uint8Array(xhr2.response||[]):intArrayFromString(xhr2.responseText||"",!0)}(start,end)),void 0===lazyArray2.chunks[chunkNum])throw new Error("doXHR failed!");return lazyArray2.chunks[chunkNum]})),!usesGzip&&datalength||(chunkSize=datalength=1,datalength=this.getter(0).length,chunkSize=datalength,out("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=datalength,this._chunkSize=chunkSize,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var properties={isDevice:!1,contents:lazyArray}}else properties={isDevice:!1,url};var node=FS.createFile(parent,name2,properties,canRead,canWrite);properties.contents?node.contents=properties.contents:properties.url&&(node.contents=null,node.url=properties.url),Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};return Object.keys(node.stream_ops).forEach((function(key2){var fn=node.stream_ops[key2];stream_ops[key2]=function(){return FS.forceLoadFile(node),fn.apply(null,arguments)}})),stream_ops.read=function(stream,buffer2,offset,length,position){FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice)for(var i=0;i<size;i++)buffer2[offset+i]=contents[position+i];else for(i=0;i<size;i++)buffer2[offset+i]=contents.get(position+i);return size},node.stream_ops=stream_ops,node},createPreloadedFile:function(parent,name2,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name2?PATH_FS.resolve(PATH.join2(parent,name2)):parent;function processData(byteArray){function finish(byteArray2){preFinish&&preFinish(),dontCreateFile||FS.createDataFile(parent,name2,byteArray2,canRead,canWrite,canOwn),onload&&onload(),removeRunDependency()}var handled=!1;Module.preloadPlugins.forEach((function(plugin){handled||plugin.canHandle(fullname)&&(plugin.handle(byteArray,fullname,finish,(function(){onerror&&onerror(),removeRunDependency()})),handled=!0)})),handled||finish(byteArray)}addRunDependency(),"string"==typeof url?function(url,onload,onerror,noRunDep){var dep=noRunDep?"":"al "+url;readAsync(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).'),onload(new Uint8Array(arrayBuffer)),dep&&removeRunDependency()}),(function(event){if(!onerror)throw'Loading data file "'+url+'" failed.';onerror()})),dep&&addRunDependency()}(url,(function(byteArray){processData(byteArray)}),onerror):processData(url)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){},onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function(){out("creating db"),openRequest.result.createObjectStore(FS.DB_STORE_NAME)},openRequest.onsuccess=function(){var transaction=openRequest.result.transaction([FS.DB_STORE_NAME],"readwrite"),files=transaction.objectStore(FS.DB_STORE_NAME),ok=0,fail=0,total=paths.length;function finish(){0==fail?onload():onerror()}paths.forEach((function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function(){++ok+fail==total&&finish()},putRequest.onerror=function(){fail++,ok+fail==total&&finish()}})),transaction.onerror=onerror},openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){},onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror,openRequest.onsuccess=function(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){return void onerror(e)}var files=transaction.objectStore(FS.DB_STORE_NAME),ok=0,fail=0,total=paths.length;function finish(){0==fail?onload():onerror()}paths.forEach((function(path){var getRequest=files.get(path);getRequest.onsuccess=function(){FS.analyzePath(path).exists&&FS.unlink(path),FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,!0,!0,!0),++ok+fail==total&&finish()},getRequest.onerror=function(){fail++,ok+fail==total&&finish()}})),transaction.onerror=onerror},openRequest.onerror=onerror}},SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path,allowEmpty){if("/"===path[0])return path;var dir;if(-100===dirfd)dir=FS.cwd();else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}if(0==path.length){if(!allowEmpty)throw new FS.ErrnoError(44);return dir}return PATH.join2(dir,path)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}return GROWABLE_HEAP_I32()[buf>>>2]=stat.dev,GROWABLE_HEAP_I32()[buf+4>>>2]=0,GROWABLE_HEAP_I32()[buf+8>>>2]=stat.ino,GROWABLE_HEAP_I32()[buf+12>>>2]=stat.mode,GROWABLE_HEAP_I32()[buf+16>>>2]=stat.nlink,GROWABLE_HEAP_I32()[buf+20>>>2]=stat.uid,GROWABLE_HEAP_I32()[buf+24>>>2]=stat.gid,GROWABLE_HEAP_I32()[buf+28>>>2]=stat.rdev,GROWABLE_HEAP_I32()[buf+32>>>2]=0,tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[buf+40>>>2]=tempI64[0],GROWABLE_HEAP_I32()[buf+44>>>2]=tempI64[1],GROWABLE_HEAP_I32()[buf+48>>>2]=4096,GROWABLE_HEAP_I32()[buf+52>>>2]=stat.blocks,GROWABLE_HEAP_I32()[buf+56>>>2]=stat.atime.getTime()/1e3|0,GROWABLE_HEAP_I32()[buf+60>>>2]=0,GROWABLE_HEAP_I32()[buf+64>>>2]=stat.mtime.getTime()/1e3|0,GROWABLE_HEAP_I32()[buf+68>>>2]=0,GROWABLE_HEAP_I32()[buf+72>>>2]=stat.ctime.getTime()/1e3|0,GROWABLE_HEAP_I32()[buf+76>>>2]=0,tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[buf+80>>>2]=tempI64[0],GROWABLE_HEAP_I32()[buf+84>>>2]=tempI64[1],0},doMsync:function(addr,stream,len,flags,offset){var buffer2=GROWABLE_HEAP_U8().slice(addr,addr+len);FS.msync(stream,buffer2,offset,len,flags)},doMkdir:function(path,mode){return"/"===(path=PATH.normalize(path))[path.length-1]&&(path=path.substr(0,path.length-1)),FS.mkdir(path,mode,0),0},doMknod:function(path,mode,dev){switch(61440&mode){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}return FS.mknod(path,mode,dev),0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path),len=Math.min(bufsize,lengthBytesUTF8(ret)),endChar=GROWABLE_HEAP_I8()[buf+len>>>0];return stringToUTF8(ret,buf,bufsize+1),GROWABLE_HEAP_I8()[buf+len>>>0]=endChar,len},doAccess:function(path,amode){if(-8&amode)return-28;var node;if(!(node=FS.lookupPath(path,{follow:!0}).node))return-44;var perms="";return 4&amode&&(perms+="r"),2&amode&&(perms+="w"),1&amode&&(perms+="x"),perms&&FS.nodePermissions(node,perms)?-2:0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);return suggest&&FS.close(suggest),FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){for(var ret=0,i=0;i<iovcnt;i++){var ptr=GROWABLE_HEAP_I32()[iov+8*i>>>2],len=GROWABLE_HEAP_I32()[iov+(8*i+4)>>>2],curr=FS.read(stream,GROWABLE_HEAP_I8(),ptr,len,offset);if(curr<0)return-1;if(ret+=curr,curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){for(var ret=0,i=0;i<iovcnt;i++){var ptr=GROWABLE_HEAP_I32()[iov+8*i>>>2],len=GROWABLE_HEAP_I32()[iov+(8*i+4)>>>2],curr=FS.write(stream,GROWABLE_HEAP_I8(),ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:void 0,get:function(){return SYSCALLS.varargs+=4,GROWABLE_HEAP_I32()[SYSCALLS.varargs-4>>>2]},getStr:function(ptr){return UTF8ToString(ptr)},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function ___sys_fcntl64(fd,cmd,varargs){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(2,1,fd,cmd,varargs);SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:return(arg=SYSCALLS.get())<0?-28:FS.open(stream.path,stream.flags,0,arg).fd;case 1:case 2:case 13:case 14:return 0;case 3:return stream.flags;case 4:var arg=SYSCALLS.get();return stream.flags|=arg,0;case 12:return arg=SYSCALLS.get(),GROWABLE_HEAP_I16()[arg+0>>>1]=2,0;case 16:case 8:default:return-28;case 9:return setErrNo(28),-1}}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}}function ___sys_ioctl(fd,op,varargs){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(3,1,fd,op,varargs);SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return stream.tty?0:-59;case 21519:if(!stream.tty)return-59;var argp=SYSCALLS.get();return GROWABLE_HEAP_I32()[argp>>>2]=0,0;case 21520:return stream.tty?-28:-59;case 21531:return argp=SYSCALLS.get(),FS.ioctl(stream,op,argp);default:abort("bad ioctl syscall "+op)}}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}}function ___sys_open(path,flags,varargs){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(4,1,path,flags,varargs);SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path),mode=varargs?SYSCALLS.get():0;return FS.open(pathname,flags,mode).fd}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}}var tupleRegistrations={};function runDestructors(destructors){for(;destructors.length;){var ptr=destructors.pop();destructors.pop()(ptr)}}function simpleReadValueFromPointer(pointer){return this.fromWireType(GROWABLE_HEAP_U32()[pointer>>>2])}var awaitingDependencies={},registeredTypes={},typeDependencies={},char_0=48,char_9=57;function makeLegalFunctionName(name2){if(void 0===name2)return"_unknown";var f=(name2=name2.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return f>=char_0&&f<=char_9?"_"+name2:name2}function createNamedFunction(name2,body){return name2=makeLegalFunctionName(name2),new Function("body","return function "+name2+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,(function(message){this.name=errorName,this.message=message;var stack=new Error(message).stack;void 0!==stack&&(this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,""))}));return errorClass.prototype=Object.create(baseErrorType.prototype),errorClass.prototype.constructor=errorClass,errorClass.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},errorClass}var InternalError=void 0;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){function onComplete(typeConverters2){var myTypeConverters=getTypeConverters(typeConverters2);myTypeConverters.length!==myTypes.length&&throwInternalError("Mismatched type converter count");for(var i=0;i<myTypes.length;++i)registerType(myTypes[i],myTypeConverters[i])}myTypes.forEach((function(type){typeDependencies[type]=dependentTypes}));var typeConverters=new Array(dependentTypes.length),unregisteredTypes=[],registered=0;dependentTypes.forEach((function(dt,i){registeredTypes.hasOwnProperty(dt)?typeConverters[i]=registeredTypes[dt]:(unregisteredTypes.push(dt),awaitingDependencies.hasOwnProperty(dt)||(awaitingDependencies[dt]=[]),awaitingDependencies[dt].push((function(){typeConverters[i]=registeredTypes[dt],++registered===unregisteredTypes.length&&onComplete(typeConverters)})))})),0===unregisteredTypes.length&&onComplete(typeConverters)}var structRegistrations={};function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}var embind_charCodes=void 0;function readLatin1String(ptr){for(var ret="",c=ptr;GROWABLE_HEAP_U8()[c>>>0];)ret+=embind_charCodes[GROWABLE_HEAP_U8()[c++>>>0]];return ret}var BindingError=void 0;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options){if(options=options||{},!("argPackAdvance"in registeredInstance))throw new TypeError("registerType registeredInstance requires argPackAdvance");var name2=registeredInstance.name;if(rawType||throwBindingError('type "'+name2+'" must have a positive integer typeid pointer'),registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations)return;throwBindingError("Cannot register type '"+name2+"' twice")}if(registeredTypes[rawType]=registeredInstance,delete typeDependencies[rawType],awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType],callbacks.forEach((function(cb){cb()}))}}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle))return!1;if(!(other instanceof ClassHandle))return!1;for(var leftClass=this.$$.ptrType.registeredClass,left=this.$$.ptr,rightClass=other.$$.ptrType.registeredClass,right=other.$$.ptr;leftClass.baseClass;)left=leftClass.upcast(left),leftClass=leftClass.baseClass;for(;rightClass.baseClass;)right=rightClass.upcast(right),rightClass=rightClass.baseClass;return leftClass===rightClass&&left===right}function throwInstanceAlreadyDeleted(obj){throwBindingError(obj.$$.ptrType.registeredClass.name+" instance already deleted")}var finalizationGroup=!1;function detachFinalizer(handle){}function releaseClassHandle($$){$$.count.value-=1,0===$$.count.value&&function($$){$$.smartPtr?$$.smartPtrType.rawDestructor($$.smartPtr):$$.ptrType.registeredClass.rawDestructor($$.ptr)}($$)}function attachFinalizer(handle){return"undefined"==typeof FinalizationGroup?(attachFinalizer=function(handle2){return handle2},handle):(finalizationGroup=new FinalizationGroup((function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;$$.ptr&&releaseClassHandle($$)}})),detachFinalizer=function(handle2){finalizationGroup.unregister(handle2.$$)},(attachFinalizer=function(handle2){return finalizationGroup.register(handle2,handle2.$$,handle2.$$),handle2})(handle))}function ClassHandle_clone(){if(this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var o,clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:(o=this.$$,{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType})}}));return clone.$$.count.value+=1,clone.$$.deleteScheduled=!1,clone}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=void 0,deletionQueue=[];function flushPendingDeletes(){for(;deletionQueue.length;){var obj=deletionQueue.pop();obj.$$.deleteScheduled=!1,obj.delete()}}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),deletionQueue.push(this),1===deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(void 0===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){return proto[methodName].overloadTable.hasOwnProperty(arguments.length)||throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!"),proto[methodName].overloadTable[arguments.length].apply(this,arguments)},proto[methodName].overloadTable=[],proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name2,value,numArguments){Module.hasOwnProperty(name2)?((void 0===numArguments||void 0!==Module[name2].overloadTable&&void 0!==Module[name2].overloadTable[numArguments])&&throwBindingError("Cannot register public name '"+name2+"' twice"),ensureOverloadTable(Module,name2,name2),Module.hasOwnProperty(numArguments)&&throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!"),Module[name2].overloadTable[numArguments]=value):(Module[name2]=value,void 0!==numArguments&&(Module[name2].numArguments=numArguments))}function RegisteredClass(name2,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name2,this.constructor=constructor,this.instancePrototype=instancePrototype,this.rawDestructor=rawDestructor,this.baseClass=baseClass,this.getActualType=getActualType,this.upcast=upcast,this.downcast=downcast,this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){for(;ptrClass!==desiredClass;)ptrClass.upcast||throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name),ptr=ptrClass.upcast(ptr),ptrClass=ptrClass.baseClass;return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function genericPointerToWireType(destructors,handle){var ptr;if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(ptr=this.rawConstructor(),null!==destructors&&destructors.push(this.rawDestructor,ptr),ptr):0;handle.$$||throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&handle.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;if(ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass),this.isSmartPointer)switch(void 0===handle.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this)ptr=handle.$$.smartPtr;else{var clonedHandle=handle.clone();ptr=this.rawShare(ptr,__emval_register((function(){clonedHandle.delete()}))),null!==destructors&&destructors.push(this.rawDestructor,ptr)}break;default:throwBindingError("Unsupporting sharing policy")}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),handle.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function RegisteredPointer_getPointee(ptr){return this.rawGetPointee&&(ptr=this.rawGetPointee(ptr)),ptr}function RegisteredPointer_destructor(ptr){this.rawDestructor&&this.rawDestructor(ptr)}function RegisteredPointer_deleteObject(handle){null!==handle&&handle.delete()}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass)return ptr;if(void 0===desiredClass.baseClass)return null;var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);return null===rv?null:desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances)registeredInstances.hasOwnProperty(k)&&rv.push(registeredInstances[k]);return rv}function setDelayFunction(fn){delayFunction=fn,deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes)}var registeredInstances={};function getInheritedInstance(class_,ptr){return ptr=function(class_,ptr){for(void 0===ptr&&throwBindingError("ptr should not be undefined");class_.baseClass;)ptr=class_.upcast(ptr),class_=class_.baseClass;return ptr}(class_,ptr),registeredInstances[ptr]}function makeClassHandle(prototype,record){return record.ptrType&&record.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!record.smartPtrType!=!!record.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),record.count={value:1},attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer)return this.destructor(ptr),null;var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(void 0!==registeredInstance){if(0===registeredInstance.$$.count.value)return registeredInstance.$$.ptr=rawPointer,registeredInstance.$$.smartPtr=ptr,registeredInstance.clone();var rv=registeredInstance.clone();return this.destructor(ptr),rv}function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr})}var toType,actualType=this.registeredClass.getActualType(rawPointer),registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord)return makeDefaultHandle.call(this);toType=this.isConst?registeredPointerRecord.constPointerType:registeredPointerRecord.pointerType;var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);return null===dp?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr}):makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}function RegisteredPointer(name2,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name2,this.registeredClass=registeredClass,this.isReference=isReference,this.isConst=isConst,this.isSmartPointer=isSmartPointer,this.pointeeType=pointeeType,this.sharingPolicy=sharingPolicy,this.rawGetPointee=rawGetPointee,this.rawConstructor=rawConstructor,this.rawShare=rawShare,this.rawDestructor=rawDestructor,isSmartPointer||void 0!==registeredClass.baseClass?this.toWireType=genericPointerToWireType:isConst?(this.toWireType=constNoSmartPtrRawPointerToWireType,this.destructorFunction=null):(this.toWireType=nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function replacePublicSymbol(name2,value,numArguments){Module.hasOwnProperty(name2)||throwInternalError("Replacing nonexistant public symbol"),void 0!==Module[name2].overloadTable&&void 0!==numArguments?Module[name2].overloadTable[numArguments]=value:(Module[name2]=value,Module[name2].argCount=numArguments)}function dynCall(sig,ptr,args){return sig.includes("j")?function(sig,ptr,args){var f=Module["dynCall_"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}(sig,ptr,args):wasmTable.get(ptr).apply(null,args)}function embind__requireFunction(signature,rawFunction){var sig,ptr,argCache,fp=(signature=readLatin1String(signature)).includes("j")?(sig=signature,ptr=rawFunction,argCache=[],function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++)argCache[i]=arguments[i];return dynCall(sig,ptr,argCache)}):wasmTable.get(rawFunction);return"function"!=typeof fp&&throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction),fp}var UnboundTypeError=void 0;function getTypeName(type){var ptr=___getTypeName(type),rv=readLatin1String(ptr);return _free(ptr),rv}function throwUnboundTypeError(message,types){var unboundTypes=[],seen={};throw types.forEach((function visit(type){seen[type]||registeredTypes[type]||(typeDependencies[type]?typeDependencies[type].forEach(visit):(unboundTypes.push(type),seen[type]=!0))})),new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function heap32VectorToArray(count,firstElement){for(var array=[],i=0;i<count;i++)array.push(GROWABLE_HEAP_I32()[(firstElement>>2)+i>>>0]);return array}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;argCount<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var isClassMethodFunc=null!==argTypes[1]&&null!==classType,needsDestructorStack=!1,i=1;i<argTypes.length;++i)if(null!==argTypes[i]&&void 0===argTypes[i].destructorFunction){needsDestructorStack=!0;break}var returns="void"!==argTypes[0].name,argsList="",argsListWired="";for(i=0;i<argCount-2;++i)argsList+=(0!==i?", ":"")+"arg"+i,argsListWired+=(0!==i?", ":"")+"arg"+i+"Wired";var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\nif (arguments.length !== "+(argCount-2)+") {\nthrowBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n}\n";needsDestructorStack&&(invokerFnBody+="var destructors = [];\n");var dtorStack=needsDestructorStack?"destructors":"null",args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];for(isClassMethodFunc&&(invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"),i=0;i<argCount-2;++i)invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n",args1.push("argType"+i),args2.push(argTypes[i+2]);if(isClassMethodFunc&&(argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired),invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n",needsDestructorStack)invokerFnBody+="runDestructors(destructors);\n";else for(i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=1===i?"thisWired":"arg"+(i-2)+"Wired";null!==argTypes[i].destructorFunction&&(invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n",args1.push(paramName+"_dtor"),args2.push(argTypes[i].destructorFunction))}return returns&&(invokerFnBody+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),invokerFnBody+="}\n",args1.push(invokerFnBody),function(constructor,argumentList){if(!(constructor instanceof Function))throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function");var dummy=createNamedFunction(constructor.name||"unknownFunctionName",(function(){}));dummy.prototype=constructor.prototype;var obj=new dummy,r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}(Function,args1).apply(null,args2)}var emval_free_list=[],emval_handle_array=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function __emval_decref(handle){handle>4&&0==--emval_handle_array[handle].refcount&&(emval_handle_array[handle]=void 0,emval_free_list.push(handle))}function count_emval_handles(){for(var count=0,i=5;i<emval_handle_array.length;++i)void 0!==emval_handle_array[i]&&++count;return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i)if(void 0!==emval_handle_array[i])return emval_handle_array[i];return null}function __emval_register(value){switch(value){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;return emval_handle_array[handle]={refcount:1,value},handle}}function enumReadValueFromPointer(name2,shift,signed){switch(shift){case 0:return function(pointer){var heap=signed?GROWABLE_HEAP_I8():GROWABLE_HEAP_U8();return this.fromWireType(heap[pointer>>>0])};case 1:return function(pointer){var heap=signed?GROWABLE_HEAP_I16():GROWABLE_HEAP_U16();return this.fromWireType(heap[pointer>>>1])};case 2:return function(pointer){var heap=signed?GROWABLE_HEAP_I32():GROWABLE_HEAP_U32();return this.fromWireType(heap[pointer>>>2])};default:throw new TypeError("Unknown integer type: "+name2)}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];return void 0===impl&&throwBindingError(humanName+" has unknown type "+getTypeName(rawType)),impl}function _embind_repr(v){if(null===v)return"null";var t=typeof v;return"object"===t||"array"===t||"function"===t?v.toString():""+v}function floatReadValueFromPointer(name2,shift){switch(shift){case 2:return function(pointer){return this.fromWireType((wasmMemory.buffer!=buffer&&updateGlobalBufferAndViews(wasmMemory.buffer),HEAPF32)[pointer>>>2])};case 3:return function(pointer){return this.fromWireType(GROWABLE_HEAP_F64()[pointer>>>3])};default:throw new TypeError("Unknown float type: "+name2)}}function integerReadValueFromPointer(name2,shift,signed){switch(shift){case 0:return signed?function(pointer){return GROWABLE_HEAP_I8()[pointer>>>0]}:function(pointer){return GROWABLE_HEAP_U8()[pointer>>>0]};case 1:return signed?function(pointer){return GROWABLE_HEAP_I16()[pointer>>>1]}:function(pointer){return GROWABLE_HEAP_U16()[pointer>>>1]};case 2:return signed?function(pointer){return GROWABLE_HEAP_I32()[pointer>>>2]}:function(pointer){return GROWABLE_HEAP_U32()[pointer>>>2]};default:throw new TypeError("Unknown integer type: "+name2)}}function requireHandle(handle){return handle||throwBindingError("Cannot use deleted val. handle = "+handle),emval_handle_array[handle].value}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];return void 0===symbol?readLatin1String(address):symbol}function emval_get_global(){return"object"==typeof globalThis?globalThis:Function("return this")()}var readAsmConstArgsArray=[];function _emscripten_proxy_to_main_thread_js(index,sync){for(var numCallArgs=arguments.length-2,stack=stackSave(),serializedNumCallArgs=numCallArgs,args=stackAlloc(8*serializedNumCallArgs),b=args>>3,i=0;i<numCallArgs;i++){var arg=arguments[2+i];GROWABLE_HEAP_F64()[b+i>>>0]=arg}var ret=_emscripten_run_in_main_runtime_thread_js(index,serializedNumCallArgs,args,sync);return stackRestore(stack),ret}var _emscripten_receive_on_main_thread_js_callArgs=[];function emscripten_realloc_buffer(size){try{return wasmMemory.grow(size-buffer.byteLength+65535>>>16),updateGlobalBufferAndViews(wasmMemory.buffer),1}catch(e){}}var JSEvents={inEventHandler:0,removeAllEventListeners:function(){for(var i=JSEvents.eventHandlers.length-1;i>=0;--i)JSEvents._removeHandler(i);JSEvents.eventHandlers=[],JSEvents.deferredCalls=[]},registerRemoveEventListeners:function(){JSEvents.removeEventListenersRegistered||(__ATEXIT__.push(JSEvents.removeAllEventListeners),JSEvents.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(targetFunction,precedence,argsList){function arraysHaveEqualContent(arrA,arrB){if(arrA.length!=arrB.length)return!1;for(var i2 in arrA)if(arrA[i2]!=arrB[i2])return!1;return!0}for(var i in JSEvents.deferredCalls){var call=JSEvents.deferredCalls[i];if(call.targetFunction==targetFunction&&arraysHaveEqualContent(call.argsList,argsList))return}JSEvents.deferredCalls.push({targetFunction,precedence,argsList}),JSEvents.deferredCalls.sort((function(x,y){return x.precedence<y.precedence}))},removeDeferredCalls:function(targetFunction){for(var i=0;i<JSEvents.deferredCalls.length;++i)JSEvents.deferredCalls[i].targetFunction==targetFunction&&(JSEvents.deferredCalls.splice(i,1),--i)},canPerformEventHandlerRequests:function(){return JSEvents.inEventHandler&&JSEvents.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(JSEvents.canPerformEventHandlerRequests())for(var i=0;i<JSEvents.deferredCalls.length;++i){var call=JSEvents.deferredCalls[i];JSEvents.deferredCalls.splice(i,1),--i,call.targetFunction.apply(null,call.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(target,eventTypeString){for(var i=0;i<JSEvents.eventHandlers.length;++i)JSEvents.eventHandlers[i].target!=target||eventTypeString&&eventTypeString!=JSEvents.eventHandlers[i].eventTypeString||JSEvents._removeHandler(i--)},_removeHandler:function(i){var h=JSEvents.eventHandlers[i];h.target.removeEventListener(h.eventTypeString,h.eventListenerFunc,h.useCapture),JSEvents.eventHandlers.splice(i,1)},registerOrRemoveHandler:function(eventHandler){var jsEventHandler=function(event){++JSEvents.inEventHandler,JSEvents.currentEventHandler=eventHandler,JSEvents.runDeferredCalls(),eventHandler.handlerFunc(event),JSEvents.runDeferredCalls(),--JSEvents.inEventHandler};if(eventHandler.callbackfunc)eventHandler.eventListenerFunc=jsEventHandler,eventHandler.target.addEventListener(eventHandler.eventTypeString,jsEventHandler,eventHandler.useCapture),JSEvents.eventHandlers.push(eventHandler),JSEvents.registerRemoveEventListeners();else for(var i=0;i<JSEvents.eventHandlers.length;++i)JSEvents.eventHandlers[i].target==eventHandler.target&&JSEvents.eventHandlers[i].eventTypeString==eventHandler.eventTypeString&&JSEvents._removeHandler(i--)},queueEventHandlerOnThread_iiii:function(targetThread,eventHandlerFunc,eventTypeId,eventData,userData){var stackTop=stackSave(),varargs=stackAlloc(12);GROWABLE_HEAP_I32()[varargs>>>2]=eventTypeId,GROWABLE_HEAP_I32()[varargs+4>>>2]=eventData,GROWABLE_HEAP_I32()[varargs+8>>>2]=userData,__emscripten_call_on_thread(0,targetThread,637534208,eventHandlerFunc,eventData,varargs),stackRestore(stackTop)},getTargetThreadForEventCallback:function(targetThread){switch(targetThread){case 1:return 0;case 2:return PThread.currentProxiedOperationCallerThread;default:return targetThread}},getNodeNameForTarget:function(target){return target?target==window?"#window":target==screen?"#screen":target&&target.nodeName?target.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};function _emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread,targetCanvas,width,height){var jsString,length,cString,stackTop=stackSave(),varargs=stackAlloc(12),targetCanvasPtr=0;targetCanvas&&(length=lengthBytesUTF8(jsString=targetCanvas)+1,cString=_malloc(length),stringToUTF8(jsString,cString,length),targetCanvasPtr=cString),GROWABLE_HEAP_I32()[varargs>>>2]=targetCanvasPtr,GROWABLE_HEAP_I32()[varargs+4>>>2]=width,GROWABLE_HEAP_I32()[varargs+8>>>2]=height,__emscripten_call_on_thread(0,targetThread,657457152,0,targetCanvasPtr,varargs),stackRestore(stackTop)}var specialHTMLTargets=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function findEventTarget(target){var cString;return target=(cString=target)>2?UTF8ToString(cString):cString,specialHTMLTargets[target]||("undefined"!=typeof document?document.querySelector(target):void 0)}function findCanvasEventTarget(target){return findEventTarget(target)}function _emscripten_set_canvas_element_size_calling_thread(target,width,height){var canvas=findCanvasEventTarget(target);if(!canvas)return-4;if(canvas.canvasSharedPtr&&(GROWABLE_HEAP_I32()[canvas.canvasSharedPtr>>>2]=width,GROWABLE_HEAP_I32()[canvas.canvasSharedPtr+4>>>2]=height),!canvas.offscreenCanvas&&canvas.controlTransferredOffscreen)return canvas.canvasSharedPtr?(function(targetThread,targetCanvas,width,height){_emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread,targetCanvas=targetCanvas?UTF8ToString(targetCanvas):"",width,height)}(GROWABLE_HEAP_I32()[canvas.canvasSharedPtr+8>>>2],target,width,height),1):-4;canvas.offscreenCanvas&&(canvas=canvas.offscreenCanvas);var autoResizeViewport=!1;if(canvas.GLctxObject&&canvas.GLctxObject.GLctx){var prevViewport=canvas.GLctxObject.GLctx.getParameter(2978);autoResizeViewport=0===prevViewport[0]&&0===prevViewport[1]&&prevViewport[2]===canvas.width&&prevViewport[3]===canvas.height}return canvas.width=width,canvas.height=height,autoResizeViewport&&canvas.GLctxObject.GLctx.viewport(0,0,width,height),0}function _emscripten_set_canvas_element_size_main_thread(target,width,height){return ENVIRONMENT_IS_PTHREAD?_emscripten_proxy_to_main_thread_js(5,1,target,width,height):_emscripten_set_canvas_element_size_calling_thread(target,width,height)}var GL={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(errorCode){GL.lastError||(GL.lastError=errorCode)},getNewId:function(table){for(var ret=GL.counter++,i=table.length;i<ret;i++)table[i]=null;return ret},getSource:function(shader,count,string,length){for(var source="",i=0;i<count;++i){var len=length?GROWABLE_HEAP_I32()[length+4*i>>>2]:-1;source+=UTF8ToString(GROWABLE_HEAP_I32()[string+4*i>>>2],len<0?void 0:len)}return source},createContext:function(canvas,webGLContextAttributes){canvas.getContextSafariWebGL2Fixed||(canvas.getContextSafariWebGL2Fixed=canvas.getContext,canvas.getContext=function(ver,attrs){var gl=canvas.getContextSafariWebGL2Fixed(ver,attrs);return"webgl"==ver==gl instanceof WebGLRenderingContext?gl:null});var ctx=canvas.getContext("webgl",webGLContextAttributes);return ctx?GL.registerContext(ctx,webGLContextAttributes):0},registerContext:function(ctx,webGLContextAttributes){var handle=_malloc(8);GROWABLE_HEAP_I32()[handle+4>>>2]=_pthread_self();var context={handle,attributes:webGLContextAttributes,version:webGLContextAttributes.majorVersion,GLctx:ctx};return ctx.canvas&&(ctx.canvas.GLctxObject=context),GL.contexts[handle]=context,(void 0===webGLContextAttributes.enableExtensionsByDefault||webGLContextAttributes.enableExtensionsByDefault)&&GL.initExtensions(context),handle},makeContextCurrent:function(contextHandle){return GL.currentContext=GL.contexts[contextHandle],Module.ctx=GLctx=GL.currentContext&&GL.currentContext.GLctx,!(contextHandle&&!GLctx)},getContext:function(contextHandle){return GL.contexts[contextHandle]},deleteContext:function(contextHandle){GL.currentContext===GL.contexts[contextHandle]&&(GL.currentContext=null),"object"==typeof JSEvents&&JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas),GL.contexts[contextHandle]&&GL.contexts[contextHandle].GLctx.canvas&&(GL.contexts[contextHandle].GLctx.canvas.GLctxObject=void 0),_free(GL.contexts[contextHandle].handle),GL.contexts[contextHandle]=null},initExtensions:function(context){if(context||(context=GL.currentContext),!context.initExtensionsDone){context.initExtensionsDone=!0;var ctx,GLctx2=context.GLctx;!function(ctx){var ext=ctx.getExtension("ANGLE_instanced_arrays");ext&&(ctx.vertexAttribDivisor=function(index,divisor){ext.vertexAttribDivisorANGLE(index,divisor)},ctx.drawArraysInstanced=function(mode,first,count,primcount){ext.drawArraysInstancedANGLE(mode,first,count,primcount)},ctx.drawElementsInstanced=function(mode,count,type,indices,primcount){ext.drawElementsInstancedANGLE(mode,count,type,indices,primcount)})}(GLctx2),function(ctx){var ext=ctx.getExtension("OES_vertex_array_object");ext&&(ctx.createVertexArray=function(){return ext.createVertexArrayOES()},ctx.deleteVertexArray=function(vao){ext.deleteVertexArrayOES(vao)},ctx.bindVertexArray=function(vao){ext.bindVertexArrayOES(vao)},ctx.isVertexArray=function(vao){return ext.isVertexArrayOES(vao)})}(GLctx2),function(ctx){var ext=ctx.getExtension("WEBGL_draw_buffers");ext&&(ctx.drawBuffers=function(n,bufs){ext.drawBuffersWEBGL(n,bufs)})}(GLctx2),GLctx2.disjointTimerQueryExt=GLctx2.getExtension("EXT_disjoint_timer_query"),(ctx=GLctx2).multiDrawWebgl=ctx.getExtension("WEBGL_multi_draw"),(GLctx2.getSupportedExtensions()||[]).forEach((function(ext){ext.includes("lose_context")||ext.includes("debug")||GLctx2.getExtension(ext)}))}}},__emscripten_webgl_power_preferences=["default","low-power","high-performance"],ENV={};function getEnvStrings(){if(!getEnvStrings.strings){var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:thisProgram||"./this.program"};for(var x in ENV)void 0===ENV[x]?delete env[x]:env[x]=ENV[x];var strings=[];for(var x in env)strings.push(x+"="+env[x]);getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(6,1,__environ,environ_buf);try{var bufSize=0;return getEnvStrings().forEach((function(string,i){var ptr=environ_buf+bufSize;GROWABLE_HEAP_I32()[__environ+4*i>>>2]=ptr,function(str,buffer2,dontAddNull){for(var i=0;i<str.length;++i)GROWABLE_HEAP_I8()[buffer2++>>>0]=str.charCodeAt(i);dontAddNull||(GROWABLE_HEAP_I8()[buffer2>>>0]=0)}(string,ptr),bufSize+=string.length+1})),0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _environ_sizes_get(penviron_count,penviron_buf_size){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(7,1,penviron_count,penviron_buf_size);try{var strings=getEnvStrings();GROWABLE_HEAP_I32()[penviron_count>>>2]=strings.length;var bufSize=0;return strings.forEach((function(string){bufSize+=string.length+1})),GROWABLE_HEAP_I32()[penviron_buf_size>>>2]=bufSize,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_close(fd){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(8,1,fd);try{var stream=SYSCALLS.getStreamFromFD(fd);return FS.close(stream),0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_read(fd,iov,iovcnt,pnum){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(9,1,fd,iov,iovcnt,pnum);try{var stream=SYSCALLS.getStreamFromFD(fd),num=SYSCALLS.doReadv(stream,iov,iovcnt);return GROWABLE_HEAP_I32()[pnum>>>2]=num,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(10,1,fd,offset_low,offset_high,whence,newOffset);try{var stream=SYSCALLS.getStreamFromFD(fd),offset=4294967296*offset_high+(offset_low>>>0);return offset<=-9007199254740992||offset>=9007199254740992?-61:(FS.llseek(stream,offset,whence),tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[newOffset>>>2]=tempI64[0],GROWABLE_HEAP_I32()[newOffset+4>>>2]=tempI64[1],stream.getdents&&0===offset&&0===whence&&(stream.getdents=null),0)}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_write(fd,iov,iovcnt,pnum){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(11,1,fd,iov,iovcnt,pnum);try{var stream=SYSCALLS.getStreamFromFD(fd),num=SYSCALLS.doWritev(stream,iov,iovcnt);return GROWABLE_HEAP_I32()[pnum>>>2]=num,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function spawnThread(threadParams){if(ENVIRONMENT_IS_PTHREAD)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var worker=PThread.getNewWorker();if(!worker)return 6;if(void 0!==worker.pthread)throw"Internal error!";if(!threadParams.pthread_ptr)throw"Internal error, no pthread ptr!";PThread.runningWorkers.push(worker);for(var tlsMemory=_malloc(512),i=0;i<128;++i)GROWABLE_HEAP_I32()[tlsMemory+4*i>>>2]=0;var stackHigh=threadParams.stackBase+threadParams.stackSize,pthread=PThread.pthreads[threadParams.pthread_ptr]={worker,stackBase:threadParams.stackBase,stackSize:threadParams.stackSize,allocatedOwnStack:threadParams.allocatedOwnStack,threadInfoStruct:threadParams.pthread_ptr},tis=pthread.threadInfoStruct>>2;Atomics.store(GROWABLE_HEAP_U32(),tis+16,threadParams.detached),Atomics.store(GROWABLE_HEAP_U32(),tis+25,tlsMemory),Atomics.store(GROWABLE_HEAP_U32(),tis+10,pthread.threadInfoStruct),Atomics.store(GROWABLE_HEAP_U32(),tis+20,threadParams.stackSize),Atomics.store(GROWABLE_HEAP_U32(),tis+19,stackHigh),Atomics.store(GROWABLE_HEAP_U32(),tis+26,threadParams.stackSize),Atomics.store(GROWABLE_HEAP_U32(),tis+28,stackHigh),Atomics.store(GROWABLE_HEAP_U32(),tis+29,threadParams.detached);var global_locale=_emscripten_get_global_libc()+40;Atomics.store(GROWABLE_HEAP_U32(),tis+43,global_locale),worker.pthread=pthread;var msg={cmd:"run",start_routine:threadParams.startRoutine,arg:threadParams.arg,threadInfoStruct:threadParams.pthread_ptr,stackBase:threadParams.stackBase,stackSize:threadParams.stackSize};return worker.runPthread=function(){msg.time=performance.now(),worker.postMessage(msg,threadParams.transferList)},worker.loaded&&(worker.runPthread(),delete worker.runPthread),0}function __isLeapYear(year){return year%4==0&&(year%100!=0||year%400==0)}function __arraySum(array,index){for(var sum=0,i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31],__MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){for(var newDate=new Date(date.getTime());days>0;){var leap=__isLeapYear(newDate.getFullYear()),currentMonth=newDate.getMonth(),daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(!(days>daysInCurrentMonth-newDate.getDate()))return newDate.setDate(newDate.getDate()+days),newDate;days-=daysInCurrentMonth-newDate.getDate()+1,newDate.setDate(1),currentMonth<11?newDate.setMonth(currentMonth+1):(newDate.setMonth(0),newDate.setFullYear(newDate.getFullYear()+1))}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=GROWABLE_HEAP_I32()[tm+40>>>2],date={tm_sec:GROWABLE_HEAP_I32()[tm>>>2],tm_min:GROWABLE_HEAP_I32()[tm+4>>>2],tm_hour:GROWABLE_HEAP_I32()[tm+8>>>2],tm_mday:GROWABLE_HEAP_I32()[tm+12>>>2],tm_mon:GROWABLE_HEAP_I32()[tm+16>>>2],tm_year:GROWABLE_HEAP_I32()[tm+20>>>2],tm_wday:GROWABLE_HEAP_I32()[tm+24>>>2],tm_yday:GROWABLE_HEAP_I32()[tm+28>>>2],tm_isdst:GROWABLE_HEAP_I32()[tm+32>>>2],tm_gmtoff:GROWABLE_HEAP_I32()[tm+36>>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""},pattern=UTF8ToString(format),EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1)pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){for(var str="number"==typeof value?value.toString():value||"";str.length<digits;)str=character[0]+str;return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;return 0===(compare=sgn(date1.getFullYear()-date2.getFullYear()))&&0===(compare=sgn(date1.getMonth()-date2.getMonth()))&&(compare=sgn(date1.getDate()-date2.getDate())),compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date2){var thisDate=__addDays(new Date(date2.tm_year+1900,0,1),date2.tm_yday),janFourthThisYear=new Date(thisDate.getFullYear(),0,4),janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4),firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear),firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);return compareByDay(firstWeekStartThisYear,thisDate)<=0?compareByDay(firstWeekStartNextYear,thisDate)<=0?thisDate.getFullYear()+1:thisDate.getFullYear():thisDate.getFullYear()-1}var EXPANSION_RULES_2={"%a":function(date2){return WEEKDAYS[date2.tm_wday].substring(0,3)},"%A":function(date2){return WEEKDAYS[date2.tm_wday]},"%b":function(date2){return MONTHS[date2.tm_mon].substring(0,3)},"%B":function(date2){return MONTHS[date2.tm_mon]},"%C":function(date2){return leadingNulls((date2.tm_year+1900)/100|0,2)},"%d":function(date2){return leadingNulls(date2.tm_mday,2)},"%e":function(date2){return leadingSomething(date2.tm_mday,2," ")},"%g":function(date2){return getWeekBasedYear(date2).toString().substring(2)},"%G":function(date2){return getWeekBasedYear(date2)},"%H":function(date2){return leadingNulls(date2.tm_hour,2)},"%I":function(date2){var twelveHour=date2.tm_hour;return 0==twelveHour?twelveHour=12:twelveHour>12&&(twelveHour-=12),leadingNulls(twelveHour,2)},"%j":function(date2){return leadingNulls(date2.tm_mday+__arraySum(__isLeapYear(date2.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date2.tm_mon-1),3)},"%m":function(date2){return leadingNulls(date2.tm_mon+1,2)},"%M":function(date2){return leadingNulls(date2.tm_min,2)},"%n":function(){return"\n"},"%p":function(date2){return date2.tm_hour>=0&&date2.tm_hour<12?"AM":"PM"},"%S":function(date2){return leadingNulls(date2.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date2){return date2.tm_wday||7},"%U":function(date2){var janFirst=new Date(date2.tm_year+1900,0,1),firstSunday=0===janFirst.getDay()?janFirst:__addDays(janFirst,7-janFirst.getDay()),endDate=new Date(date2.tm_year+1900,date2.tm_mon,date2.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31,days=31-firstSunday.getDate()+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return 0===compareByDay(firstSunday,janFirst)?"01":"00"},"%V":function(date2){var daysDifference,janFourthThisYear=new Date(date2.tm_year+1900,0,4),janFourthNextYear=new Date(date2.tm_year+1901,0,4),firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear),firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear),endDate=__addDays(new Date(date2.tm_year+1900,0,1),date2.tm_yday);return compareByDay(endDate,firstWeekStartThisYear)<0?"53":compareByDay(firstWeekStartNextYear,endDate)<=0?"01":(daysDifference=firstWeekStartThisYear.getFullYear()<date2.tm_year+1900?date2.tm_yday+32-firstWeekStartThisYear.getDate():date2.tm_yday+1-firstWeekStartThisYear.getDate(),leadingNulls(Math.ceil(daysDifference/7),2))},"%w":function(date2){return date2.tm_wday},"%W":function(date2){var janFirst=new Date(date2.tm_year,0,1),firstMonday=1===janFirst.getDay()?janFirst:__addDays(janFirst,0===janFirst.getDay()?1:7-janFirst.getDay()+1),endDate=new Date(date2.tm_year+1900,date2.tm_mon,date2.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31,days=31-firstMonday.getDate()+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return 0===compareByDay(firstMonday,janFirst)?"01":"00"},"%y":function(date2){return(date2.tm_year+1900).toString().substring(2)},"%Y":function(date2){return date2.tm_year+1900},"%z":function(date2){var off=date2.tm_gmtoff,ahead=off>=0;return off=(off=Math.abs(off)/60)/60*100+off%60,(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date2){return date2.tm_zone},"%%":function(){return"%"}};for(var rule in EXPANSION_RULES_2)pattern.includes(rule)&&(pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date)));var array,buffer2,bytes=intArrayFromString(pattern,!1);return bytes.length>maxsize?0:(array=bytes,buffer2=s,GROWABLE_HEAP_I8().set(array,buffer2>>>0),bytes.length-1)}ENVIRONMENT_IS_PTHREAD||PThread.initMainThreadBlock();var GLctx,FSNode=function(parent,name2,mode,rdev){parent||(parent=this),this.parent=parent,this.mount=parent.mount,this.mounted=null,this.id=FS.nextInode++,this.name=name2,this.mode=mode,this.node_ops={},this.stream_ops={},this.rdev=rdev};Object.defineProperties(FSNode.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(val){val?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(val){val?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}}),FS.FSNode=FSNode,FS.staticInit(),Module.FS_createPath=FS.createPath,Module.FS_createDataFile=FS.createDataFile,Module.FS_createPreloadedFile=FS.createPreloadedFile,Module.FS_createLazyFile=FS.createLazyFile,Module.FS_createDevice=FS.createDevice,Module.FS_unlink=FS.unlink,InternalError=Module.InternalError=extendError(Error,"InternalError"),function(){for(var codes=new Array(256),i=0;i<256;++i)codes[i]=String.fromCharCode(i);embind_charCodes=codes}(),BindingError=Module.BindingError=extendError(Error,"BindingError"),ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater,RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType,Module.getInheritedInstanceCount=getInheritedInstanceCount,Module.getLiveInheritedInstances=getLiveInheritedInstances,Module.flushPendingDeletes=flushPendingDeletes,Module.setDelayFunction=setDelayFunction,UnboundTypeError=Module.UnboundTypeError=extendError(Error,"UnboundTypeError"),Module.count_emval_handles=count_emval_handles,Module.get_first_emval=get_first_emval;var proxiedFunctionTable=[null,function(func,arg){if(ENVIRONMENT_IS_PTHREAD)return _emscripten_proxy_to_main_thread_js(1,1,func,arg)},___sys_fcntl64,___sys_ioctl,___sys_open,_emscripten_set_canvas_element_size_main_thread,_environ_get,_environ_sizes_get,_fd_close,_fd_read,_fd_seek,_fd_write];function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1,u8array=new Array(len),numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);return dontAddNull&&(u8array.length=numBytesWritten),u8array}var calledRun,asmLibraryArg={l:function(condition,filename,line,func){abort("Assertion failed: "+UTF8ToString(condition)+", at: "+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])},B:function(size){return _malloc(size+16)+16},ka:function(routine,arg){PThread.threadExitHandlers.push((function(){wasmTable.get(routine)(arg)}))},A:function(ptr,type,destructor){throw new ExceptionInfo(ptr).init(type,destructor),ptr},D:___sys_fcntl64,V:___sys_ioctl,W:___sys_open,ma:function(rawTupleType){var reg=tupleRegistrations[rawTupleType];delete tupleRegistrations[rawTupleType];var elements=reg.elements,elementsLength=elements.length,elementTypes=elements.map((function(elt){return elt.getterReturnType})).concat(elements.map((function(elt){return elt.setterArgumentType}))),rawConstructor=reg.rawConstructor,rawDestructor=reg.rawDestructor;whenDependentTypesAreResolved([rawTupleType],elementTypes,(function(elementTypes2){return elements.forEach((function(elt,i){var getterReturnType=elementTypes2[i],getter=elt.getter,getterContext=elt.getterContext,setterArgumentType=elementTypes2[i+elementsLength],setter=elt.setter,setterContext=elt.setterContext;elt.read=function(ptr){return getterReturnType.fromWireType(getter(getterContext,ptr))},elt.write=function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}})),[{name:reg.name,fromWireType:function(ptr){for(var rv=new Array(elementsLength),i=0;i<elementsLength;++i)rv[i]=elements[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){if(elementsLength!==o.length)throw new TypeError("Incorrect number of tuple elements for "+reg.name+": expected="+elementsLength+", actual="+o.length);for(var ptr=rawConstructor(),i=0;i<elementsLength;++i)elements[i].write(ptr,o[i]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]}))},s:function(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor,rawDestructor=reg.rawDestructor,fieldRecords=reg.fields;whenDependentTypesAreResolved([structType],fieldRecords.map((function(field){return field.getterReturnType})).concat(fieldRecords.map((function(field){return field.setterArgumentType}))),(function(fieldTypes2){var fields={};return fieldRecords.forEach((function(field,i){var fieldName=field.fieldName,getterReturnType=fieldTypes2[i],getter=field.getter,getterContext=field.getterContext,setterArgumentType=fieldTypes2[i+fieldRecords.length],setter=field.setter,setterContext=field.setterContext;fields[fieldName]={read:function(ptr){return getterReturnType.fromWireType(getter(getterContext,ptr))},write:function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}}})),[{name:reg.name,fromWireType:function(ptr){var rv={};for(var i in fields)rv[i]=fields[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){for(var fieldName in fields)if(!(fieldName in o))throw new TypeError('Missing field:  "'+fieldName+'"');var ptr=rawConstructor();for(fieldName in fields)fields[fieldName].write(ptr,o[fieldName]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]}))},O:function(primitiveType,name2,size,minRange,maxRange){},ia:function(rawType,name2,size,trueValue,falseValue){var shift=getShiftFromSize(size);registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:8,readValueFromPointer:function(pointer){var heap;if(1===size)heap=GROWABLE_HEAP_I8();else if(2===size)heap=GROWABLE_HEAP_I16();else{if(4!==size)throw new TypeError("Unknown boolean type size: "+name2);heap=GROWABLE_HEAP_I32()}return this.fromWireType(heap[pointer>>>shift])},destructorFunction:null})},v:function(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name2,destructorSignature,rawDestructor){name2=readLatin1String(name2),getActualType=embind__requireFunction(getActualTypeSignature,getActualType),upcast&&(upcast=embind__requireFunction(upcastSignature,upcast)),downcast&&(downcast=embind__requireFunction(downcastSignature,downcast)),rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name2);exposePublicSymbol(legalFunctionName,(function(){throwUnboundTypeError("Cannot construct "+name2+" due to unbound types",[baseClassRawType])})),whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],(function(base){var baseClass,basePrototype;base=base[0],basePrototype=baseClassRawType?(baseClass=base.registeredClass).instancePrototype:ClassHandle.prototype;var constructor=createNamedFunction(legalFunctionName,(function(){if(Object.getPrototypeOf(this)!==instancePrototype)throw new BindingError("Use 'new' to construct "+name2);if(void 0===registeredClass.constructor_body)throw new BindingError(name2+" has no accessible constructor");var body=registeredClass.constructor_body[arguments.length];if(void 0===body)throw new BindingError("Tried to invoke ctor of "+name2+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!");return body.apply(this,arguments)})),instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name2,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast),referenceConverter=new RegisteredPointer(name2,registeredClass,!0,!1,!1),pointerConverter=new RegisteredPointer(name2+"*",registeredClass,!1,!1,!1),constPointerConverter=new RegisteredPointer(name2+" const*",registeredClass,!1,!0,!1);return registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter},replacePublicSymbol(legalFunctionName,constructor),[referenceConverter,pointerConverter,constPointerConverter]}))},u:function(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);var args=[rawConstructor],destructors=[];whenDependentTypesAreResolved([],[rawClassType],(function(classType){var humanName="constructor "+(classType=classType[0]).name;if(void 0===classType.registeredClass.constructor_body&&(classType.registeredClass.constructor_body=[]),void 0!==classType.registeredClass.constructor_body[argCount-1])throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return classType.registeredClass.constructor_body[argCount-1]=function(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)},whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){return classType.registeredClass.constructor_body[argCount-1]=function(){arguments.length!==argCount-1&&throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1)),destructors.length=0,args.length=argCount;for(var i=1;i<argCount;++i)args[i]=argTypes[i].toWireType(destructors,arguments[i-1]);var ptr=invoker.apply(null,args);return runDestructors(destructors),argTypes[0].fromWireType(ptr)},[]})),[]}))},c:function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName),rawInvoker=embind__requireFunction(invokerSignature,rawInvoker),whenDependentTypesAreResolved([],[rawClassType],(function(classType){var humanName=(classType=classType[0]).name+"."+methodName;function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}methodName.startsWith("@@")&&(methodName=Symbol[methodName.substring(2)]),isPureVirtual&&classType.registeredClass.pureVirtualFunctions.push(methodName);var proto=classType.registeredClass.instancePrototype,method=proto[methodName];return void 0===method||void 0===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2?(unboundTypesHandler.argCount=argCount-2,unboundTypesHandler.className=classType.name,proto[methodName]=unboundTypesHandler):(ensureOverloadTable(proto,methodName,humanName),proto[methodName].overloadTable[argCount-2]=unboundTypesHandler),whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);return void 0===proto[methodName].overloadTable?(memberFunction.argCount=argCount-2,proto[methodName]=memberFunction):proto[methodName].overloadTable[argCount-2]=memberFunction,[]})),[]}))},ha:function(rawType,name2){registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:function(handle){var rv=emval_handle_array[handle].value;return __emval_decref(handle),rv},toWireType:function(destructors,value){return __emval_register(value)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})},la:function(rawType,name2,size,isSigned){var shift=getShiftFromSize(size);function ctor(){}name2=readLatin1String(name2),ctor.values={},registerType(rawType,{name:name2,constructor:ctor,fromWireType:function(c){return this.constructor.values[c]},toWireType:function(destructors,c){return c.value},argPackAdvance:8,readValueFromPointer:enumReadValueFromPointer(name2,shift,isSigned),destructorFunction:null}),exposePublicSymbol(name2,ctor)},y:function(rawEnumType,name2,enumValue){var enumType=requireRegisteredType(rawEnumType,"enum");name2=readLatin1String(name2);var Enum=enumType.constructor,Value2=Object.create(enumType.constructor.prototype,{value:{value:enumValue},constructor:{value:createNamedFunction(enumType.name+"_"+name2,(function(){}))}});Enum.values[enumValue]=Value2,Enum[name2]=Value2},J:function(rawType,name2,size){var shift=getShiftFromSize(size);registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:function(value){return value},toWireType:function(destructors,value){if("number"!=typeof value&&"boolean"!=typeof value)throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name);return value},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(name2,shift),destructorFunction:null})},f:function(name2,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name2=readLatin1String(name2),rawInvoker=embind__requireFunction(signature,rawInvoker),exposePublicSymbol(name2,(function(){throwUnboundTypeError("Cannot call "+name2+" due to unbound types",argTypes)}),argCount-1),whenDependentTypesAreResolved([],argTypes,(function(argTypes2){var invokerArgsArray=[argTypes2[0],null].concat(argTypes2.slice(1));return replacePublicSymbol(name2,craftInvokerFunction(name2,invokerArgsArray,null,rawInvoker,fn),argCount-1),[]}))},p:function(primitiveType,name2,size,minRange,maxRange){name2=readLatin1String(name2),-1===maxRange&&(maxRange=4294967295);var shift=getShiftFromSize(size),fromWireType=function(value){return value};if(0===minRange){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name2.includes("unsigned");registerType(primitiveType,{name:name2,fromWireType,toWireType:function(destructors,value){if("number"!=typeof value&&"boolean"!=typeof value)throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name);if(value<minRange||value>maxRange)throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name2+'", which is outside the valid range ['+minRange+", "+maxRange+"]!");return isUnsignedType?value>>>0:0|value},argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(name2,shift,0!==minRange),destructorFunction:null})},k:function(rawType,dataTypeIndex,name2){var TA=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][dataTypeIndex];function decodeMemoryView(handle){handle>>=2;var heap=GROWABLE_HEAP_U32(),size=heap[handle>>>0],data=heap[handle+1>>>0];return new TA(buffer,data,size)}registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})},K:function(rawType,name2){var stdStringIsUTF8="std::string"===(name2=readLatin1String(name2));registerType(rawType,{name:name2,fromWireType:function(value){var str,length=GROWABLE_HEAP_U32()[value>>>2];if(stdStringIsUTF8)for(var decodeStartPtr=value+4,i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||0==GROWABLE_HEAP_U8()[currentBytePtr>>>0]){var stringSegment=UTF8ToString(decodeStartPtr,currentBytePtr-decodeStartPtr);void 0===str?str=stringSegment:(str+=String.fromCharCode(0),str+=stringSegment),decodeStartPtr=currentBytePtr+1}}else{var a=new Array(length);for(i=0;i<length;++i)a[i]=String.fromCharCode(GROWABLE_HEAP_U8()[value+4+i>>>0]);str=a.join("")}return _free(value),str},toWireType:function(destructors,value){value instanceof ArrayBuffer&&(value=new Uint8Array(value));var valueIsOfTypeString="string"==typeof value;valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string");var length=(stdStringIsUTF8&&valueIsOfTypeString?function(){return lengthBytesUTF8(value)}:function(){return value.length})(),ptr=_malloc(4+length+1);if(ptr>>>=0,GROWABLE_HEAP_U32()[ptr>>>2]=length,stdStringIsUTF8&&valueIsOfTypeString)stringToUTF8(value,ptr+4,length+1);else if(valueIsOfTypeString)for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);charCode>255&&(_free(ptr),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),GROWABLE_HEAP_U8()[ptr+4+i>>>0]=charCode}else for(i=0;i<length;++i)GROWABLE_HEAP_U8()[ptr+4+i>>>0]=value[i];return null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})},z:function(rawType,charSize,name2){var decodeString,encodeString,getHeap,lengthBytesUTF,shift;name2=readLatin1String(name2),2===charSize?(decodeString=UTF16ToString,encodeString=stringToUTF16,lengthBytesUTF=lengthBytesUTF16,getHeap=function(){return GROWABLE_HEAP_U16()},shift=1):4===charSize&&(decodeString=UTF32ToString,encodeString=stringToUTF32,lengthBytesUTF=lengthBytesUTF32,getHeap=function(){return GROWABLE_HEAP_U32()},shift=2),registerType(rawType,{name:name2,fromWireType:function(value){for(var str,length=GROWABLE_HEAP_U32()[value>>>2],HEAP=getHeap(),decodeStartPtr=value+4,i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||0==HEAP[currentBytePtr>>>shift]){var stringSegment=decodeString(decodeStartPtr,currentBytePtr-decodeStartPtr);void 0===str?str=stringSegment:(str+=String.fromCharCode(0),str+=stringSegment),decodeStartPtr=currentBytePtr+charSize}}return _free(value),str},toWireType:function(destructors,value){"string"!=typeof value&&throwBindingError("Cannot pass non-string to C++ string type "+name2);var length=lengthBytesUTF(value),ptr=_malloc(4+length+charSize);return ptr>>>=0,GROWABLE_HEAP_U32()[ptr>>>2]=length>>shift,encodeString(value,ptr+4,length+charSize),null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})},na:function(rawType,name2,constructorSignature,rawConstructor,destructorSignature,rawDestructor){tupleRegistrations[rawType]={name:readLatin1String(name2),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),elements:[]}},h:function(rawTupleType,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){tupleRegistrations[rawTupleType].elements.push({getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext,setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext})},t:function(rawType,name2,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name2),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}},e:function(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext,setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext})},ja:function(rawType,name2){registerType(rawType,{isVoid:!0,name:name2=readLatin1String(name2),argPackAdvance:0,fromWireType:function(){},toWireType:function(destructors,o){}})},ea:function(targetThreadId,mainThreadId){if(targetThreadId==mainThreadId)postMessage({cmd:"processQueuedMainThreadWork"});else if(ENVIRONMENT_IS_PTHREAD)postMessage({targetThread:targetThreadId,cmd:"processThreadQueue"});else{var pthread=PThread.pthreads[targetThreadId],worker=pthread&&pthread.worker;if(!worker)return;worker.postMessage({cmd:"processThreadQueue"})}return 1},n:function(handle,returnType,destructorsRef){handle=requireHandle(handle),returnType=requireRegisteredType(returnType,"emval::as");var destructors=[],rd=__emval_register(destructors);return GROWABLE_HEAP_I32()[destructorsRef>>>2]=rd,returnType.toWireType(destructors,handle)},L:function(handle,argCount,argTypes,argv){handle=requireHandle(handle);for(var types=function(argCount,argTypes){for(var a=new Array(argCount),i=0;i<argCount;++i)a[i]=requireRegisteredType(GROWABLE_HEAP_I32()[(argTypes>>2)+i>>>0],"parameter "+i);return a}(argCount,argTypes),args=new Array(argCount),i=0;i<argCount;++i){var type=types[i];args[i]=type.readValueFromPointer(argv),argv+=type.argPackAdvance}return __emval_register(handle.apply(void 0,args))},b:__emval_decref,U:function(name2){return 0===name2?__emval_register(emval_get_global()):(name2=getStringOrSymbol(name2),__emval_register(emval_get_global()[name2]))},o:function(handle,key2){return __emval_register((handle=requireHandle(handle))[key2=requireHandle(key2)])},j:function(handle){handle>4&&(emval_handle_array[handle].refcount+=1)},ca:function(object,constructor){return(object=requireHandle(object))instanceof(constructor=requireHandle(constructor))},M:function(handle){return"number"==typeof(handle=requireHandle(handle))},C:function(){return __emval_register([])},g:function(v){return __emval_register(getStringOrSymbol(v))},w:function(){return __emval_register({})},m:function(handle){runDestructors(emval_handle_array[handle].value),__emval_decref(handle)},i:function(handle,key2,value){handle=requireHandle(handle),key2=requireHandle(key2),value=requireHandle(value),handle[key2]=value},d:function(type,argv){return __emval_register((type=requireRegisteredType(type,"_emval_take_value")).readValueFromPointer(argv))},I:function(){abort()},T:function(clk_id,tp){var now;if(0===clk_id)now=Date.now();else{if(1!==clk_id&&4!==clk_id||!_emscripten_get_now_is_monotonic)return setErrNo(28),-1;now=_emscripten_get_now()}return GROWABLE_HEAP_I32()[tp>>>2]=now/1e3|0,GROWABLE_HEAP_I32()[tp+4>>>2]=now%1e3*1e3*1e3|0,0},G:function(code,sigPtr,argbuf){var args=function(sigPtr,buf){var ch;for(readAsmConstArgsArray.length=0,buf>>=2;ch=GROWABLE_HEAP_U8()[sigPtr++>>>0];){var double=ch<105;double&&1&buf&&buf++,readAsmConstArgsArray.push(double?GROWABLE_HEAP_F64()[buf++>>>1]:GROWABLE_HEAP_I32()[buf>>>0]),++buf}return readAsmConstArgsArray}(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args)},_:function(){ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_WORKER||warnOnce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")},F:function(expectedStatus,newStatus){},r:function(addr,val,timeout){if(addr<=0||addr>GROWABLE_HEAP_I8().length||!0&addr)return-28;if(ENVIRONMENT_IS_WEB){if(Atomics.load(GROWABLE_HEAP_I32(),addr>>2)!=val)return-6;var tNow=performance.now(),tEnd=tNow+timeout;for(Atomics.exchange(GROWABLE_HEAP_I32(),__emscripten_main_thread_futex>>2,addr);;){if((tNow=performance.now())>tEnd)return Atomics.exchange(GROWABLE_HEAP_I32(),__emscripten_main_thread_futex>>2,0),-73;if(0==Atomics.exchange(GROWABLE_HEAP_I32(),__emscripten_main_thread_futex>>2,0))break;if(_emscripten_main_thread_process_queued_calls(),Atomics.load(GROWABLE_HEAP_I32(),addr>>2)!=val)return-6;Atomics.exchange(GROWABLE_HEAP_I32(),__emscripten_main_thread_futex>>2,addr)}return 0}var ret=Atomics.wait(GROWABLE_HEAP_I32(),addr>>2,val,timeout);if("timed-out"===ret)return-73;if("not-equal"===ret)return-6;if("ok"===ret)return 0;throw"Atomics.wait returned an unexpected value "+ret},q:_emscripten_futex_wake,x:_emscripten_get_now,R:function(dest,src,num){GROWABLE_HEAP_U8().copyWithin(dest>>>0,src>>>0,src+num>>>0)},$:function(index,numCallArgs,args){_emscripten_receive_on_main_thread_js_callArgs.length=numCallArgs;for(var b=args>>3,i=0;i<numCallArgs;i++)_emscripten_receive_on_main_thread_js_callArgs[i]=GROWABLE_HEAP_F64()[b+i>>>0];return(index<0?ASM_CONSTS[-index-1]:proxiedFunctionTable[index]).apply(null,_emscripten_receive_on_main_thread_js_callArgs)},S:function(requestedSize){var x,multiple,oldSize=GROWABLE_HEAP_U8().length;if((requestedSize>>>=0)<=oldSize)return!1;if(requestedSize>4294901760)return!1;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);if(overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296),emscripten_realloc_buffer(Math.min(4294901760,((x=Math.max(requestedSize,overGrownHeapSize))%(multiple=65536)>0&&(x+=multiple-x%multiple),x))))return!0}return!1},aa:function(target,width,height){return findCanvasEventTarget(target)?_emscripten_set_canvas_element_size_calling_thread(target,width,height):_emscripten_set_canvas_element_size_main_thread(target,width,height)},E:function(newStatus){},ba:function(a0,a1){return target=a0,a=a1>>2,powerPreference=GROWABLE_HEAP_I32()[a+6>>>0],contextAttributes={alpha:!!GROWABLE_HEAP_I32()[a+0>>>0],depth:!!GROWABLE_HEAP_I32()[a+1>>>0],stencil:!!GROWABLE_HEAP_I32()[a+2>>>0],antialias:!!GROWABLE_HEAP_I32()[a+3>>>0],premultipliedAlpha:!!GROWABLE_HEAP_I32()[a+4>>>0],preserveDrawingBuffer:!!GROWABLE_HEAP_I32()[a+5>>>0],powerPreference:__emscripten_webgl_power_preferences[powerPreference],failIfMajorPerformanceCaveat:!!GROWABLE_HEAP_I32()[a+7>>>0],majorVersion:GROWABLE_HEAP_I32()[a+8>>>0],minorVersion:GROWABLE_HEAP_I32()[a+9>>>0],enableExtensionsByDefault:GROWABLE_HEAP_I32()[a+10>>>0],explicitSwapControl:GROWABLE_HEAP_I32()[a+11>>>0],proxyContextToMainThread:GROWABLE_HEAP_I32()[a+12>>>0],renderViaOffscreenBackBuffer:GROWABLE_HEAP_I32()[a+13>>>0]},(canvas=findCanvasEventTarget(target))?contextAttributes.explicitSwapControl?0:GL.createContext(canvas,contextAttributes):0;var target,a,powerPreference,contextAttributes,canvas},Y:_environ_get,Z:_environ_sizes_get,H:_fd_close,ga:_fd_read,N:_fd_seek,fa:_fd_write,Q:function(){PThread.initRuntime()},a:wasmMemory||Module.wasmMemory,da:function(pthread_ptr,attr,start_routine,arg){if("undefined"==typeof SharedArrayBuffer)return err("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!pthread_ptr)return err("pthread_create called with a null thread pointer!"),28;var transferList=[];if(ENVIRONMENT_IS_PTHREAD&&0===transferList.length)return _emscripten_sync_run_in_main_thread_4(687865856,pthread_ptr,attr,start_routine,arg);var stackSize=0,stackBase=0,detached=0;attr&&-1!=attr?(stackSize=GROWABLE_HEAP_I32()[attr>>>2],stackSize+=81920,stackBase=GROWABLE_HEAP_I32()[attr+8>>>2],detached=0!==GROWABLE_HEAP_I32()[attr+12>>>2]):stackSize=2097152;var allocatedOwnStack=0==stackBase;allocatedOwnStack?stackBase=_memalign(16,stackSize):assert((stackBase-=stackSize)>0);for(var threadInfoStruct=_malloc(228),i=0;i<57;++i)GROWABLE_HEAP_U32()[(threadInfoStruct>>2)+i>>>0]=0;GROWABLE_HEAP_I32()[pthread_ptr>>>2]=threadInfoStruct,GROWABLE_HEAP_I32()[threadInfoStruct+12>>>2]=threadInfoStruct;var headPtr=threadInfoStruct+152;GROWABLE_HEAP_I32()[headPtr>>>2]=headPtr;var threadParams={stackBase,stackSize,allocatedOwnStack,detached,startRoutine:start_routine,pthread_ptr:threadInfoStruct,arg,transferList};return ENVIRONMENT_IS_PTHREAD?(threadParams.cmd="spawnThread",postMessage(threadParams,transferList),0):spawnThread(threadParams)},P:function(val){setTempRet0(val)},X:function(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}},_malloc=(function(){var info={a:asmLibraryArg};function receiveInstance(instance,module2){var cb,exports3=instance.exports;if(Module.asm=exports3,wasmTable=Module.asm.ta,cb=Module.asm.oa,__ATINIT__.unshift(cb),PThread.tlsInitFunctions.push(Module.asm.sa),wasmModule=module2,!ENVIRONMENT_IS_PTHREAD){var numWorkersToLoad=PThread.unusedWorkers.length;PThread.unusedWorkers.forEach((function(w){PThread.loadWasmModuleToWorker(w,(function(){--numWorkersToLoad||removeRunDependency()}))}))}}function receiveInstantiationResult(result){receiveInstance(result.instance,result.module)}function instantiateArrayBuffer(receiver){return function(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if("function"==typeof fetch&&!isFileURI(wasmBinaryFile))return fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){if(!response.ok)throw"failed to load wasm binary file at '"+wasmBinaryFile+"'";return response.arrayBuffer()})).catch((function(){return getBinary(wasmBinaryFile)}));if(readAsync)return new Promise((function(resolve,reject){readAsync(wasmBinaryFile,(function(response){resolve(new Uint8Array(response))}),reject)}))}return Promise.resolve().then((function(){return getBinary(wasmBinaryFile)}))}().then((function(binary){return WebAssembly.instantiate(binary,info)})).then(receiver,(function(reason){err("failed to asynchronously prepare wasm: "+reason),abort(reason)}))}if(ENVIRONMENT_IS_PTHREAD||addRunDependency(),Module.instantiateWasm)try{return Module.instantiateWasm(info,receiveInstance)}catch(e){return err("Module.instantiateWasm callback failed with error: "+e),!1}(wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||isDataURI(wasmBinaryFile)||isFileURI(wasmBinaryFile)||"function"!=typeof fetch?instantiateArrayBuffer(receiveInstantiationResult):fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){return WebAssembly.instantiateStreaming(response,info).then(receiveInstantiationResult,(function(reason){return err("wasm streaming compile failed: "+reason),err("falling back to ArrayBuffer instantiation"),instantiateArrayBuffer(receiveInstantiationResult)}))}))).catch(readyPromiseReject)}(),Module.___wasm_call_ctors=function(){return(Module.___wasm_call_ctors=Module.asm.oa).apply(null,arguments)},Module._main=function(){return(Module._main=Module.asm.pa).apply(null,arguments)},Module._malloc=function(){return(_malloc=Module._malloc=Module.asm.qa).apply(null,arguments)}),_free=Module._free=function(){return(_free=Module._free=Module.asm.ra).apply(null,arguments)},___getTypeName=(Module._emscripten_tls_init=function(){return(Module._emscripten_tls_init=Module.asm.sa).apply(null,arguments)},Module.___getTypeName=function(){return(___getTypeName=Module.___getTypeName=Module.asm.ua).apply(null,arguments)}),_emscripten_register_main_browser_thread_id=(Module.___embind_register_native_and_builtin_types=function(){return(Module.___embind_register_native_and_builtin_types=Module.asm.va).apply(null,arguments)},Module._emscripten_current_thread_process_queued_calls=function(){return(Module._emscripten_current_thread_process_queued_calls=Module.asm.wa).apply(null,arguments)},Module._emscripten_register_main_browser_thread_id=function(){return(_emscripten_register_main_browser_thread_id=Module._emscripten_register_main_browser_thread_id=Module.asm.xa).apply(null,arguments)}),__emscripten_do_dispatch_to_thread=Module.__emscripten_do_dispatch_to_thread=function(){return(__emscripten_do_dispatch_to_thread=Module.__emscripten_do_dispatch_to_thread=Module.asm.ya).apply(null,arguments)},_emscripten_sync_run_in_main_thread_4=Module._emscripten_sync_run_in_main_thread_4=function(){return(_emscripten_sync_run_in_main_thread_4=Module._emscripten_sync_run_in_main_thread_4=Module.asm.za).apply(null,arguments)},_emscripten_main_thread_process_queued_calls=Module._emscripten_main_thread_process_queued_calls=function(){return(_emscripten_main_thread_process_queued_calls=Module._emscripten_main_thread_process_queued_calls=Module.asm.Aa).apply(null,arguments)},_emscripten_run_in_main_runtime_thread_js=Module._emscripten_run_in_main_runtime_thread_js=function(){return(_emscripten_run_in_main_runtime_thread_js=Module._emscripten_run_in_main_runtime_thread_js=Module.asm.Ba).apply(null,arguments)},__emscripten_call_on_thread=Module.__emscripten_call_on_thread=function(){return(__emscripten_call_on_thread=Module.__emscripten_call_on_thread=Module.asm.Ca).apply(null,arguments)},__emscripten_thread_init=Module.__emscripten_thread_init=function(){return(__emscripten_thread_init=Module.__emscripten_thread_init=Module.asm.Da).apply(null,arguments)},_emscripten_get_global_libc=Module._emscripten_get_global_libc=function(){return(_emscripten_get_global_libc=Module._emscripten_get_global_libc=Module.asm.Ea).apply(null,arguments)},___errno_location=Module.___errno_location=function(){return(___errno_location=Module.___errno_location=Module.asm.Fa).apply(null,arguments)},_pthread_self=Module._pthread_self=function(){return(_pthread_self=Module._pthread_self=Module.asm.Ga).apply(null,arguments)},___pthread_tsd_run_dtors=Module.___pthread_tsd_run_dtors=function(){return(___pthread_tsd_run_dtors=Module.___pthread_tsd_run_dtors=Module.asm.Ha).apply(null,arguments)},stackSave=Module.stackSave=function(){return(stackSave=Module.stackSave=Module.asm.Ia).apply(null,arguments)},stackRestore=Module.stackRestore=function(){return(stackRestore=Module.stackRestore=Module.asm.Ja).apply(null,arguments)},stackAlloc=Module.stackAlloc=function(){return(stackAlloc=Module.stackAlloc=Module.asm.Ka).apply(null,arguments)},_emscripten_stack_set_limits=Module._emscripten_stack_set_limits=function(){return(_emscripten_stack_set_limits=Module._emscripten_stack_set_limits=Module.asm.La).apply(null,arguments)},_memalign=Module._memalign=function(){return(_memalign=Module._memalign=Module.asm.Ma).apply(null,arguments)},__emscripten_allow_main_runtime_queued_calls=(Module.dynCall_jiji=function(){return(Module.dynCall_jiji=Module.asm.Na).apply(null,arguments)},Module.dynCall_viijii=function(){return(Module.dynCall_viijii=Module.asm.Oa).apply(null,arguments)},Module.dynCall_iiiiij=function(){return(Module.dynCall_iiiiij=Module.asm.Pa).apply(null,arguments)},Module.dynCall_iiiiijj=function(){return(Module.dynCall_iiiiijj=Module.asm.Qa).apply(null,arguments)},Module.dynCall_iiiiiijj=function(){return(Module.dynCall_iiiiiijj=Module.asm.Ra).apply(null,arguments)},Module.__emscripten_allow_main_runtime_queued_calls=44840),__emscripten_main_thread_futex=Module.__emscripten_main_thread_futex=48292;function ExitStatus(status){this.name="ExitStatus",this.message="Program terminated with exit("+status+")",this.status=status}function run(args){if(args=args||arguments_,!(runDependencies>0)){if(ENVIRONMENT_IS_PTHREAD)return readyPromiseResolve(Module),initRuntime(),void postMessage({cmd:"loaded"});!function(){if(!ENVIRONMENT_IS_PTHREAD){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)cb=Module.preRun.shift(),__ATPRERUN__.unshift(cb);var cb;callRuntimeCallbacks(__ATPRERUN__)}}(),runDependencies>0||(Module.setStatus?(Module.setStatus("Running..."),setTimeout((function(){setTimeout((function(){Module.setStatus("")}),1),doRun()}),1)):doRun())}function doRun(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT||(initRuntime(),ENVIRONMENT_IS_PTHREAD||callRuntimeCallbacks(__ATMAIN__),readyPromiseResolve(Module),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),shouldRunNow&&function(args){var entryFunction=Module._main;try{exit(entryFunction(0,0),!0)}catch(e){if(e instanceof ExitStatus||"unwind"==e)return;var toLog=e;e&&"object"==typeof e&&e.stack&&(toLog=[e,e.stack]),err("exception thrown: "+toLog),quit_(1,e)}}(),function(){if(!ENVIRONMENT_IS_PTHREAD){if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)cb=Module.postRun.shift(),__ATPOSTRUN__.unshift(cb);var cb;callRuntimeCallbacks(__ATPOSTRUN__)}}()))}}function exit(status,implicit){if(!implicit&&ENVIRONMENT_IS_PTHREAD)throw postMessage({cmd:"exitProcess",returnCode:status}),new ExitStatus(status);keepRuntimeAlive()||(PThread.terminateAllThreads(),Module.onExit&&Module.onExit(status),ABORT=!0),quit_(status,new ExitStatus(status))}if(Module.addRunDependency=addRunDependency,Module.removeRunDependency=removeRunDependency,Module.FS_createPath=FS.createPath,Module.FS_createDataFile=FS.createDataFile,Module.FS_createPreloadedFile=FS.createPreloadedFile,Module.FS_createLazyFile=FS.createLazyFile,Module.FS_createDevice=FS.createDevice,Module.FS_unlink=FS.unlink,Module.keepRuntimeAlive=keepRuntimeAlive,Module.FS=FS,Module.PThread=PThread,Module.PThread=PThread,Module.wasmMemory=wasmMemory,Module.ExitStatus=ExitStatus,dependenciesFulfilled=function runCaller(){calledRun||run(),calledRun||(dependenciesFulfilled=runCaller)},Module.run=run,Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);Module.preInit.length>0;)Module.preInit.pop()();var shouldRunNow=!0;return Module.noInitialRun&&(shouldRunNow=!1),ENVIRONMENT_IS_PTHREAD&&(noExitRuntime=!1,PThread.initWorker()),run(),WebIFCWasm3.ready});"object"==typeof exports&&"object"==typeof module?module.exports=WebIFCWasm2:"function"==typeof define&&define.amd?define([],(function(){return WebIFCWasm2})):"object"==typeof exports&&(exports.WebIFCWasm=WebIFCWasm2)}}),require_web_ifc=__commonJS({"dist/web-ifc.js"(exports,module){var _scriptDir,WebIFCWasm2=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(WebIFCWasm3){var readyPromiseResolve,readyPromiseReject,Module=void 0!==(WebIFCWasm3=WebIFCWasm3||{})?WebIFCWasm3:{};Module.ready=new Promise((function(resolve,reject){readyPromiseResolve=resolve,readyPromiseReject=reject}));var key,moduleOverrides={};for(key in Module)Module.hasOwnProperty(key)&&(moduleOverrides[key]=Module[key]);var read_,readAsync,readBinary,nodeFS,nodePath,arguments_=[],thisProgram="./this.program",quit_=function(status,toThrow){throw toThrow},ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,scriptDirectory="";ENVIRONMENT_IS_NODE?(scriptDirectory=ENVIRONMENT_IS_WORKER?__require("path").dirname(scriptDirectory)+"/":__dirname+"/",read_=function(filename,binary){return nodeFS||(nodeFS=__require("fs")),nodePath||(nodePath=__require("path")),filename=nodePath.normalize(filename),nodeFS.readFileSync(filename,binary?null:"utf8")},readBinary=function(filename){var ret=read_(filename,!0);return ret.buffer||(ret=new Uint8Array(ret)),assert(ret.buffer),ret},readAsync=function(filename,onload,onerror){nodeFS||(nodeFS=__require("fs")),nodePath||(nodePath=__require("path")),filename=nodePath.normalize(filename),nodeFS.readFile(filename,(function(err2,data){err2?onerror(err2):onload(data.buffer)}))},process.argv.length>1&&(thisProgram=process.argv[1].replace(/\\/g,"/")),arguments_=process.argv.slice(2),process.on("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus))throw ex})),process.on("unhandledRejection",abort),quit_=function(status,toThrow){if(keepRuntimeAlive())throw process.exitCode=status,toThrow;process.exit(status)},Module.inspect=function(){return"[Emscripten Module object]"}):(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&(ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:"undefined"!=typeof document&&document.currentScript&&(scriptDirectory=document.currentScript.src),_scriptDir&&(scriptDirectory=_scriptDir),scriptDirectory=0!==scriptDirectory.indexOf("blob:")?scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1):"",read_=function(url){var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.send(null),xhr.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=function(url){var xhr=new XMLHttpRequest;return xhr.open("GET",url,!1),xhr.responseType="arraybuffer",xhr.send(null),new Uint8Array(xhr.response)}),readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="arraybuffer",xhr.onload=function(){200==xhr.status||0==xhr.status&&xhr.response?onload(xhr.response):onerror()},xhr.onerror=onerror,xhr.send(null)});var out=Module.print||void 0,err=Module.printErr||void 0;for(key in moduleOverrides)moduleOverrides.hasOwnProperty(key)&&(Module[key]=moduleOverrides[key]);moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Module.thisProgram&&(thisProgram=Module.thisProgram),Module.quit&&(quit_=Module.quit);var wasmBinary,setTempRet0=function(value){};Module.wasmBinary&&(wasmBinary=Module.wasmBinary);var wasmMemory,noExitRuntime=Module.noExitRuntime||!0;"object"!=typeof WebAssembly&&abort("no native wasm support detected");var ABORT=!1;function assert(condition,text){condition||abort("Assertion failed: "+text)}var UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function UTF8ArrayToString(heap,idx,maxBytesToRead){for(var endIdx=(idx>>>=0)+maxBytesToRead,endPtr=idx;heap[endPtr>>>0]&&!(endPtr>=endIdx);)++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder)return UTF8Decoder.decode(heap.subarray(idx>>>0,endPtr>>>0));for(var str="";idx<endPtr;){var u0=heap[idx++>>>0];if(128&u0){var u1=63&heap[idx++>>>0];if(192!=(224&u0)){var u2=63&heap[idx++>>>0];if((u0=224==(240&u0)?(15&u0)<<12|u1<<6|u2:(7&u0)<<18|u1<<12|u2<<6|63&heap[idx++>>>0])<65536)str+=String.fromCharCode(u0);else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)}}else str+=String.fromCharCode((31&u0)<<6|u1)}else str+=String.fromCharCode(u0)}return str}function UTF8ToString(ptr,maxBytesToRead){return(ptr>>>=0)?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;for(var startIdx=outIdx>>>=0,endIdx=outIdx+maxBytesToWrite-1,i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&str.charCodeAt(++i)),u<=127){if(outIdx>=endIdx)break;heap[outIdx++>>>0]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++>>>0]=192|u>>6,heap[outIdx++>>>0]=128|63&u}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++>>>0]=224|u>>12,heap[outIdx++>>>0]=128|u>>6&63,heap[outIdx++>>>0]=128|63&u}else{if(outIdx+3>=endIdx)break;heap[outIdx++>>>0]=240|u>>18,heap[outIdx++>>>0]=128|u>>12&63,heap[outIdx++>>>0]=128|u>>6&63,heap[outIdx++>>>0]=128|63&u}}return heap[outIdx>>>0]=0,outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){for(var len=0,i=0;i<str.length;++i){var u=str.charCodeAt(i);u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&str.charCodeAt(++i)),u<=127?++len:len+=u<=2047?2:u<=65535?3:4}return len}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64,UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function UTF16ToString(ptr,maxBytesToRead){for(var endPtr=ptr,idx=endPtr>>1,maxIdx=idx+maxBytesToRead/2;!(idx>=maxIdx)&&HEAPU16[idx>>>0];)++idx;if((endPtr=idx<<1)-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr>>>0,endPtr>>>0));for(var str="",i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+2*i>>>1];if(0==codeUnit)break;str+=String.fromCharCode(codeUnit)}return str}function stringToUTF16(str,outPtr,maxBytesToWrite){if(void 0===maxBytesToWrite&&(maxBytesToWrite=2147483647),maxBytesToWrite<2)return 0;for(var startPtr=outPtr,numCharsToWrite=(maxBytesToWrite-=2)<2*str.length?maxBytesToWrite/2:str.length,i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>>1]=codeUnit,outPtr+=2}return HEAP16[outPtr>>>1]=0,outPtr-startPtr}function lengthBytesUTF16(str){return 2*str.length}function UTF32ToString(ptr,maxBytesToRead){for(var i=0,str="";!(i>=maxBytesToRead/4);){var utf32=HEAP32[ptr+4*i>>>2];if(0==utf32)break;if(++i,utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|1023&ch)}else str+=String.fromCharCode(utf32)}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(void 0===maxBytesToWrite&&(maxBytesToWrite=2147483647),maxBytesToWrite<4)return 0;for(var startPtr=outPtr>>>=0,endPtr=startPtr+maxBytesToWrite-4,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343&&(codeUnit=65536+((1023&codeUnit)<<10)|1023&str.charCodeAt(++i)),HEAP32[outPtr>>>2]=codeUnit,(outPtr+=4)+4>endPtr)break}return HEAP32[outPtr>>>2]=0,outPtr-startPtr}function lengthBytesUTF32(str){for(var len=0,i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);codeUnit>=55296&&codeUnit<=57343&&++i,len+=4}return len}function updateGlobalBufferAndViews(buf){buffer=buf,Module.HEAP8=HEAP8=new Int8Array(buf),Module.HEAP16=HEAP16=new Int16Array(buf),Module.HEAP32=HEAP32=new Int32Array(buf),Module.HEAPU8=HEAPU8=new Uint8Array(buf),Module.HEAPU16=HEAPU16=new Uint16Array(buf),Module.HEAPU32=HEAPU32=new Uint32Array(buf),Module.HEAPF32=HEAPF32=new Float32Array(buf),Module.HEAPF64=HEAPF64=new Float64Array(buf)}Module.INITIAL_MEMORY;var wasmTable,__ATPRERUN__=[],__ATINIT__=[],__ATMAIN__=[],__ATPOSTRUN__=[],runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function addRunDependency(id){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(id){if(runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)){var callback=dependenciesFulfilled;dependenciesFulfilled=null,callback()}}function abort(what){Module.onAbort&&Module.onAbort(what),err(what+=""),ABORT=!0,what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);throw readyPromiseReject(e),e}Module.preloadedImages={},Module.preloadedAudios={};var wasmBinaryFile,path,tempDouble,tempI64,dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(file);throw"both async and sync fetching of the wasm failed"}catch(err2){abort(err2)}}function callRuntimeCallbacks(callbacks){for(;callbacks.length>0;){var callback=callbacks.shift();if("function"!=typeof callback){var func=callback.func;"number"==typeof func?void 0===callback.arg?wasmTable.get(func)():wasmTable.get(func)(callback.arg):func(void 0===callback.arg?null:callback.arg)}else callback(Module)}}function ExceptionInfo(excPtr){this.excPtr=excPtr,this.ptr=excPtr-16,this.set_type=function(type){HEAP32[this.ptr+4>>>2]=type},this.get_type=function(){return HEAP32[this.ptr+4>>>2]},this.set_destructor=function(destructor){HEAP32[this.ptr+8>>>2]=destructor},this.get_destructor=function(){return HEAP32[this.ptr+8>>>2]},this.set_refcount=function(refcount){HEAP32[this.ptr>>>2]=refcount},this.set_caught=function(caught){caught=caught?1:0,HEAP8[this.ptr+12>>>0]=caught},this.get_caught=function(){return 0!=HEAP8[this.ptr+12>>>0]},this.set_rethrown=function(rethrown){rethrown=rethrown?1:0,HEAP8[this.ptr+13>>>0]=rethrown},this.get_rethrown=function(){return 0!=HEAP8[this.ptr+13>>>0]},this.init=function(type,destructor){this.set_type(type),this.set_destructor(destructor),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var value=HEAP32[this.ptr>>>2];HEAP32[this.ptr>>>2]=value+1},this.release_ref=function(){var prev=HEAP32[this.ptr>>>2];return HEAP32[this.ptr>>>2]=prev-1,1===prev}}function setErrNo(value){return HEAP32[___errno_location()>>>2]=value,value}isDataURI(wasmBinaryFile="web-ifc.wasm")||(path=wasmBinaryFile,wasmBinaryFile=Module.locateFile?Module.locateFile(path,scriptDirectory):scriptDirectory+path);var PATH={splitPath:function(filename){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){for(var up=0,i=parts.length-1;i>=0;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up;up--)parts.unshift("..");return parts},normalize:function(path){var isAbsolute="/"===path.charAt(0),trailingSlash="/"===path.substr(-1);return(path=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!isAbsolute).join("/"))||isAbsolute||(path="."),path&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];return root||dir?(dir&&(dir=dir.substr(0,dir.length-1)),root+dir):"."},basename:function(path){if("/"===path)return"/";var lastSlash=(path=(path=PATH.normalize(path)).replace(/\/$/,"")).lastIndexOf("/");return-1===lastSlash?path:path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}},PATH_FS={resolve:function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");if(!path)return"";resolvedPath=path+"/"+resolvedPath,resolvedAbsolute="/"===path.charAt(0)}return(resolvedAbsolute?"/":"")+(resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter((function(p){return!!p})),!resolvedAbsolute).join("/"))||"."},relative:function(from,to){function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;end>=0&&""===arr[end];end--);return start>end?[]:arr.slice(start,end-start+1)}from=PATH_FS.resolve(from).substr(1),to=PATH_FS.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;i<length;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}var outputParts=[];for(i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return(outputParts=outputParts.concat(toParts.slice(samePartsLength))).join("/")}},TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops},FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty)throw new FS.ErrnoError(43);stream.tty=tty,stream.seekable=!1},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer2,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char)throw new FS.ErrnoError(60);for(var bytesRead=0,i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer2[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer2,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char)throw new FS.ErrnoError(60);try{for(var i=0;i<length;i++)stream.tty.ops.put_char(stream.tty,buffer2[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var buf=Buffer.alloc(256),bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,256,null)}catch(e){if(!e.toString().includes("EOF"))throw e;bytesRead=0}result=bytesRead>0?buf.slice(0,bytesRead).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(result=window.prompt("Input: "))&&(result+="\n"):"function"==typeof readline&&null!==(result=readline())&&(result+="\n");if(!result)return null;tty.input=intArrayFromString(result,!0)}return tty.input.shift()},put_char:function(tty,val){null===val||10===val?(out(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},flush:function(tty){tty.output&&tty.output.length>0&&(out(UTF8ArrayToString(tty.output,0)),tty.output=[])}},default_tty1_ops:{put_char:function(tty,val){null===val||10===val?(err(UTF8ArrayToString(tty.output,0)),tty.output=[]):0!=val&&tty.output.push(val)},flush:function(tty){tty.output&&tty.output.length>0&&(err(UTF8ArrayToString(tty.output,0)),tty.output=[])}}},MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16895,0)},createNode:function(parent,name2,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode))throw new FS.ErrnoError(63);MEMFS.ops_table||(MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}});var node=FS.createNode(parent,name2,mode,dev);return FS.isDir(node.mode)?(node.node_ops=MEMFS.ops_table.dir.node,node.stream_ops=MEMFS.ops_table.dir.stream,node.contents={}):FS.isFile(node.mode)?(node.node_ops=MEMFS.ops_table.file.node,node.stream_ops=MEMFS.ops_table.file.stream,node.usedBytes=0,node.contents=null):FS.isLink(node.mode)?(node.node_ops=MEMFS.ops_table.link.node,node.stream_ops=MEMFS.ops_table.link.stream):FS.isChrdev(node.mode)&&(node.node_ops=MEMFS.ops_table.chrdev.node,node.stream_ops=MEMFS.ops_table.chrdev.stream),node.timestamp=Date.now(),parent&&(parent.contents[name2]=node,parent.timestamp=node.timestamp),node},getFileDataAsTypedArray:function(node){return node.contents?node.contents.subarray?node.contents.subarray(0,node.usedBytes):new Uint8Array(node.contents):new Uint8Array(0)},expandFileStorage:function(node,newCapacity){newCapacity>>>=0;var prevCapacity=node.contents?node.contents.length:0;if(!(prevCapacity>=newCapacity)){newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<1048576?2:1.125)>>>0),0!=prevCapacity&&(newCapacity=Math.max(newCapacity,256));var oldContents=node.contents;node.contents=new Uint8Array(newCapacity),node.usedBytes>0&&node.contents.set(oldContents.subarray(0,node.usedBytes),0)}},resizeFileStorage:function(node,newSize){if(newSize>>>=0,node.usedBytes!=newSize)if(0==newSize)node.contents=null,node.usedBytes=0;else{var oldContents=node.contents;node.contents=new Uint8Array(newSize),oldContents&&node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes))),node.usedBytes=newSize}},node_ops:{getattr:function(node){var attr={};return attr.dev=FS.isChrdev(node.mode)?node.id:1,attr.ino=node.id,attr.mode=node.mode,attr.nlink=1,attr.uid=0,attr.gid=0,attr.rdev=node.rdev,FS.isDir(node.mode)?attr.size=4096:FS.isFile(node.mode)?attr.size=node.usedBytes:FS.isLink(node.mode)?attr.size=node.link.length:attr.size=0,attr.atime=new Date(node.timestamp),attr.mtime=new Date(node.timestamp),attr.ctime=new Date(node.timestamp),attr.blksize=4096,attr.blocks=Math.ceil(attr.size/attr.blksize),attr},setattr:function(node,attr){void 0!==attr.mode&&(node.mode=attr.mode),void 0!==attr.timestamp&&(node.timestamp=attr.timestamp),void 0!==attr.size&&MEMFS.resizeFileStorage(node,attr.size)},lookup:function(parent,name2){throw FS.genericErrors[44]},mknod:function(parent,name2,mode,dev){return MEMFS.createNode(parent,name2,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node)for(var i in new_node.contents)throw new FS.ErrnoError(55)}delete old_node.parent.contents[old_node.name],old_node.parent.timestamp=Date.now(),old_node.name=new_name,new_dir.contents[new_name]=old_node,new_dir.timestamp=old_node.parent.timestamp,old_node.parent=new_dir},unlink:function(parent,name2){delete parent.contents[name2],parent.timestamp=Date.now()},rmdir:function(parent,name2){var node=FS.lookupNode(parent,name2);for(var i in node.contents)throw new FS.ErrnoError(55);delete parent.contents[name2],parent.timestamp=Date.now()},readdir:function(node){var entries=[".",".."];for(var key2 in node.contents)node.contents.hasOwnProperty(key2)&&entries.push(key2);return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,41471,0);return node.link=oldpath,node},readlink:function(node){if(!FS.isLink(node.mode))throw new FS.ErrnoError(28);return node.link}},stream_ops:{read:function(stream,buffer2,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray)buffer2.set(contents.subarray(position,position+size),offset);else for(var i=0;i<size;i++)buffer2[offset+i]=contents[position+i];return size},write:function(stream,buffer2,offset,length,position,canOwn){if(buffer2.buffer===HEAP8.buffer&&(canOwn=!1),!length)return 0;var node=stream.node;if(node.timestamp=Date.now(),buffer2.subarray&&(!node.contents||node.contents.subarray)){if(canOwn)return node.contents=buffer2.subarray(offset,offset+length),node.usedBytes=length,length;if(0===node.usedBytes&&0===position)return node.contents=buffer2.slice(offset,offset+length),node.usedBytes=length,length;if(position+length<=node.usedBytes)return node.contents.set(buffer2.subarray(offset,offset+length),position),length}if(MEMFS.expandFileStorage(node,position+length),node.contents.subarray&&buffer2.subarray)node.contents.set(buffer2.subarray(offset,offset+length),position);else for(var i=0;i<length;i++)node.contents[position+i]=buffer2[offset+i];return node.usedBytes=Math.max(node.usedBytes,position+length),length},llseek:function(stream,offset,whence){var position=offset;if(1===whence?position+=stream.position:2===whence&&FS.isFile(stream.node.mode)&&(position+=stream.node.usedBytes),position<0)throw new FS.ErrnoError(28);return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length),stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){if(0!==address)throw new FS.ErrnoError(28);if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);var ptr,allocated,contents=stream.node.contents;if(2&flags||contents.buffer!==buffer){if((position>0||position+length<contents.length)&&(contents=contents.subarray?contents.subarray(position,position+length):Array.prototype.slice.call(contents,position,position+length)),allocated=!0,!(ptr=void abort()))throw new FS.ErrnoError(48);ptr>>>=0,HEAP8.set(contents,ptr>>>0)}else allocated=!1,ptr=contents.byteOffset;return{ptr,allocated}},msync:function(stream,buffer2,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode))throw new FS.ErrnoError(43);return 2&mmapFlags||MEMFS.stream_ops.write(stream,buffer2,0,length,offset,!1),0}}},FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path,opts){if(opts=opts||{},!(path=PATH_FS.resolve(FS.cwd(),path)))return{path:"",node:null};var defaults={follow_mount:!0,recurse_count:0};for(var key2 in defaults)void 0===opts[key2]&&(opts[key2]=defaults[key2]);if(opts.recurse_count>8)throw new FS.ErrnoError(32);for(var parts=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!1),current=FS.root,current_path="/",i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent)break;if(current=FS.lookupNode(current,parts[i]),current_path=PATH.join2(current_path,parts[i]),FS.isMountpoint(current)&&(!islast||islast&&opts.follow_mount)&&(current=current.mounted.root),!islast||opts.follow)for(var count=0;FS.isLink(current.mode);){var link=FS.readlink(current_path);if(current_path=PATH_FS.resolve(PATH.dirname(current_path),link),current=FS.lookupPath(current_path,{recurse_count:opts.recurse_count}).node,count++>40)throw new FS.ErrnoError(32)}}return{path:current_path,node:current}},getPath:function(node){for(var path;;){if(FS.isRoot(node)){var mount=node.mount.mountpoint;return path?"/"!==mount[mount.length-1]?mount+"/"+path:mount+path:mount}path=path?node.name+"/"+path:node.name,node=node.parent}},hashName:function(parentid,name2){for(var hash=0,i=0;i<name2.length;i++)hash=(hash<<5)-hash+name2.charCodeAt(i)|0;return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash],FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node)FS.nameTable[hash]=node.name_next;else for(var current=FS.nameTable[hash];current;){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}},lookupNode:function(parent,name2){var errCode=FS.mayLookup(parent);if(errCode)throw new FS.ErrnoError(errCode,parent);for(var hash=FS.hashName(parent.id,name2),node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name2)return node}return FS.lookup(parent,name2)},createNode:function(parent,name2,mode,rdev){var node=new FS.FSNode(parent,name2,mode,rdev);return FS.hashAddNode(node),node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return 32768==(61440&mode)},isDir:function(mode){return 16384==(61440&mode)},isLink:function(mode){return 40960==(61440&mode)},isChrdev:function(mode){return 8192==(61440&mode)},isBlkdev:function(mode){return 24576==(61440&mode)},isFIFO:function(mode){return 4096==(61440&mode)},isSocket:function(mode){return 49152==(49152&mode)},flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(void 0===flags)throw new Error("Unknown file open mode: "+str);return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][3&flag];return 512&flag&&(perms+="w"),perms},nodePermissions:function(node,perms){return FS.ignorePermissions||(!perms.includes("r")||292&node.mode)&&(!perms.includes("w")||146&node.mode)&&(!perms.includes("x")||73&node.mode)?0:2},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");return errCode||(dir.node_ops.lookup?0:2)},mayCreate:function(dir,name2){try{return FS.lookupNode(dir,name2),20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name2,isdir){var node;try{node=FS.lookupNode(dir,name2)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode)return errCode;if(isdir){if(!FS.isDir(node.mode))return 54;if(FS.isRoot(node)||FS.getPath(node)===FS.cwd())return 10}else if(FS.isDir(node.mode))return 31;return 0},mayOpen:function(node,flags){return node?FS.isLink(node.mode)?32:FS.isDir(node.mode)&&("r"!==FS.flagsToPermissionString(flags)||512&flags)?31:FS.nodePermissions(node,FS.flagsToPermissionString(flags)):44},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0,fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++)if(!FS.streams[fd])return fd;throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){FS.FSStream||(FS.FSStream=function(){},FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}});var newStream=new FS.FSStream;for(var p in stream)newStream[p]=stream[p];stream=newStream;var fd=FS.nextfd(fd_start,fd_end);return stream.fd=fd,FS.streams[fd]=stream,stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops,stream.stream_ops.open&&stream.stream_ops.open(stream)},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return 255&dev},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){for(var mounts=[],check=[mount];check.length;){var m=check.pop();mounts.push(m),check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){"function"==typeof populate&&(callback=populate,populate=!1),FS.syncFSRequests++,FS.syncFSRequests>1&&err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var mounts=FS.getMounts(FS.root.mount),completed=0;function doCallback(errCode){return FS.syncFSRequests--,callback(errCode)}function done(errCode){if(errCode)return done.errored?void 0:(done.errored=!0,doCallback(errCode));++completed>=mounts.length&&doCallback(null)}mounts.forEach((function(mount){if(!mount.type.syncfs)return done(null);mount.type.syncfs(mount,populate,done)}))},mount:function(type,opts,mountpoint){var node,root="/"===mountpoint,pseudo=!mountpoint;if(root&&FS.root)throw new FS.ErrnoError(10);if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:!1});if(mountpoint=lookup.path,node=lookup.node,FS.isMountpoint(node))throw new FS.ErrnoError(10);if(!FS.isDir(node.mode))throw new FS.ErrnoError(54)}var mount={type,opts,mountpoint,mounts:[]},mountRoot=type.mount(mount);return mountRoot.mount=mount,mount.root=mountRoot,root?FS.root=mountRoot:node&&(node.mounted=mount,node.mount&&node.mount.mounts.push(mount)),mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:!1});if(!FS.isMountpoint(lookup.node))throw new FS.ErrnoError(28);var node=lookup.node,mount=node.mounted,mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach((function(hash){for(var current=FS.nameTable[hash];current;){var next=current.name_next;mounts.includes(current.mount)&&FS.destroyNode(current),current=next}})),node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:function(parent,name2){return parent.node_ops.lookup(parent,name2)},mknod:function(path,mode,dev){var parent=FS.lookupPath(path,{parent:!0}).node,name2=PATH.basename(path);if(!name2||"."===name2||".."===name2)throw new FS.ErrnoError(28);var errCode=FS.mayCreate(parent,name2);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.mknod)throw new FS.ErrnoError(63);return parent.node_ops.mknod(parent,name2,mode,dev)},create:function(path,mode){return mode=void 0!==mode?mode:438,mode&=4095,mode|=32768,FS.mknod(path,mode,0)},mkdir:function(path,mode){return mode=void 0!==mode?mode:511,mode&=1023,mode|=16384,FS.mknod(path,mode,0)},mkdirTree:function(path,mode){for(var dirs=path.split("/"),d="",i=0;i<dirs.length;++i)if(dirs[i]){d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(20!=e.errno)throw e}}},mkdev:function(path,mode,dev){return void 0===dev&&(dev=mode,mode=438),mode|=8192,FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath))throw new FS.ErrnoError(44);var parent=FS.lookupPath(newpath,{parent:!0}).node;if(!parent)throw new FS.ErrnoError(44);var newname=PATH.basename(newpath),errCode=FS.mayCreate(parent,newname);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.symlink)throw new FS.ErrnoError(63);return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dir,new_dir,old_dirname=PATH.dirname(old_path),new_dirname=PATH.dirname(new_path),old_name=PATH.basename(old_path),new_name=PATH.basename(new_path);if(old_dir=FS.lookupPath(old_path,{parent:!0}).node,new_dir=FS.lookupPath(new_path,{parent:!0}).node,!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount)throw new FS.ErrnoError(75);var new_node,old_node=FS.lookupNode(old_dir,old_name),relative=PATH_FS.relative(old_path,new_dirname);if("."!==relative.charAt(0))throw new FS.ErrnoError(28);if("."!==(relative=PATH_FS.relative(new_path,old_dirname)).charAt(0))throw new FS.ErrnoError(55);try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node!==new_node){var isdir=FS.isDir(old_node.mode),errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode)throw new FS.ErrnoError(errCode);if(errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name))throw new FS.ErrnoError(errCode);if(!old_dir.node_ops.rename)throw new FS.ErrnoError(63);if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node))throw new FS.ErrnoError(10);if(new_dir!==old_dir&&(errCode=FS.nodePermissions(old_dir,"w")))throw new FS.ErrnoError(errCode);try{FS.trackingDelegate.willMovePath&&FS.trackingDelegate.willMovePath(old_path,new_path)}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{FS.trackingDelegate.onMovePath&&FS.trackingDelegate.onMovePath(old_path,new_path)}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}}},rmdir:function(path){var parent=FS.lookupPath(path,{parent:!0}).node,name2=PATH.basename(path),node=FS.lookupNode(parent,name2),errCode=FS.mayDelete(parent,name2,!0);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.rmdir)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);try{FS.trackingDelegate.willDeletePath&&FS.trackingDelegate.willDeletePath(path)}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name2),FS.destroyNode(node);try{FS.trackingDelegate.onDeletePath&&FS.trackingDelegate.onDeletePath(path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var node=FS.lookupPath(path,{follow:!0}).node;if(!node.node_ops.readdir)throw new FS.ErrnoError(54);return node.node_ops.readdir(node)},unlink:function(path){var parent=FS.lookupPath(path,{parent:!0}).node,name2=PATH.basename(path),node=FS.lookupNode(parent,name2),errCode=FS.mayDelete(parent,name2,!1);if(errCode)throw new FS.ErrnoError(errCode);if(!parent.node_ops.unlink)throw new FS.ErrnoError(63);if(FS.isMountpoint(node))throw new FS.ErrnoError(10);try{FS.trackingDelegate.willDeletePath&&FS.trackingDelegate.willDeletePath(path)}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name2),FS.destroyNode(node);try{FS.trackingDelegate.onDeletePath&&FS.trackingDelegate.onDeletePath(path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var link=FS.lookupPath(path).node;if(!link)throw new FS.ErrnoError(44);if(!link.node_ops.readlink)throw new FS.ErrnoError(28);return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var node=FS.lookupPath(path,{follow:!dontFollow}).node;if(!node)throw new FS.ErrnoError(44);if(!node.node_ops.getattr)throw new FS.ErrnoError(63);return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,!0)},chmod:function(path,mode,dontFollow){var node;if(!(node="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);node.node_ops.setattr(node,{mode:4095&mode|-4096&node.mode,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,!0)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(!(node="string"==typeof path?FS.lookupPath(path,{follow:!dontFollow}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,!0)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0)throw new FS.ErrnoError(28);var node;if(!(node="string"==typeof path?FS.lookupPath(path,{follow:!0}).node:path).node_ops.setattr)throw new FS.ErrnoError(63);if(FS.isDir(node.mode))throw new FS.ErrnoError(31);if(!FS.isFile(node.mode))throw new FS.ErrnoError(28);var errCode=FS.nodePermissions(node,"w");if(errCode)throw new FS.ErrnoError(errCode);node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(28);FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var node=FS.lookupPath(path,{follow:!0}).node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(""===path)throw new FS.ErrnoError(44);var node;if(mode=void 0===mode?438:mode,mode=64&(flags="string"==typeof flags?FS.modeStringToFlags(flags):flags)?4095&mode|32768:0,"object"==typeof path)node=path;else{path=PATH.normalize(path);try{node=FS.lookupPath(path,{follow:!(131072&flags)}).node}catch(e){}}var created=!1;if(64&flags)if(node){if(128&flags)throw new FS.ErrnoError(20)}else node=FS.mknod(path,mode,0),created=!0;if(!node)throw new FS.ErrnoError(44);if(FS.isChrdev(node.mode)&&(flags&=-513),65536&flags&&!FS.isDir(node.mode))throw new FS.ErrnoError(54);if(!created){var errCode=FS.mayOpen(node,flags);if(errCode)throw new FS.ErrnoError(errCode)}512&flags&&FS.truncate(node,0),flags&=-131713;var stream=FS.createStream({node,path:FS.getPath(node),flags,seekable:!0,position:0,stream_ops:node.stream_ops,ungotten:[],error:!1},fd_start,fd_end);stream.stream_ops.open&&stream.stream_ops.open(stream),!Module.logReadFiles||1&flags||(FS.readFiles||(FS.readFiles={}),path in FS.readFiles||(FS.readFiles[path]=1,err("FS.trackingDelegate error on read file: "+path)));try{if(FS.trackingDelegate.onOpenFile){var trackingFlags=0;1!=(2097155&flags)&&(trackingFlags|=FS.tracking.openFlags.READ),0!=(2097155&flags)&&(trackingFlags|=FS.tracking.openFlags.WRITE),FS.trackingDelegate.onOpenFile(path,trackingFlags)}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream))throw new FS.ErrnoError(8);stream.getdents&&(stream.getdents=null);try{stream.stream_ops.close&&stream.stream_ops.close(stream)}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return null===stream.fd},llseek:function(stream,offset,whence){if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(!stream.seekable||!stream.stream_ops.llseek)throw new FS.ErrnoError(70);if(0!=whence&&1!=whence&&2!=whence)throw new FS.ErrnoError(28);return stream.position=stream.stream_ops.llseek(stream,offset,whence),stream.ungotten=[],stream.position},read:function(stream,buffer2,offset,length,position){if(offset>>>=0,length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(1==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.read)throw new FS.ErrnoError(28);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;var bytesRead=stream.stream_ops.read(stream,buffer2,offset,length,position);return seeking||(stream.position+=bytesRead),bytesRead},write:function(stream,buffer2,offset,length,position,canOwn){if(offset>>>=0,length<0||position<0)throw new FS.ErrnoError(28);if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(FS.isDir(stream.node.mode))throw new FS.ErrnoError(31);if(!stream.stream_ops.write)throw new FS.ErrnoError(28);stream.seekable&&1024&stream.flags&&FS.llseek(stream,0,2);var seeking=void 0!==position;if(seeking){if(!stream.seekable)throw new FS.ErrnoError(70)}else position=stream.position;var bytesWritten=stream.stream_ops.write(stream,buffer2,offset,length,position,canOwn);seeking||(stream.position+=bytesWritten);try{stream.path&&FS.trackingDelegate.onWriteToFile&&FS.trackingDelegate.onWriteToFile(stream.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream))throw new FS.ErrnoError(8);if(offset<0||length<=0)throw new FS.ErrnoError(28);if(0==(2097155&stream.flags))throw new FS.ErrnoError(8);if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode))throw new FS.ErrnoError(43);if(!stream.stream_ops.allocate)throw new FS.ErrnoError(138);stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,address,length,position,prot,flags){if(address>>>=0,0!=(2&prot)&&0==(2&flags)&&2!=(2097155&stream.flags))throw new FS.ErrnoError(2);if(1==(2097155&stream.flags))throw new FS.ErrnoError(2);if(!stream.stream_ops.mmap)throw new FS.ErrnoError(43);return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:function(stream,buffer2,offset,length,mmapFlags){return offset>>>=0,stream&&stream.stream_ops.msync?stream.stream_ops.msync(stream,buffer2,offset,length,mmapFlags):0},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl)throw new FS.ErrnoError(59);return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){if((opts=opts||{}).flags=opts.flags||0,opts.encoding=opts.encoding||"binary","utf8"!==opts.encoding&&"binary"!==opts.encoding)throw new Error('Invalid encoding type "'+opts.encoding+'"');var ret,stream=FS.open(path,opts.flags),length=FS.stat(path).size,buf=new Uint8Array(length);return FS.read(stream,buf,0,length,0),"utf8"===opts.encoding?ret=UTF8ArrayToString(buf,0):"binary"===opts.encoding&&(ret=buf),FS.close(stream),ret},writeFile:function(path,data,opts){(opts=opts||{}).flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if("string"==typeof data){var buf=new Uint8Array(lengthBytesUTF8(data)+1),actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,void 0,opts.canOwn)}else{if(!ArrayBuffer.isView(data))throw new Error("Unsupported data type");FS.write(stream,data,0,data.byteLength,void 0,opts.canOwn)}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:!0});if(null===lookup.node)throw new FS.ErrnoError(44);if(!FS.isDir(lookup.node.mode))throw new FS.ErrnoError(54);var errCode=FS.nodePermissions(lookup.node,"x");if(errCode)throw new FS.ErrnoError(errCode);FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp"),FS.mkdir("/home"),FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev"),FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer2,offset,length,pos){return length}}),FS.mkdev("/dev/null",FS.makedev(1,3)),TTY.register(FS.makedev(5,0),TTY.default_tty_ops),TTY.register(FS.makedev(6,0),TTY.default_tty1_ops),FS.mkdev("/dev/tty",FS.makedev(5,0)),FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var randomBuffer=new Uint8Array(1);return function(){return crypto.getRandomValues(randomBuffer),randomBuffer[0]}}if(ENVIRONMENT_IS_NODE)try{var crypto_module=require_crypto();return function(){return crypto_module.randomBytes(1)[0]}}catch(e){}return function(){abort("randomDevice")}}();FS.createDevice("/dev","random",random_device),FS.createDevice("/dev","urandom",random_device),FS.mkdir("/dev/shm"),FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd"),FS.mount({mount:function(){var node=FS.createNode(proc_self,"fd",16895,73);return node.node_ops={lookup:function(parent,name2){var fd=+name2,stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};return ret.parent=ret,ret}},node}},{},"/proc/self/fd")},createStandardStreams:function(){Module.stdin?FS.createDevice("/dev","stdin",Module.stdin):FS.symlink("/dev/tty","/dev/stdin"),Module.stdout?FS.createDevice("/dev","stdout",null,Module.stdout):FS.symlink("/dev/tty","/dev/stdout"),Module.stderr?FS.createDevice("/dev","stderr",null,Module.stderr):FS.symlink("/dev/tty1","/dev/stderr"),FS.open("/dev/stdin",0),FS.open("/dev/stdout",1),FS.open("/dev/stderr",1)},ensureErrnoError:function(){FS.ErrnoError||(FS.ErrnoError=function(errno,node){this.node=node,this.setErrno=function(errno2){this.errno=errno2},this.setErrno(errno),this.message="FS error"},FS.ErrnoError.prototype=new Error,FS.ErrnoError.prototype.constructor=FS.ErrnoError,[44].forEach((function(code){FS.genericErrors[code]=new FS.ErrnoError(code),FS.genericErrors[code].stack="<generic error, no stack>"})))},staticInit:function(){FS.ensureErrnoError(),FS.nameTable=new Array(4096),FS.mount(MEMFS,{},"/"),FS.createDefaultDirectories(),FS.createDefaultDevices(),FS.createSpecialDirectories(),FS.filesystems={MEMFS}},init:function(input,output,error){FS.init.initialized=!0,FS.ensureErrnoError(),Module.stdin=input||Module.stdin,Module.stdout=output||Module.stdout,Module.stderr=error||Module.stderr,FS.createStandardStreams()},quit:function(){FS.init.initialized=!1;var fflush=Module._fflush;fflush&&fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];stream&&FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;return canRead&&(mode|=365),canWrite&&(mode|=146),mode},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);return ret.exists?ret.object:null},analyzePath:function(path,dontResolveLastLink){try{path=(lookup=FS.lookupPath(path,{follow:!dontResolveLastLink})).path}catch(e){}var ret={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:!0});ret.parentExists=!0,ret.parentPath=lookup.path,ret.parentObject=lookup.node,ret.name=PATH.basename(path),lookup=FS.lookupPath(path,{follow:!dontResolveLastLink}),ret.exists=!0,ret.path=lookup.path,ret.object=lookup.node,ret.name=lookup.node.name,ret.isRoot="/"===lookup.path}catch(e){ret.error=e.errno}return ret},createPath:function(parent,path,canRead,canWrite){parent="string"==typeof parent?parent:FS.getPath(parent);for(var parts=path.split("/").reverse();parts.length;){var part=parts.pop();if(part){var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}}return current},createFile:function(parent,name2,properties,canRead,canWrite){var path=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name2),mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name2,data,canRead,canWrite,canOwn){var path=name2?PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name2):parent,mode=FS.getMode(canRead,canWrite),node=FS.create(path,mode);if(data){if("string"==typeof data){for(var arr=new Array(data.length),i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,146|mode);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn),FS.close(stream),FS.chmod(node,mode)}return node},createDevice:function(parent,name2,input,output){var path=PATH.join2("string"==typeof parent?parent:FS.getPath(parent),name2),mode=FS.getMode(!!input,!!output);FS.createDevice.major||(FS.createDevice.major=64);var dev=FS.makedev(FS.createDevice.major++,0);return FS.registerDevice(dev,{open:function(stream){stream.seekable=!1},close:function(stream){output&&output.buffer&&output.buffer.length&&output(10)},read:function(stream,buffer2,offset,length,pos){for(var bytesRead=0,i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(void 0===result&&0===bytesRead)throw new FS.ErrnoError(6);if(null==result)break;bytesRead++,buffer2[offset+i]=result}return bytesRead&&(stream.node.timestamp=Date.now()),bytesRead},write:function(stream,buffer2,offset,length,pos){for(var i=0;i<length;i++)try{output(buffer2[offset+i])}catch(e){throw new FS.ErrnoError(29)}return length&&(stream.node.timestamp=Date.now()),i}}),FS.mkdev(path,mode,dev)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!read_)throw new Error("Cannot load without read() or XMLHttpRequest.");try{obj.contents=intArrayFromString(read_(obj.url),!0),obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}},createLazyFile:function(parent,name2,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(idx){if(!(idx>this.length-1||idx<0)){var chunkOffset=idx%this.chunkSize,chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]}},LazyUint8Array.prototype.setDataGetter=function(getter){this.getter=getter},LazyUint8Array.prototype.cacheLength=function(){var xhr=new XMLHttpRequest;if(xhr.open("HEAD",url,!1),xhr.send(null),!(xhr.status>=200&&xhr.status<300||304===xhr.status))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var header,datalength=Number(xhr.getResponseHeader("Content-length")),hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&"bytes"===header,usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&"gzip"===header,chunkSize=1048576;hasByteServing||(chunkSize=datalength);var lazyArray2=this;lazyArray2.setDataGetter((function(chunkNum){var start=chunkNum*chunkSize,end=(chunkNum+1)*chunkSize-1;if(end=Math.min(end,datalength-1),void 0===lazyArray2.chunks[chunkNum]&&(lazyArray2.chunks[chunkNum]=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr2=new XMLHttpRequest;if(xhr2.open("GET",url,!1),datalength!==chunkSize&&xhr2.setRequestHeader("Range","bytes="+from+"-"+to),"undefined"!=typeof Uint8Array&&(xhr2.responseType="arraybuffer"),xhr2.overrideMimeType&&xhr2.overrideMimeType("text/plain; charset=x-user-defined"),xhr2.send(null),!(xhr2.status>=200&&xhr2.status<300||304===xhr2.status))throw new Error("Couldn't load "+url+". Status: "+xhr2.status);return void 0!==xhr2.response?new Uint8Array(xhr2.response||[]):intArrayFromString(xhr2.responseText||"",!0)}(start,end)),void 0===lazyArray2.chunks[chunkNum])throw new Error("doXHR failed!");return lazyArray2.chunks[chunkNum]})),!usesGzip&&datalength||(chunkSize=datalength=1,datalength=this.getter(0).length,chunkSize=datalength,out("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=datalength,this._chunkSize=chunkSize,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var properties={isDevice:!1,contents:lazyArray}}else properties={isDevice:!1,url};var node=FS.createFile(parent,name2,properties,canRead,canWrite);properties.contents?node.contents=properties.contents:properties.url&&(node.contents=null,node.url=properties.url),Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};return Object.keys(node.stream_ops).forEach((function(key2){var fn=node.stream_ops[key2];stream_ops[key2]=function(){return FS.forceLoadFile(node),fn.apply(null,arguments)}})),stream_ops.read=function(stream,buffer2,offset,length,position){FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice)for(var i=0;i<size;i++)buffer2[offset+i]=contents[position+i];else for(i=0;i<size;i++)buffer2[offset+i]=contents.get(position+i);return size},node.stream_ops=stream_ops,node},createPreloadedFile:function(parent,name2,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name2?PATH_FS.resolve(PATH.join2(parent,name2)):parent;function processData(byteArray){function finish(byteArray2){preFinish&&preFinish(),dontCreateFile||FS.createDataFile(parent,name2,byteArray2,canRead,canWrite,canOwn),onload&&onload(),removeRunDependency()}var handled=!1;Module.preloadPlugins.forEach((function(plugin){handled||plugin.canHandle(fullname)&&(plugin.handle(byteArray,fullname,finish,(function(){onerror&&onerror(),removeRunDependency()})),handled=!0)})),handled||finish(byteArray)}addRunDependency(),"string"==typeof url?function(url,onload,onerror,noRunDep){var dep=noRunDep?"":"al "+url;readAsync(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).'),onload(new Uint8Array(arrayBuffer)),dep&&removeRunDependency()}),(function(event){if(!onerror)throw'Loading data file "'+url+'" failed.';onerror()})),dep&&addRunDependency()}(url,(function(byteArray){processData(byteArray)}),onerror):processData(url)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){},onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function(){out("creating db"),openRequest.result.createObjectStore(FS.DB_STORE_NAME)},openRequest.onsuccess=function(){var transaction=openRequest.result.transaction([FS.DB_STORE_NAME],"readwrite"),files=transaction.objectStore(FS.DB_STORE_NAME),ok=0,fail=0,total=paths.length;function finish(){0==fail?onload():onerror()}paths.forEach((function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function(){++ok+fail==total&&finish()},putRequest.onerror=function(){fail++,ok+fail==total&&finish()}})),transaction.onerror=onerror},openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){},onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror,openRequest.onsuccess=function(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){return void onerror(e)}var files=transaction.objectStore(FS.DB_STORE_NAME),ok=0,fail=0,total=paths.length;function finish(){0==fail?onload():onerror()}paths.forEach((function(path){var getRequest=files.get(path);getRequest.onsuccess=function(){FS.analyzePath(path).exists&&FS.unlink(path),FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,!0,!0,!0),++ok+fail==total&&finish()},getRequest.onerror=function(){fail++,ok+fail==total&&finish()}})),transaction.onerror=onerror},openRequest.onerror=onerror}},SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path,allowEmpty){if("/"===path[0])return path;var dir;if(-100===dirfd)dir=FS.cwd();else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}if(0==path.length){if(!allowEmpty)throw new FS.ErrnoError(44);return dir}return PATH.join2(dir,path)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}return HEAP32[buf>>>2]=stat.dev,HEAP32[buf+4>>>2]=0,HEAP32[buf+8>>>2]=stat.ino,HEAP32[buf+12>>>2]=stat.mode,HEAP32[buf+16>>>2]=stat.nlink,HEAP32[buf+20>>>2]=stat.uid,HEAP32[buf+24>>>2]=stat.gid,HEAP32[buf+28>>>2]=stat.rdev,HEAP32[buf+32>>>2]=0,tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>>2]=tempI64[0],HEAP32[buf+44>>>2]=tempI64[1],HEAP32[buf+48>>>2]=4096,HEAP32[buf+52>>>2]=stat.blocks,HEAP32[buf+56>>>2]=stat.atime.getTime()/1e3|0,HEAP32[buf+60>>>2]=0,HEAP32[buf+64>>>2]=stat.mtime.getTime()/1e3|0,HEAP32[buf+68>>>2]=0,HEAP32[buf+72>>>2]=stat.ctime.getTime()/1e3|0,HEAP32[buf+76>>>2]=0,tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>>2]=tempI64[0],HEAP32[buf+84>>>2]=tempI64[1],0},doMsync:function(addr,stream,len,flags,offset){var buffer2=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer2,offset,len,flags)},doMkdir:function(path,mode){return"/"===(path=PATH.normalize(path))[path.length-1]&&(path=path.substr(0,path.length-1)),FS.mkdir(path,mode,0),0},doMknod:function(path,mode,dev){switch(61440&mode){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}return FS.mknod(path,mode,dev),0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path),len=Math.min(bufsize,lengthBytesUTF8(ret)),endChar=HEAP8[buf+len>>>0];return stringToUTF8(ret,buf,bufsize+1),HEAP8[buf+len>>>0]=endChar,len},doAccess:function(path,amode){if(-8&amode)return-28;var node;if(!(node=FS.lookupPath(path,{follow:!0}).node))return-44;var perms="";return 4&amode&&(perms+="r"),2&amode&&(perms+="w"),1&amode&&(perms+="x"),perms&&FS.nodePermissions(node,perms)?-2:0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);return suggest&&FS.close(suggest),FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAP32[iov+8*i>>>2],len=HEAP32[iov+(8*i+4)>>>2],curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;if(ret+=curr,curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){for(var ret=0,i=0;i<iovcnt;i++){var ptr=HEAP32[iov+8*i>>>2],len=HEAP32[iov+(8*i+4)>>>2],curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:void 0,get:function(){return SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>>2]},getStr:function(ptr){return UTF8ToString(ptr)},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}},tupleRegistrations={};function runDestructors(destructors){for(;destructors.length;){var ptr=destructors.pop();destructors.pop()(ptr)}}function simpleReadValueFromPointer(pointer){return this.fromWireType(HEAPU32[pointer>>>2])}var awaitingDependencies={},registeredTypes={},typeDependencies={},char_0=48,char_9=57;function makeLegalFunctionName(name2){if(void 0===name2)return"_unknown";var f=(name2=name2.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return f>=char_0&&f<=char_9?"_"+name2:name2}function createNamedFunction(name2,body){return name2=makeLegalFunctionName(name2),new Function("body","return function "+name2+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,(function(message){this.name=errorName,this.message=message;var stack=new Error(message).stack;void 0!==stack&&(this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,""))}));return errorClass.prototype=Object.create(baseErrorType.prototype),errorClass.prototype.constructor=errorClass,errorClass.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},errorClass}var InternalError=void 0;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){function onComplete(typeConverters2){var myTypeConverters=getTypeConverters(typeConverters2);myTypeConverters.length!==myTypes.length&&throwInternalError("Mismatched type converter count");for(var i=0;i<myTypes.length;++i)registerType(myTypes[i],myTypeConverters[i])}myTypes.forEach((function(type){typeDependencies[type]=dependentTypes}));var typeConverters=new Array(dependentTypes.length),unregisteredTypes=[],registered=0;dependentTypes.forEach((function(dt,i){registeredTypes.hasOwnProperty(dt)?typeConverters[i]=registeredTypes[dt]:(unregisteredTypes.push(dt),awaitingDependencies.hasOwnProperty(dt)||(awaitingDependencies[dt]=[]),awaitingDependencies[dt].push((function(){typeConverters[i]=registeredTypes[dt],++registered===unregisteredTypes.length&&onComplete(typeConverters)})))})),0===unregisteredTypes.length&&onComplete(typeConverters)}var structRegistrations={};function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}var embind_charCodes=void 0;function readLatin1String(ptr){for(var ret="",c=ptr;HEAPU8[c>>>0];)ret+=embind_charCodes[HEAPU8[c++>>>0]];return ret}var BindingError=void 0;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options){if(options=options||{},!("argPackAdvance"in registeredInstance))throw new TypeError("registerType registeredInstance requires argPackAdvance");var name2=registeredInstance.name;if(rawType||throwBindingError('type "'+name2+'" must have a positive integer typeid pointer'),registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations)return;throwBindingError("Cannot register type '"+name2+"' twice")}if(registeredTypes[rawType]=registeredInstance,delete typeDependencies[rawType],awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType],callbacks.forEach((function(cb){cb()}))}}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle))return!1;if(!(other instanceof ClassHandle))return!1;for(var leftClass=this.$$.ptrType.registeredClass,left=this.$$.ptr,rightClass=other.$$.ptrType.registeredClass,right=other.$$.ptr;leftClass.baseClass;)left=leftClass.upcast(left),leftClass=leftClass.baseClass;for(;rightClass.baseClass;)right=rightClass.upcast(right),rightClass=rightClass.baseClass;return leftClass===rightClass&&left===right}function throwInstanceAlreadyDeleted(obj){throwBindingError(obj.$$.ptrType.registeredClass.name+" instance already deleted")}var finalizationGroup=!1;function detachFinalizer(handle){}function releaseClassHandle($$){$$.count.value-=1,0===$$.count.value&&function($$){$$.smartPtr?$$.smartPtrType.rawDestructor($$.smartPtr):$$.ptrType.registeredClass.rawDestructor($$.ptr)}($$)}function attachFinalizer(handle){return"undefined"==typeof FinalizationGroup?(attachFinalizer=function(handle2){return handle2},handle):(finalizationGroup=new FinalizationGroup((function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;$$.ptr&&releaseClassHandle($$)}})),detachFinalizer=function(handle2){finalizationGroup.unregister(handle2.$$)},(attachFinalizer=function(handle2){return finalizationGroup.register(handle2,handle2.$$,handle2.$$),handle2})(handle))}function ClassHandle_clone(){if(this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var o,clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:(o=this.$$,{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType})}}));return clone.$$.count.value+=1,clone.$$.deleteScheduled=!1,clone}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=void 0,deletionQueue=[];function flushPendingDeletes(){for(;deletionQueue.length;){var obj=deletionQueue.pop();obj.$$.deleteScheduled=!1,obj.delete()}}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),deletionQueue.push(this),1===deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(void 0===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){return proto[methodName].overloadTable.hasOwnProperty(arguments.length)||throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!"),proto[methodName].overloadTable[arguments.length].apply(this,arguments)},proto[methodName].overloadTable=[],proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name2,value,numArguments){Module.hasOwnProperty(name2)?((void 0===numArguments||void 0!==Module[name2].overloadTable&&void 0!==Module[name2].overloadTable[numArguments])&&throwBindingError("Cannot register public name '"+name2+"' twice"),ensureOverloadTable(Module,name2,name2),Module.hasOwnProperty(numArguments)&&throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!"),Module[name2].overloadTable[numArguments]=value):(Module[name2]=value,void 0!==numArguments&&(Module[name2].numArguments=numArguments))}function RegisteredClass(name2,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name2,this.constructor=constructor,this.instancePrototype=instancePrototype,this.rawDestructor=rawDestructor,this.baseClass=baseClass,this.getActualType=getActualType,this.upcast=upcast,this.downcast=downcast,this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){for(;ptrClass!==desiredClass;)ptrClass.upcast||throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name),ptr=ptrClass.upcast(ptr),ptrClass=ptrClass.baseClass;return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function genericPointerToWireType(destructors,handle){var ptr;if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(ptr=this.rawConstructor(),null!==destructors&&destructors.push(this.rawDestructor,ptr),ptr):0;handle.$$||throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&handle.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;if(ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass),this.isSmartPointer)switch(void 0===handle.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:handle.$$.smartPtrType===this?ptr=handle.$$.smartPtr:throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this)ptr=handle.$$.smartPtr;else{var clonedHandle=handle.clone();ptr=this.rawShare(ptr,__emval_register((function(){clonedHandle.delete()}))),null!==destructors&&destructors.push(this.rawDestructor,ptr)}break;default:throwBindingError("Unsupporting sharing policy")}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(null===handle)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;handle.$$||throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name),handle.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),handle.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name);var handleClass=handle.$$.ptrType.registeredClass;return upcastPointer(handle.$$.ptr,handleClass,this.registeredClass)}function RegisteredPointer_getPointee(ptr){return this.rawGetPointee&&(ptr=this.rawGetPointee(ptr)),ptr}function RegisteredPointer_destructor(ptr){this.rawDestructor&&this.rawDestructor(ptr)}function RegisteredPointer_deleteObject(handle){null!==handle&&handle.delete()}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass)return ptr;if(void 0===desiredClass.baseClass)return null;var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);return null===rv?null:desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances)registeredInstances.hasOwnProperty(k)&&rv.push(registeredInstances[k]);return rv}function setDelayFunction(fn){delayFunction=fn,deletionQueue.length&&delayFunction&&delayFunction(flushPendingDeletes)}var registeredInstances={};function getInheritedInstance(class_,ptr){return ptr=function(class_,ptr){for(void 0===ptr&&throwBindingError("ptr should not be undefined");class_.baseClass;)ptr=class_.upcast(ptr),class_=class_.baseClass;return ptr}(class_,ptr),registeredInstances[ptr]}function makeClassHandle(prototype,record){return record.ptrType&&record.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!record.smartPtrType!=!!record.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),record.count={value:1},attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer)return this.destructor(ptr),null;var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(void 0!==registeredInstance){if(0===registeredInstance.$$.count.value)return registeredInstance.$$.ptr=rawPointer,registeredInstance.$$.smartPtr=ptr,registeredInstance.clone();var rv=registeredInstance.clone();return this.destructor(ptr),rv}function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr})}var toType,actualType=this.registeredClass.getActualType(rawPointer),registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord)return makeDefaultHandle.call(this);toType=this.isConst?registeredPointerRecord.constPointerType:registeredPointerRecord.pointerType;var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);return null===dp?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr}):makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}function RegisteredPointer(name2,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name2,this.registeredClass=registeredClass,this.isReference=isReference,this.isConst=isConst,this.isSmartPointer=isSmartPointer,this.pointeeType=pointeeType,this.sharingPolicy=sharingPolicy,this.rawGetPointee=rawGetPointee,this.rawConstructor=rawConstructor,this.rawShare=rawShare,this.rawDestructor=rawDestructor,isSmartPointer||void 0!==registeredClass.baseClass?this.toWireType=genericPointerToWireType:isConst?(this.toWireType=constNoSmartPtrRawPointerToWireType,this.destructorFunction=null):(this.toWireType=nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function replacePublicSymbol(name2,value,numArguments){Module.hasOwnProperty(name2)||throwInternalError("Replacing nonexistant public symbol"),void 0!==Module[name2].overloadTable&&void 0!==numArguments?Module[name2].overloadTable[numArguments]=value:(Module[name2]=value,Module[name2].argCount=numArguments)}function dynCall(sig,ptr,args){return sig.includes("j")?function(sig,ptr,args){var f=Module["dynCall_"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}(sig,ptr,args):wasmTable.get(ptr).apply(null,args)}function embind__requireFunction(signature,rawFunction){var sig,ptr,argCache,fp=(signature=readLatin1String(signature)).includes("j")?(sig=signature,ptr=rawFunction,argCache=[],function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++)argCache[i]=arguments[i];return dynCall(sig,ptr,argCache)}):wasmTable.get(rawFunction);return"function"!=typeof fp&&throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction),fp}var UnboundTypeError=void 0;function getTypeName(type){var ptr=___getTypeName(type),rv=readLatin1String(ptr);return _free(ptr),rv}function throwUnboundTypeError(message,types){var unboundTypes=[],seen={};throw types.forEach((function visit(type){seen[type]||registeredTypes[type]||(typeDependencies[type]?typeDependencies[type].forEach(visit):(unboundTypes.push(type),seen[type]=!0))})),new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function heap32VectorToArray(count,firstElement){for(var array=[],i=0;i<count;i++)array.push(HEAP32[(firstElement>>2)+i>>>0]);return array}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;argCount<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var isClassMethodFunc=null!==argTypes[1]&&null!==classType,needsDestructorStack=!1,i=1;i<argTypes.length;++i)if(null!==argTypes[i]&&void 0===argTypes[i].destructorFunction){needsDestructorStack=!0;break}var returns="void"!==argTypes[0].name,argsList="",argsListWired="";for(i=0;i<argCount-2;++i)argsList+=(0!==i?", ":"")+"arg"+i,argsListWired+=(0!==i?", ":"")+"arg"+i+"Wired";var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\nif (arguments.length !== "+(argCount-2)+") {\nthrowBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n}\n";needsDestructorStack&&(invokerFnBody+="var destructors = [];\n");var dtorStack=needsDestructorStack?"destructors":"null",args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];for(isClassMethodFunc&&(invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"),i=0;i<argCount-2;++i)invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n",args1.push("argType"+i),args2.push(argTypes[i+2]);if(isClassMethodFunc&&(argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired),invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n",needsDestructorStack)invokerFnBody+="runDestructors(destructors);\n";else for(i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=1===i?"thisWired":"arg"+(i-2)+"Wired";null!==argTypes[i].destructorFunction&&(invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n",args1.push(paramName+"_dtor"),args2.push(argTypes[i].destructorFunction))}return returns&&(invokerFnBody+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),invokerFnBody+="}\n",args1.push(invokerFnBody),function(constructor,argumentList){if(!(constructor instanceof Function))throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function");var dummy=createNamedFunction(constructor.name||"unknownFunctionName",(function(){}));dummy.prototype=constructor.prototype;var obj=new dummy,r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}(Function,args1).apply(null,args2)}var emval_free_list=[],emval_handle_array=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function __emval_decref(handle){handle>4&&0==--emval_handle_array[handle].refcount&&(emval_handle_array[handle]=void 0,emval_free_list.push(handle))}function count_emval_handles(){for(var count=0,i=5;i<emval_handle_array.length;++i)void 0!==emval_handle_array[i]&&++count;return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i)if(void 0!==emval_handle_array[i])return emval_handle_array[i];return null}function __emval_register(value){switch(value){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;return emval_handle_array[handle]={refcount:1,value},handle}}function enumReadValueFromPointer(name2,shift,signed){switch(shift){case 0:return function(pointer){var heap=signed?HEAP8:HEAPU8;return this.fromWireType(heap[pointer>>>0])};case 1:return function(pointer){var heap=signed?HEAP16:HEAPU16;return this.fromWireType(heap[pointer>>>1])};case 2:return function(pointer){var heap=signed?HEAP32:HEAPU32;return this.fromWireType(heap[pointer>>>2])};default:throw new TypeError("Unknown integer type: "+name2)}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];return void 0===impl&&throwBindingError(humanName+" has unknown type "+getTypeName(rawType)),impl}function _embind_repr(v){if(null===v)return"null";var t=typeof v;return"object"===t||"array"===t||"function"===t?v.toString():""+v}function floatReadValueFromPointer(name2,shift){switch(shift){case 2:return function(pointer){return this.fromWireType(HEAPF32[pointer>>>2])};case 3:return function(pointer){return this.fromWireType(HEAPF64[pointer>>>3])};default:throw new TypeError("Unknown float type: "+name2)}}function integerReadValueFromPointer(name2,shift,signed){switch(shift){case 0:return signed?function(pointer){return HEAP8[pointer>>>0]}:function(pointer){return HEAPU8[pointer>>>0]};case 1:return signed?function(pointer){return HEAP16[pointer>>>1]}:function(pointer){return HEAPU16[pointer>>>1]};case 2:return signed?function(pointer){return HEAP32[pointer>>>2]}:function(pointer){return HEAPU32[pointer>>>2]};default:throw new TypeError("Unknown integer type: "+name2)}}function requireHandle(handle){return handle||throwBindingError("Cannot use deleted val. handle = "+handle),emval_handle_array[handle].value}var _emscripten_get_now,emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];return void 0===symbol?readLatin1String(address):symbol}function emval_get_global(){return"object"==typeof globalThis?globalThis:Function("return this")()}_emscripten_get_now=ENVIRONMENT_IS_NODE?function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:function(){return performance.now()};var _emscripten_get_now_is_monotonic=!0;function emscripten_realloc_buffer(size){try{return wasmMemory.grow(size-buffer.byteLength+65535>>>16),updateGlobalBufferAndViews(wasmMemory.buffer),1}catch(e){}}var ENV={};function getEnvStrings(){if(!getEnvStrings.strings){var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:thisProgram||"./this.program"};for(var x in ENV)void 0===ENV[x]?delete env[x]:env[x]=ENV[x];var strings=[];for(var x in env)strings.push(x+"="+env[x]);getEnvStrings.strings=strings}return getEnvStrings.strings}function __isLeapYear(year){return year%4==0&&(year%100!=0||year%400==0)}function __arraySum(array,index){for(var sum=0,i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31],__MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){for(var newDate=new Date(date.getTime());days>0;){var leap=__isLeapYear(newDate.getFullYear()),currentMonth=newDate.getMonth(),daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(!(days>daysInCurrentMonth-newDate.getDate()))return newDate.setDate(newDate.getDate()+days),newDate;days-=daysInCurrentMonth-newDate.getDate()+1,newDate.setDate(1),currentMonth<11?newDate.setMonth(currentMonth+1):(newDate.setMonth(0),newDate.setFullYear(newDate.getFullYear()+1))}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>>2],date={tm_sec:HEAP32[tm>>>2],tm_min:HEAP32[tm+4>>>2],tm_hour:HEAP32[tm+8>>>2],tm_mday:HEAP32[tm+12>>>2],tm_mon:HEAP32[tm+16>>>2],tm_year:HEAP32[tm+20>>>2],tm_wday:HEAP32[tm+24>>>2],tm_yday:HEAP32[tm+28>>>2],tm_isdst:HEAP32[tm+32>>>2],tm_gmtoff:HEAP32[tm+36>>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""},pattern=UTF8ToString(format),EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1)pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){for(var str="number"==typeof value?value.toString():value||"";str.length<digits;)str=character[0]+str;return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;return 0===(compare=sgn(date1.getFullYear()-date2.getFullYear()))&&0===(compare=sgn(date1.getMonth()-date2.getMonth()))&&(compare=sgn(date1.getDate()-date2.getDate())),compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date2){var thisDate=__addDays(new Date(date2.tm_year+1900,0,1),date2.tm_yday),janFourthThisYear=new Date(thisDate.getFullYear(),0,4),janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4),firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear),firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);return compareByDay(firstWeekStartThisYear,thisDate)<=0?compareByDay(firstWeekStartNextYear,thisDate)<=0?thisDate.getFullYear()+1:thisDate.getFullYear():thisDate.getFullYear()-1}var EXPANSION_RULES_2={"%a":function(date2){return WEEKDAYS[date2.tm_wday].substring(0,3)},"%A":function(date2){return WEEKDAYS[date2.tm_wday]},"%b":function(date2){return MONTHS[date2.tm_mon].substring(0,3)},"%B":function(date2){return MONTHS[date2.tm_mon]},"%C":function(date2){return leadingNulls((date2.tm_year+1900)/100|0,2)},"%d":function(date2){return leadingNulls(date2.tm_mday,2)},"%e":function(date2){return leadingSomething(date2.tm_mday,2," ")},"%g":function(date2){return getWeekBasedYear(date2).toString().substring(2)},"%G":function(date2){return getWeekBasedYear(date2)},"%H":function(date2){return leadingNulls(date2.tm_hour,2)},"%I":function(date2){var twelveHour=date2.tm_hour;return 0==twelveHour?twelveHour=12:twelveHour>12&&(twelveHour-=12),leadingNulls(twelveHour,2)},"%j":function(date2){return leadingNulls(date2.tm_mday+__arraySum(__isLeapYear(date2.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date2.tm_mon-1),3)},"%m":function(date2){return leadingNulls(date2.tm_mon+1,2)},"%M":function(date2){return leadingNulls(date2.tm_min,2)},"%n":function(){return"\n"},"%p":function(date2){return date2.tm_hour>=0&&date2.tm_hour<12?"AM":"PM"},"%S":function(date2){return leadingNulls(date2.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date2){return date2.tm_wday||7},"%U":function(date2){var janFirst=new Date(date2.tm_year+1900,0,1),firstSunday=0===janFirst.getDay()?janFirst:__addDays(janFirst,7-janFirst.getDay()),endDate=new Date(date2.tm_year+1900,date2.tm_mon,date2.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31,days=31-firstSunday.getDate()+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return 0===compareByDay(firstSunday,janFirst)?"01":"00"},"%V":function(date2){var daysDifference,janFourthThisYear=new Date(date2.tm_year+1900,0,4),janFourthNextYear=new Date(date2.tm_year+1901,0,4),firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear),firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear),endDate=__addDays(new Date(date2.tm_year+1900,0,1),date2.tm_yday);return compareByDay(endDate,firstWeekStartThisYear)<0?"53":compareByDay(firstWeekStartNextYear,endDate)<=0?"01":(daysDifference=firstWeekStartThisYear.getFullYear()<date2.tm_year+1900?date2.tm_yday+32-firstWeekStartThisYear.getDate():date2.tm_yday+1-firstWeekStartThisYear.getDate(),leadingNulls(Math.ceil(daysDifference/7),2))},"%w":function(date2){return date2.tm_wday},"%W":function(date2){var janFirst=new Date(date2.tm_year,0,1),firstMonday=1===janFirst.getDay()?janFirst:__addDays(janFirst,0===janFirst.getDay()?1:7-janFirst.getDay()+1),endDate=new Date(date2.tm_year+1900,date2.tm_mon,date2.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31,days=31-firstMonday.getDate()+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return 0===compareByDay(firstMonday,janFirst)?"01":"00"},"%y":function(date2){return(date2.tm_year+1900).toString().substring(2)},"%Y":function(date2){return date2.tm_year+1900},"%z":function(date2){var off=date2.tm_gmtoff,ahead=off>=0;return off=(off=Math.abs(off)/60)/60*100+off%60,(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date2){return date2.tm_zone},"%%":function(){return"%"}};for(var rule in EXPANSION_RULES_2)pattern.includes(rule)&&(pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date)));var array,buffer2,bytes=intArrayFromString(pattern,!1);return bytes.length>maxsize?0:(array=bytes,buffer2=s,HEAP8.set(array,buffer2>>>0),bytes.length-1)}var FSNode=function(parent,name2,mode,rdev){parent||(parent=this),this.parent=parent,this.mount=parent.mount,this.mounted=null,this.id=FS.nextInode++,this.name=name2,this.mode=mode,this.node_ops={},this.stream_ops={},this.rdev=rdev};function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1,u8array=new Array(len),numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);return dontAddNull&&(u8array.length=numBytesWritten),u8array}Object.defineProperties(FSNode.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(val){val?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(val){val?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}}),FS.FSNode=FSNode,FS.staticInit(),Module.FS_createPath=FS.createPath,Module.FS_createDataFile=FS.createDataFile,Module.FS_createPreloadedFile=FS.createPreloadedFile,Module.FS_createLazyFile=FS.createLazyFile,Module.FS_createDevice=FS.createDevice,Module.FS_unlink=FS.unlink,InternalError=Module.InternalError=extendError(Error,"InternalError"),function(){for(var codes=new Array(256),i=0;i<256;++i)codes[i]=String.fromCharCode(i);embind_charCodes=codes}(),BindingError=Module.BindingError=extendError(Error,"BindingError"),ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater,RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType,Module.getInheritedInstanceCount=getInheritedInstanceCount,Module.getLiveInheritedInstances=getLiveInheritedInstances,Module.flushPendingDeletes=flushPendingDeletes,Module.setDelayFunction=setDelayFunction,UnboundTypeError=Module.UnboundTypeError=extendError(Error,"UnboundTypeError"),Module.count_emval_handles=count_emval_handles,Module.get_first_emval=get_first_emval;var calledRun,asmLibraryArg={y:function(condition,filename,line,func){abort("Assertion failed: "+UTF8ToString(condition)+", at: "+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])},x:function(size){return _malloc(size+16)+16},w:function(ptr,type,destructor){throw new ExceptionInfo(ptr).init(type,destructor),ptr},A:function(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:return(arg=SYSCALLS.get())<0?-28:FS.open(stream.path,stream.flags,0,arg).fd;case 1:case 2:case 13:case 14:return 0;case 3:return stream.flags;case 4:var arg=SYSCALLS.get();return stream.flags|=arg,0;case 12:return arg=SYSCALLS.get(),HEAP16[arg+0>>>1]=2,0;case 16:case 8:default:return-28;case 9:return setErrNo(28),-1}}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}},O:function(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return stream.tty?0:-59;case 21519:if(!stream.tty)return-59;var argp=SYSCALLS.get();return HEAP32[argp>>>2]=0,0;case 21520:return stream.tty?-28:-59;case 21531:return argp=SYSCALLS.get(),FS.ioctl(stream,op,argp);default:abort("bad ioctl syscall "+op)}}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}},P:function(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path),mode=varargs?SYSCALLS.get():0;return FS.open(pathname,flags,mode).fd}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}},Z:function(rawTupleType){var reg=tupleRegistrations[rawTupleType];delete tupleRegistrations[rawTupleType];var elements=reg.elements,elementsLength=elements.length,elementTypes=elements.map((function(elt){return elt.getterReturnType})).concat(elements.map((function(elt){return elt.setterArgumentType}))),rawConstructor=reg.rawConstructor,rawDestructor=reg.rawDestructor;whenDependentTypesAreResolved([rawTupleType],elementTypes,(function(elementTypes2){return elements.forEach((function(elt,i){var getterReturnType=elementTypes2[i],getter=elt.getter,getterContext=elt.getterContext,setterArgumentType=elementTypes2[i+elementsLength],setter=elt.setter,setterContext=elt.setterContext;elt.read=function(ptr){return getterReturnType.fromWireType(getter(getterContext,ptr))},elt.write=function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}})),[{name:reg.name,fromWireType:function(ptr){for(var rv=new Array(elementsLength),i=0;i<elementsLength;++i)rv[i]=elements[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){if(elementsLength!==o.length)throw new TypeError("Incorrect number of tuple elements for "+reg.name+": expected="+elementsLength+", actual="+o.length);for(var ptr=rawConstructor(),i=0;i<elementsLength;++i)elements[i].write(ptr,o[i]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]}))},o:function(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor,rawDestructor=reg.rawDestructor,fieldRecords=reg.fields;whenDependentTypesAreResolved([structType],fieldRecords.map((function(field){return field.getterReturnType})).concat(fieldRecords.map((function(field){return field.setterArgumentType}))),(function(fieldTypes2){var fields={};return fieldRecords.forEach((function(field,i){var fieldName=field.fieldName,getterReturnType=fieldTypes2[i],getter=field.getter,getterContext=field.getterContext,setterArgumentType=fieldTypes2[i+fieldRecords.length],setter=field.setter,setterContext=field.setterContext;fields[fieldName]={read:function(ptr){return getterReturnType.fromWireType(getter(getterContext,ptr))},write:function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType.toWireType(destructors,o)),runDestructors(destructors)}}})),[{name:reg.name,fromWireType:function(ptr){var rv={};for(var i in fields)rv[i]=fields[i].read(ptr);return rawDestructor(ptr),rv},toWireType:function(destructors,o){for(var fieldName in fields)if(!(fieldName in o))throw new TypeError('Missing field:  "'+fieldName+'"');var ptr=rawConstructor();for(fieldName in fields)fields[fieldName].write(ptr,o[fieldName]);return null!==destructors&&destructors.push(rawDestructor,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:rawDestructor}]}))},J:function(primitiveType,name2,size,minRange,maxRange){},W:function(rawType,name2,size,trueValue,falseValue){var shift=getShiftFromSize(size);registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:8,readValueFromPointer:function(pointer){var heap;if(1===size)heap=HEAP8;else if(2===size)heap=HEAP16;else{if(4!==size)throw new TypeError("Unknown boolean type size: "+name2);heap=HEAP32}return this.fromWireType(heap[pointer>>>shift])},destructorFunction:null})},r:function(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name2,destructorSignature,rawDestructor){name2=readLatin1String(name2),getActualType=embind__requireFunction(getActualTypeSignature,getActualType),upcast&&(upcast=embind__requireFunction(upcastSignature,upcast)),downcast&&(downcast=embind__requireFunction(downcastSignature,downcast)),rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name2);exposePublicSymbol(legalFunctionName,(function(){throwUnboundTypeError("Cannot construct "+name2+" due to unbound types",[baseClassRawType])})),whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],(function(base){var baseClass,basePrototype;base=base[0],basePrototype=baseClassRawType?(baseClass=base.registeredClass).instancePrototype:ClassHandle.prototype;var constructor=createNamedFunction(legalFunctionName,(function(){if(Object.getPrototypeOf(this)!==instancePrototype)throw new BindingError("Use 'new' to construct "+name2);if(void 0===registeredClass.constructor_body)throw new BindingError(name2+" has no accessible constructor");var body=registeredClass.constructor_body[arguments.length];if(void 0===body)throw new BindingError("Tried to invoke ctor of "+name2+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!");return body.apply(this,arguments)})),instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name2,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast),referenceConverter=new RegisteredPointer(name2,registeredClass,!0,!1,!1),pointerConverter=new RegisteredPointer(name2+"*",registeredClass,!1,!1,!1),constPointerConverter=new RegisteredPointer(name2+" const*",registeredClass,!1,!0,!1);return registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter},replacePublicSymbol(legalFunctionName,constructor),[referenceConverter,pointerConverter,constPointerConverter]}))},q:function(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);var args=[rawConstructor],destructors=[];whenDependentTypesAreResolved([],[rawClassType],(function(classType){var humanName="constructor "+(classType=classType[0]).name;if(void 0===classType.registeredClass.constructor_body&&(classType.registeredClass.constructor_body=[]),void 0!==classType.registeredClass.constructor_body[argCount-1])throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return classType.registeredClass.constructor_body[argCount-1]=function(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)},whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){return classType.registeredClass.constructor_body[argCount-1]=function(){arguments.length!==argCount-1&&throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1)),destructors.length=0,args.length=argCount;for(var i=1;i<argCount;++i)args[i]=argTypes[i].toWireType(destructors,arguments[i-1]);var ptr=invoker.apply(null,args);return runDestructors(destructors),argTypes[0].fromWireType(ptr)},[]})),[]}))},b:function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName),rawInvoker=embind__requireFunction(invokerSignature,rawInvoker),whenDependentTypesAreResolved([],[rawClassType],(function(classType){var humanName=(classType=classType[0]).name+"."+methodName;function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}methodName.startsWith("@@")&&(methodName=Symbol[methodName.substring(2)]),isPureVirtual&&classType.registeredClass.pureVirtualFunctions.push(methodName);var proto=classType.registeredClass.instancePrototype,method=proto[methodName];return void 0===method||void 0===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2?(unboundTypesHandler.argCount=argCount-2,unboundTypesHandler.className=classType.name,proto[methodName]=unboundTypesHandler):(ensureOverloadTable(proto,methodName,humanName),proto[methodName].overloadTable[argCount-2]=unboundTypesHandler),whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);return void 0===proto[methodName].overloadTable?(memberFunction.argCount=argCount-2,proto[methodName]=memberFunction):proto[methodName].overloadTable[argCount-2]=memberFunction,[]})),[]}))},V:function(rawType,name2){registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:function(handle){var rv=emval_handle_array[handle].value;return __emval_decref(handle),rv},toWireType:function(destructors,value){return __emval_register(value)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})},Y:function(rawType,name2,size,isSigned){var shift=getShiftFromSize(size);function ctor(){}name2=readLatin1String(name2),ctor.values={},registerType(rawType,{name:name2,constructor:ctor,fromWireType:function(c){return this.constructor.values[c]},toWireType:function(destructors,c){return c.value},argPackAdvance:8,readValueFromPointer:enumReadValueFromPointer(name2,shift,isSigned),destructorFunction:null}),exposePublicSymbol(name2,ctor)},t:function(rawEnumType,name2,enumValue){var enumType=requireRegisteredType(rawEnumType,"enum");name2=readLatin1String(name2);var Enum=enumType.constructor,Value2=Object.create(enumType.constructor.prototype,{value:{value:enumValue},constructor:{value:createNamedFunction(enumType.name+"_"+name2,(function(){}))}});Enum.values[enumValue]=Value2,Enum[name2]=Value2},D:function(rawType,name2,size){var shift=getShiftFromSize(size);registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:function(value){return value},toWireType:function(destructors,value){if("number"!=typeof value&&"boolean"!=typeof value)throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name);return value},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(name2,shift),destructorFunction:null})},e:function(name2,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name2=readLatin1String(name2),rawInvoker=embind__requireFunction(signature,rawInvoker),exposePublicSymbol(name2,(function(){throwUnboundTypeError("Cannot call "+name2+" due to unbound types",argTypes)}),argCount-1),whenDependentTypesAreResolved([],argTypes,(function(argTypes2){var invokerArgsArray=[argTypes2[0],null].concat(argTypes2.slice(1));return replacePublicSymbol(name2,craftInvokerFunction(name2,invokerArgsArray,null,rawInvoker,fn),argCount-1),[]}))},n:function(primitiveType,name2,size,minRange,maxRange){name2=readLatin1String(name2),-1===maxRange&&(maxRange=4294967295);var shift=getShiftFromSize(size),fromWireType=function(value){return value};if(0===minRange){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name2.includes("unsigned");registerType(primitiveType,{name:name2,fromWireType,toWireType:function(destructors,value){if("number"!=typeof value&&"boolean"!=typeof value)throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name);if(value<minRange||value>maxRange)throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name2+'", which is outside the valid range ['+minRange+", "+maxRange+"]!");return isUnsignedType?value>>>0:0|value},argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(name2,shift,0!==minRange),destructorFunction:null})},j:function(rawType,dataTypeIndex,name2){var TA=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][dataTypeIndex];function decodeMemoryView(handle){var heap=HEAPU32,size=heap[(handle>>=2)>>>0],data=heap[handle+1>>>0];return new TA(buffer,data,size)}registerType(rawType,{name:name2=readLatin1String(name2),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})},E:function(rawType,name2){var stdStringIsUTF8="std::string"===(name2=readLatin1String(name2));registerType(rawType,{name:name2,fromWireType:function(value){var str,length=HEAPU32[value>>>2];if(stdStringIsUTF8)for(var decodeStartPtr=value+4,i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||0==HEAPU8[currentBytePtr>>>0]){var stringSegment=UTF8ToString(decodeStartPtr,currentBytePtr-decodeStartPtr);void 0===str?str=stringSegment:(str+=String.fromCharCode(0),str+=stringSegment),decodeStartPtr=currentBytePtr+1}}else{var a=new Array(length);for(i=0;i<length;++i)a[i]=String.fromCharCode(HEAPU8[value+4+i>>>0]);str=a.join("")}return _free(value),str},toWireType:function(destructors,value){value instanceof ArrayBuffer&&(value=new Uint8Array(value));var valueIsOfTypeString="string"==typeof value;valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string");var length=(stdStringIsUTF8&&valueIsOfTypeString?function(){return lengthBytesUTF8(value)}:function(){return value.length})(),ptr=_malloc(4+length+1);if(HEAPU32[(ptr>>>=0)>>>2]=length,stdStringIsUTF8&&valueIsOfTypeString)stringToUTF8(value,ptr+4,length+1);else if(valueIsOfTypeString)for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);charCode>255&&(_free(ptr),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),HEAPU8[ptr+4+i>>>0]=charCode}else for(i=0;i<length;++i)HEAPU8[ptr+4+i>>>0]=value[i];return null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})},v:function(rawType,charSize,name2){var decodeString,encodeString,getHeap,lengthBytesUTF,shift;name2=readLatin1String(name2),2===charSize?(decodeString=UTF16ToString,encodeString=stringToUTF16,lengthBytesUTF=lengthBytesUTF16,getHeap=function(){return HEAPU16},shift=1):4===charSize&&(decodeString=UTF32ToString,encodeString=stringToUTF32,lengthBytesUTF=lengthBytesUTF32,getHeap=function(){return HEAPU32},shift=2),registerType(rawType,{name:name2,fromWireType:function(value){for(var str,length=HEAPU32[value>>>2],HEAP=getHeap(),decodeStartPtr=value+4,i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||0==HEAP[currentBytePtr>>>shift]){var stringSegment=decodeString(decodeStartPtr,currentBytePtr-decodeStartPtr);void 0===str?str=stringSegment:(str+=String.fromCharCode(0),str+=stringSegment),decodeStartPtr=currentBytePtr+charSize}}return _free(value),str},toWireType:function(destructors,value){"string"!=typeof value&&throwBindingError("Cannot pass non-string to C++ string type "+name2);var length=lengthBytesUTF(value),ptr=_malloc(4+length+charSize);return HEAPU32[(ptr>>>=0)>>>2]=length>>shift,encodeString(value,ptr+4,length+charSize),null!==destructors&&destructors.push(_free,ptr),ptr},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})},_:function(rawType,name2,constructorSignature,rawConstructor,destructorSignature,rawDestructor){tupleRegistrations[rawType]={name:readLatin1String(name2),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),elements:[]}},g:function(rawTupleType,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){tupleRegistrations[rawTupleType].elements.push({getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext,setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext})},p:function(rawType,name2,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name2),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}},d:function(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext,setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext})},X:function(rawType,name2){registerType(rawType,{isVoid:!0,name:name2=readLatin1String(name2),argPackAdvance:0,fromWireType:function(){},toWireType:function(destructors,o){}})},l:function(handle,returnType,destructorsRef){handle=requireHandle(handle),returnType=requireRegisteredType(returnType,"emval::as");var destructors=[],rd=__emval_register(destructors);return HEAP32[destructorsRef>>>2]=rd,returnType.toWireType(destructors,handle)},F:function(handle,argCount,argTypes,argv){handle=requireHandle(handle);for(var types=function(argCount,argTypes){for(var a=new Array(argCount),i=0;i<argCount;++i)a[i]=requireRegisteredType(HEAP32[(argTypes>>2)+i>>>0],"parameter "+i);return a}(argCount,argTypes),args=new Array(argCount),i=0;i<argCount;++i){var type=types[i];args[i]=type.readValueFromPointer(argv),argv+=type.argPackAdvance}return __emval_register(handle.apply(void 0,args))},a:__emval_decref,H:function(name2){return 0===name2?__emval_register(emval_get_global()):(name2=getStringOrSymbol(name2),__emval_register(emval_get_global()[name2]))},m:function(handle,key2){return __emval_register((handle=requireHandle(handle))[key2=requireHandle(key2)])},i:function(handle){handle>4&&(emval_handle_array[handle].refcount+=1)},L:function(object,constructor){return(object=requireHandle(object))instanceof(constructor=requireHandle(constructor))},G:function(handle){return"number"==typeof(handle=requireHandle(handle))},z:function(){return __emval_register([])},f:function(v){return __emval_register(getStringOrSymbol(v))},s:function(){return __emval_register({})},k:function(handle){runDestructors(emval_handle_array[handle].value),__emval_decref(handle)},h:function(handle,key2,value){handle=requireHandle(handle),key2=requireHandle(key2),value=requireHandle(value),handle[key2]=value},c:function(type,argv){return __emval_register((type=requireRegisteredType(type,"_emval_take_value")).readValueFromPointer(argv))},C:function(){abort()},N:function(clk_id,tp){var now;if(0===clk_id)now=Date.now();else{if(1!==clk_id&&4!==clk_id||!_emscripten_get_now_is_monotonic)return setErrNo(28),-1;now=_emscripten_get_now()}return HEAP32[tp>>>2]=now/1e3|0,HEAP32[tp+4>>>2]=now%1e3*1e3*1e3|0,0},M:function(dest,src,num){HEAPU8.copyWithin(dest>>>0,src>>>0,src+num>>>0)},u:function(requestedSize){var x,multiple,oldSize=HEAPU8.length;if((requestedSize>>>=0)>4294901760)return!1;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);if(overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296),emscripten_realloc_buffer(Math.min(4294901760,((x=Math.max(requestedSize,overGrownHeapSize))%(multiple=65536)>0&&(x+=multiple-x%multiple),x))))return!0}return!1},R:function(__environ,environ_buf){try{var bufSize=0;return getEnvStrings().forEach((function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+4*i>>>2]=ptr,function(str,buffer2,dontAddNull){for(var i=0;i<str.length;++i)HEAP8[buffer2++>>>0]=str.charCodeAt(i);dontAddNull||(HEAP8[buffer2>>>0]=0)}(string,ptr),bufSize+=string.length+1})),0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}},S:function(penviron_count,penviron_buf_size){try{var strings=getEnvStrings();HEAP32[penviron_count>>>2]=strings.length;var bufSize=0;return strings.forEach((function(string){bufSize+=string.length+1})),HEAP32[penviron_buf_size>>>2]=bufSize,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}},B:function(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);return FS.close(stream),0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}},U:function(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd),num=SYSCALLS.doReadv(stream,iov,iovcnt);return HEAP32[pnum>>>2]=num,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}},I:function(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd),offset=4294967296*offset_high+(offset_low>>>0);return offset<=-9007199254740992||offset>=9007199254740992?-61:(FS.llseek(stream,offset,whence),tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>>2]=tempI64[0],HEAP32[newOffset+4>>>2]=tempI64[1],stream.getdents&&0===offset&&0===whence&&(stream.getdents=null),0)}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}},T:function(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd),num=SYSCALLS.doWritev(stream,iov,iovcnt);return HEAP32[pnum>>>2]=num,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}},K:function(val){setTempRet0(val)},Q:function(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}},_malloc=(function(){var info={a:asmLibraryArg};function receiveInstance(instance,module2){var cb,exports3=instance.exports;Module.asm=exports3,updateGlobalBufferAndViews((wasmMemory=Module.asm.$).buffer),wasmTable=Module.asm.ha,cb=Module.asm.aa,__ATINIT__.unshift(cb),removeRunDependency()}function receiveInstantiationResult(result){receiveInstance(result.instance)}function instantiateArrayBuffer(receiver){return function(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if("function"==typeof fetch&&!isFileURI(wasmBinaryFile))return fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){if(!response.ok)throw"failed to load wasm binary file at '"+wasmBinaryFile+"'";return response.arrayBuffer()})).catch((function(){return getBinary(wasmBinaryFile)}));if(readAsync)return new Promise((function(resolve,reject){readAsync(wasmBinaryFile,(function(response){resolve(new Uint8Array(response))}),reject)}))}return Promise.resolve().then((function(){return getBinary(wasmBinaryFile)}))}().then((function(binary){return WebAssembly.instantiate(binary,info)})).then(receiver,(function(reason){err("failed to asynchronously prepare wasm: "+reason),abort(reason)}))}if(addRunDependency(),Module.instantiateWasm)try{return Module.instantiateWasm(info,receiveInstance)}catch(e){return err("Module.instantiateWasm callback failed with error: "+e),!1}(wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||isDataURI(wasmBinaryFile)||isFileURI(wasmBinaryFile)||"function"!=typeof fetch?instantiateArrayBuffer(receiveInstantiationResult):fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){return WebAssembly.instantiateStreaming(response,info).then(receiveInstantiationResult,(function(reason){return err("wasm streaming compile failed: "+reason),err("falling back to ArrayBuffer instantiation"),instantiateArrayBuffer(receiveInstantiationResult)}))}))).catch(readyPromiseReject)}(),Module.___wasm_call_ctors=function(){return(Module.___wasm_call_ctors=Module.asm.aa).apply(null,arguments)},Module._main=function(){return(Module._main=Module.asm.ba).apply(null,arguments)},Module._malloc=function(){return(_malloc=Module._malloc=Module.asm.ca).apply(null,arguments)}),_free=Module._free=function(){return(_free=Module._free=Module.asm.da).apply(null,arguments)},___getTypeName=Module.___getTypeName=function(){return(___getTypeName=Module.___getTypeName=Module.asm.ea).apply(null,arguments)},___errno_location=(Module.___embind_register_native_and_builtin_types=function(){return(Module.___embind_register_native_and_builtin_types=Module.asm.fa).apply(null,arguments)},Module.___errno_location=function(){return(___errno_location=Module.___errno_location=Module.asm.ga).apply(null,arguments)});function ExitStatus(status){this.name="ExitStatus",this.message="Program terminated with exit("+status+")",this.status=status}function callMain(args){var status,entryFunction=Module._main;try{status=entryFunction(0,0),keepRuntimeAlive()||(Module.onExit&&Module.onExit(status),ABORT=!0),quit_(status,new ExitStatus(status))}catch(e){if(e instanceof ExitStatus||"unwind"==e)return;var toLog=e;e&&"object"==typeof e&&e.stack&&(toLog=[e,e.stack]),err("exception thrown: "+toLog),quit_(1,e)}}function run(args){function doRun(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT||(Module.noFSInit||FS.init.initialized||FS.init(),FS.ignorePermissions=!1,TTY.init(),callRuntimeCallbacks(__ATINIT__),callRuntimeCallbacks(__ATMAIN__),readyPromiseResolve(Module),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),shouldRunNow&&callMain(),function(){if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)cb=Module.postRun.shift(),__ATPOSTRUN__.unshift(cb);var cb;callRuntimeCallbacks(__ATPOSTRUN__)}()))}args=args||arguments_,runDependencies>0||(function(){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)cb=Module.preRun.shift(),__ATPRERUN__.unshift(cb);var cb;callRuntimeCallbacks(__ATPRERUN__)}(),runDependencies>0||(Module.setStatus?(Module.setStatus("Running..."),setTimeout((function(){setTimeout((function(){Module.setStatus("")}),1),doRun()}),1)):doRun()))}if(Module.dynCall_jiji=function(){return(Module.dynCall_jiji=Module.asm.ia).apply(null,arguments)},Module.dynCall_viijii=function(){return(Module.dynCall_viijii=Module.asm.ja).apply(null,arguments)},Module.dynCall_iiiiij=function(){return(Module.dynCall_iiiiij=Module.asm.ka).apply(null,arguments)},Module.dynCall_iiiiijj=function(){return(Module.dynCall_iiiiijj=Module.asm.la).apply(null,arguments)},Module.dynCall_iiiiiijj=function(){return(Module.dynCall_iiiiiijj=Module.asm.ma).apply(null,arguments)},Module.addRunDependency=addRunDependency,Module.removeRunDependency=removeRunDependency,Module.FS_createPath=FS.createPath,Module.FS_createDataFile=FS.createDataFile,Module.FS_createPreloadedFile=FS.createPreloadedFile,Module.FS_createLazyFile=FS.createLazyFile,Module.FS_createDevice=FS.createDevice,Module.FS_unlink=FS.unlink,Module.FS=FS,dependenciesFulfilled=function runCaller(){calledRun||run(),calledRun||(dependenciesFulfilled=runCaller)},Module.run=run,Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);Module.preInit.length>0;)Module.preInit.pop()();var shouldRunNow=!0;return Module.noInitialRun&&(shouldRunNow=!1),run(),WebIFCWasm3.ready});"object"==typeof exports&&"object"==typeof module?module.exports=WebIFCWasm2:"function"==typeof define&&define.amd?define([],(function(){return WebIFCWasm2})):"object"==typeof exports&&(exports.WebIFCWasm=WebIFCWasm2)}}),web_ifc_api_exports={};((target,all)=>{for(var name2 in(target=>{__defProp(target,"__esModule",{value:!0})})(target),all)__defProp(target,name2,{get:all[name2],enumerable:!0})})(web_ifc_api_exports,{EMPTY:()=>EMPTY,ENUM:()=>ENUM,FromRawLineData:()=>FromRawLineData,Handle:()=>Handle,IFCACTIONREQUEST:()=>IFCACTIONREQUEST,IFCACTOR:()=>IFCACTOR,IFCACTORROLE:()=>IFCACTORROLE,IFCACTUATOR:()=>IFCACTUATOR,IFCACTUATORTYPE:()=>IFCACTUATORTYPE,IFCADDRESS:()=>IFCADDRESS,IFCADVANCEDBREP:()=>IFCADVANCEDBREP,IFCADVANCEDBREPWITHVOIDS:()=>IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDFACE:()=>IFCADVANCEDFACE,IFCAIRTERMINAL:()=>IFCAIRTERMINAL,IFCAIRTERMINALBOX:()=>IFCAIRTERMINALBOX,IFCAIRTERMINALBOXTYPE:()=>IFCAIRTERMINALBOXTYPE,IFCAIRTERMINALTYPE:()=>IFCAIRTERMINALTYPE,IFCAIRTOAIRHEATRECOVERY:()=>IFCAIRTOAIRHEATRECOVERY,IFCAIRTOAIRHEATRECOVERYTYPE:()=>IFCAIRTOAIRHEATRECOVERYTYPE,IFCALARM:()=>IFCALARM,IFCALARMTYPE:()=>IFCALARMTYPE,IFCALIGNMENT:()=>IFCALIGNMENT,IFCALIGNMENT2DHORIZONTAL:()=>IFCALIGNMENT2DHORIZONTAL,IFCALIGNMENT2DHORIZONTALSEGMENT:()=>IFCALIGNMENT2DHORIZONTALSEGMENT,IFCALIGNMENT2DSEGMENT:()=>IFCALIGNMENT2DSEGMENT,IFCALIGNMENT2DVERSEGCIRCULARARC:()=>IFCALIGNMENT2DVERSEGCIRCULARARC,IFCALIGNMENT2DVERSEGLINE:()=>IFCALIGNMENT2DVERSEGLINE,IFCALIGNMENT2DVERSEGPARABOLICARC:()=>IFCALIGNMENT2DVERSEGPARABOLICARC,IFCALIGNMENT2DVERTICAL:()=>IFCALIGNMENT2DVERTICAL,IFCALIGNMENT2DVERTICALSEGMENT:()=>IFCALIGNMENT2DVERTICALSEGMENT,IFCALIGNMENTCURVE:()=>IFCALIGNMENTCURVE,IFCANNOTATION:()=>IFCANNOTATION,IFCANNOTATIONFILLAREA:()=>IFCANNOTATIONFILLAREA,IFCAPPLICATION:()=>IFCAPPLICATION,IFCAPPLIEDVALUE:()=>IFCAPPLIEDVALUE,IFCAPPROVAL:()=>IFCAPPROVAL,IFCAPPROVALRELATIONSHIP:()=>IFCAPPROVALRELATIONSHIP,IFCARBITRARYCLOSEDPROFILEDEF:()=>IFCARBITRARYCLOSEDPROFILEDEF,IFCARBITRARYOPENPROFILEDEF:()=>IFCARBITRARYOPENPROFILEDEF,IFCARBITRARYPROFILEDEFWITHVOIDS:()=>IFCARBITRARYPROFILEDEFWITHVOIDS,IFCASSET:()=>IFCASSET,IFCASYMMETRICISHAPEPROFILEDEF:()=>IFCASYMMETRICISHAPEPROFILEDEF,IFCAUDIOVISUALAPPLIANCE:()=>IFCAUDIOVISUALAPPLIANCE,IFCAUDIOVISUALAPPLIANCETYPE:()=>IFCAUDIOVISUALAPPLIANCETYPE,IFCAXIS1PLACEMENT:()=>IFCAXIS1PLACEMENT,IFCAXIS2PLACEMENT2D:()=>IFCAXIS2PLACEMENT2D,IFCAXIS2PLACEMENT3D:()=>IFCAXIS2PLACEMENT3D,IFCBEAM:()=>IFCBEAM,IFCBEAMSTANDARDCASE:()=>IFCBEAMSTANDARDCASE,IFCBEAMTYPE:()=>IFCBEAMTYPE,IFCBEARING:()=>IFCBEARING,IFCBEARINGTYPE:()=>IFCBEARINGTYPE,IFCBLOBTEXTURE:()=>IFCBLOBTEXTURE,IFCBLOCK:()=>IFCBLOCK,IFCBOILER:()=>IFCBOILER,IFCBOILERTYPE:()=>IFCBOILERTYPE,IFCBOOLEANCLIPPINGRESULT:()=>IFCBOOLEANCLIPPINGRESULT,IFCBOOLEANRESULT:()=>IFCBOOLEANRESULT,IFCBOUNDARYCONDITION:()=>IFCBOUNDARYCONDITION,IFCBOUNDARYCURVE:()=>IFCBOUNDARYCURVE,IFCBOUNDARYEDGECONDITION:()=>IFCBOUNDARYEDGECONDITION,IFCBOUNDARYFACECONDITION:()=>IFCBOUNDARYFACECONDITION,IFCBOUNDARYNODECONDITION:()=>IFCBOUNDARYNODECONDITION,IFCBOUNDARYNODECONDITIONWARPING:()=>IFCBOUNDARYNODECONDITIONWARPING,IFCBOUNDEDCURVE:()=>IFCBOUNDEDCURVE,IFCBOUNDEDSURFACE:()=>IFCBOUNDEDSURFACE,IFCBOUNDINGBOX:()=>IFCBOUNDINGBOX,IFCBOXEDHALFSPACE:()=>IFCBOXEDHALFSPACE,IFCBRIDGE:()=>IFCBRIDGE,IFCBRIDGEPART:()=>IFCBRIDGEPART,IFCBSPLINECURVE:()=>IFCBSPLINECURVE,IFCBSPLINECURVEWITHKNOTS:()=>IFCBSPLINECURVEWITHKNOTS,IFCBSPLINESURFACE:()=>IFCBSPLINESURFACE,IFCBSPLINESURFACEWITHKNOTS:()=>IFCBSPLINESURFACEWITHKNOTS,IFCBUILDING:()=>IFCBUILDING,IFCBUILDINGELEMENT:()=>IFCBUILDINGELEMENT,IFCBUILDINGELEMENTPART:()=>IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTPARTTYPE:()=>IFCBUILDINGELEMENTPARTTYPE,IFCBUILDINGELEMENTPROXY:()=>IFCBUILDINGELEMENTPROXY,IFCBUILDINGELEMENTPROXYTYPE:()=>IFCBUILDINGELEMENTPROXYTYPE,IFCBUILDINGELEMENTTYPE:()=>IFCBUILDINGELEMENTTYPE,IFCBUILDINGSTOREY:()=>IFCBUILDINGSTOREY,IFCBUILDINGSYSTEM:()=>IFCBUILDINGSYSTEM,IFCBURNER:()=>IFCBURNER,IFCBURNERTYPE:()=>IFCBURNERTYPE,IFCCABLECARRIERFITTING:()=>IFCCABLECARRIERFITTING,IFCCABLECARRIERFITTINGTYPE:()=>IFCCABLECARRIERFITTINGTYPE,IFCCABLECARRIERSEGMENT:()=>IFCCABLECARRIERSEGMENT,IFCCABLECARRIERSEGMENTTYPE:()=>IFCCABLECARRIERSEGMENTTYPE,IFCCABLEFITTING:()=>IFCCABLEFITTING,IFCCABLEFITTINGTYPE:()=>IFCCABLEFITTINGTYPE,IFCCABLESEGMENT:()=>IFCCABLESEGMENT,IFCCABLESEGMENTTYPE:()=>IFCCABLESEGMENTTYPE,IFCCAISSONFOUNDATION:()=>IFCCAISSONFOUNDATION,IFCCAISSONFOUNDATIONTYPE:()=>IFCCAISSONFOUNDATIONTYPE,IFCCARTESIANPOINT:()=>IFCCARTESIANPOINT,IFCCARTESIANPOINTLIST:()=>IFCCARTESIANPOINTLIST,IFCCARTESIANPOINTLIST2D:()=>IFCCARTESIANPOINTLIST2D,IFCCARTESIANPOINTLIST3D:()=>IFCCARTESIANPOINTLIST3D,IFCCARTESIANTRANSFORMATIONOPERATOR:()=>IFCCARTESIANTRANSFORMATIONOPERATOR,IFCCARTESIANTRANSFORMATIONOPERATOR2D:()=>IFCCARTESIANTRANSFORMATIONOPERATOR2D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM:()=>IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D:()=>IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM:()=>IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCENTERLINEPROFILEDEF:()=>IFCCENTERLINEPROFILEDEF,IFCCHILLER:()=>IFCCHILLER,IFCCHILLERTYPE:()=>IFCCHILLERTYPE,IFCCHIMNEY:()=>IFCCHIMNEY,IFCCHIMNEYTYPE:()=>IFCCHIMNEYTYPE,IFCCIRCLE:()=>IFCCIRCLE,IFCCIRCLEHOLLOWPROFILEDEF:()=>IFCCIRCLEHOLLOWPROFILEDEF,IFCCIRCLEPROFILEDEF:()=>IFCCIRCLEPROFILEDEF,IFCCIRCULARARCSEGMENT2D:()=>IFCCIRCULARARCSEGMENT2D,IFCCIVILELEMENT:()=>IFCCIVILELEMENT,IFCCIVILELEMENTTYPE:()=>IFCCIVILELEMENTTYPE,IFCCLASSIFICATION:()=>IFCCLASSIFICATION,IFCCLASSIFICATIONREFERENCE:()=>IFCCLASSIFICATIONREFERENCE,IFCCLOSEDSHELL:()=>IFCCLOSEDSHELL,IFCCOIL:()=>IFCCOIL,IFCCOILTYPE:()=>IFCCOILTYPE,IFCCOLOURRGB:()=>IFCCOLOURRGB,IFCCOLOURRGBLIST:()=>IFCCOLOURRGBLIST,IFCCOLOURSPECIFICATION:()=>IFCCOLOURSPECIFICATION,IFCCOLUMN:()=>IFCCOLUMN,IFCCOLUMNSTANDARDCASE:()=>IFCCOLUMNSTANDARDCASE,IFCCOLUMNTYPE:()=>IFCCOLUMNTYPE,IFCCOMMUNICATIONSAPPLIANCE:()=>IFCCOMMUNICATIONSAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCETYPE:()=>IFCCOMMUNICATIONSAPPLIANCETYPE,IFCCOMPLEXPROPERTY:()=>IFCCOMPLEXPROPERTY,IFCCOMPLEXPROPERTYTEMPLATE:()=>IFCCOMPLEXPROPERTYTEMPLATE,IFCCOMPOSITECURVE:()=>IFCCOMPOSITECURVE,IFCCOMPOSITECURVEONSURFACE:()=>IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVESEGMENT:()=>IFCCOMPOSITECURVESEGMENT,IFCCOMPOSITEPROFILEDEF:()=>IFCCOMPOSITEPROFILEDEF,IFCCOMPRESSOR:()=>IFCCOMPRESSOR,IFCCOMPRESSORTYPE:()=>IFCCOMPRESSORTYPE,IFCCONDENSER:()=>IFCCONDENSER,IFCCONDENSERTYPE:()=>IFCCONDENSERTYPE,IFCCONIC:()=>IFCCONIC,IFCCONNECTEDFACESET:()=>IFCCONNECTEDFACESET,IFCCONNECTIONCURVEGEOMETRY:()=>IFCCONNECTIONCURVEGEOMETRY,IFCCONNECTIONGEOMETRY:()=>IFCCONNECTIONGEOMETRY,IFCCONNECTIONPOINTECCENTRICITY:()=>IFCCONNECTIONPOINTECCENTRICITY,IFCCONNECTIONPOINTGEOMETRY:()=>IFCCONNECTIONPOINTGEOMETRY,IFCCONNECTIONSURFACEGEOMETRY:()=>IFCCONNECTIONSURFACEGEOMETRY,IFCCONNECTIONVOLUMEGEOMETRY:()=>IFCCONNECTIONVOLUMEGEOMETRY,IFCCONSTRAINT:()=>IFCCONSTRAINT,IFCCONSTRUCTIONEQUIPMENTRESOURCE:()=>IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE:()=>IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCE:()=>IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCETYPE:()=>IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONPRODUCTRESOURCE:()=>IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONPRODUCTRESOURCETYPE:()=>IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONRESOURCE:()=>IFCCONSTRUCTIONRESOURCE,IFCCONSTRUCTIONRESOURCETYPE:()=>IFCCONSTRUCTIONRESOURCETYPE,IFCCONTEXT:()=>IFCCONTEXT,IFCCONTEXTDEPENDENTUNIT:()=>IFCCONTEXTDEPENDENTUNIT,IFCCONTROL:()=>IFCCONTROL,IFCCONTROLLER:()=>IFCCONTROLLER,IFCCONTROLLERTYPE:()=>IFCCONTROLLERTYPE,IFCCONVERSIONBASEDUNIT:()=>IFCCONVERSIONBASEDUNIT,IFCCONVERSIONBASEDUNITWITHOFFSET:()=>IFCCONVERSIONBASEDUNITWITHOFFSET,IFCCOOLEDBEAM:()=>IFCCOOLEDBEAM,IFCCOOLEDBEAMTYPE:()=>IFCCOOLEDBEAMTYPE,IFCCOOLINGTOWER:()=>IFCCOOLINGTOWER,IFCCOOLINGTOWERTYPE:()=>IFCCOOLINGTOWERTYPE,IFCCOORDINATEOPERATION:()=>IFCCOORDINATEOPERATION,IFCCOORDINATEREFERENCESYSTEM:()=>IFCCOORDINATEREFERENCESYSTEM,IFCCOSTITEM:()=>IFCCOSTITEM,IFCCOSTSCHEDULE:()=>IFCCOSTSCHEDULE,IFCCOSTVALUE:()=>IFCCOSTVALUE,IFCCOVERING:()=>IFCCOVERING,IFCCOVERINGTYPE:()=>IFCCOVERINGTYPE,IFCCREWRESOURCE:()=>IFCCREWRESOURCE,IFCCREWRESOURCETYPE:()=>IFCCREWRESOURCETYPE,IFCCSGPRIMITIVE3D:()=>IFCCSGPRIMITIVE3D,IFCCSGSOLID:()=>IFCCSGSOLID,IFCCSHAPEPROFILEDEF:()=>IFCCSHAPEPROFILEDEF,IFCCURRENCYRELATIONSHIP:()=>IFCCURRENCYRELATIONSHIP,IFCCURTAINWALL:()=>IFCCURTAINWALL,IFCCURTAINWALLTYPE:()=>IFCCURTAINWALLTYPE,IFCCURVE:()=>IFCCURVE,IFCCURVEBOUNDEDPLANE:()=>IFCCURVEBOUNDEDPLANE,IFCCURVEBOUNDEDSURFACE:()=>IFCCURVEBOUNDEDSURFACE,IFCCURVESEGMENT2D:()=>IFCCURVESEGMENT2D,IFCCURVESTYLE:()=>IFCCURVESTYLE,IFCCURVESTYLEFONT:()=>IFCCURVESTYLEFONT,IFCCURVESTYLEFONTANDSCALING:()=>IFCCURVESTYLEFONTANDSCALING,IFCCURVESTYLEFONTPATTERN:()=>IFCCURVESTYLEFONTPATTERN,IFCCYLINDRICALSURFACE:()=>IFCCYLINDRICALSURFACE,IFCDAMPER:()=>IFCDAMPER,IFCDAMPERTYPE:()=>IFCDAMPERTYPE,IFCDEEPFOUNDATION:()=>IFCDEEPFOUNDATION,IFCDEEPFOUNDATIONTYPE:()=>IFCDEEPFOUNDATIONTYPE,IFCDERIVEDPROFILEDEF:()=>IFCDERIVEDPROFILEDEF,IFCDERIVEDUNIT:()=>IFCDERIVEDUNIT,IFCDERIVEDUNITELEMENT:()=>IFCDERIVEDUNITELEMENT,IFCDIMENSIONALEXPONENTS:()=>IFCDIMENSIONALEXPONENTS,IFCDIRECTION:()=>IFCDIRECTION,IFCDISCRETEACCESSORY:()=>IFCDISCRETEACCESSORY,IFCDISCRETEACCESSORYTYPE:()=>IFCDISCRETEACCESSORYTYPE,IFCDISTANCEEXPRESSION:()=>IFCDISTANCEEXPRESSION,IFCDISTRIBUTIONCHAMBERELEMENT:()=>IFCDISTRIBUTIONCHAMBERELEMENT,IFCDISTRIBUTIONCHAMBERELEMENTTYPE:()=>IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCDISTRIBUTIONCIRCUIT:()=>IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONCONTROLELEMENT:()=>IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCONTROLELEMENTTYPE:()=>IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONELEMENT:()=>IFCDISTRIBUTIONELEMENT,IFCDISTRIBUTIONELEMENTTYPE:()=>IFCDISTRIBUTIONELEMENTTYPE,IFCDISTRIBUTIONFLOWELEMENT:()=>IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONFLOWELEMENTTYPE:()=>IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONPORT:()=>IFCDISTRIBUTIONPORT,IFCDISTRIBUTIONSYSTEM:()=>IFCDISTRIBUTIONSYSTEM,IFCDOCUMENTINFORMATION:()=>IFCDOCUMENTINFORMATION,IFCDOCUMENTINFORMATIONRELATIONSHIP:()=>IFCDOCUMENTINFORMATIONRELATIONSHIP,IFCDOCUMENTREFERENCE:()=>IFCDOCUMENTREFERENCE,IFCDOOR:()=>IFCDOOR,IFCDOORLININGPROPERTIES:()=>IFCDOORLININGPROPERTIES,IFCDOORPANELPROPERTIES:()=>IFCDOORPANELPROPERTIES,IFCDOORSTANDARDCASE:()=>IFCDOORSTANDARDCASE,IFCDOORSTYLE:()=>IFCDOORSTYLE,IFCDOORTYPE:()=>IFCDOORTYPE,IFCDRAUGHTINGPREDEFINEDCOLOUR:()=>IFCDRAUGHTINGPREDEFINEDCOLOUR,IFCDRAUGHTINGPREDEFINEDCURVEFONT:()=>IFCDRAUGHTINGPREDEFINEDCURVEFONT,IFCDUCTFITTING:()=>IFCDUCTFITTING,IFCDUCTFITTINGTYPE:()=>IFCDUCTFITTINGTYPE,IFCDUCTSEGMENT:()=>IFCDUCTSEGMENT,IFCDUCTSEGMENTTYPE:()=>IFCDUCTSEGMENTTYPE,IFCDUCTSILENCER:()=>IFCDUCTSILENCER,IFCDUCTSILENCERTYPE:()=>IFCDUCTSILENCERTYPE,IFCEDGE:()=>IFCEDGE,IFCEDGECURVE:()=>IFCEDGECURVE,IFCEDGELOOP:()=>IFCEDGELOOP,IFCELECTRICAPPLIANCE:()=>IFCELECTRICAPPLIANCE,IFCELECTRICAPPLIANCETYPE:()=>IFCELECTRICAPPLIANCETYPE,IFCELECTRICDISTRIBUTIONBOARD:()=>IFCELECTRICDISTRIBUTIONBOARD,IFCELECTRICDISTRIBUTIONBOARDTYPE:()=>IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCELECTRICFLOWSTORAGEDEVICE:()=>IFCELECTRICFLOWSTORAGEDEVICE,IFCELECTRICFLOWSTORAGEDEVICETYPE:()=>IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCELECTRICGENERATOR:()=>IFCELECTRICGENERATOR,IFCELECTRICGENERATORTYPE:()=>IFCELECTRICGENERATORTYPE,IFCELECTRICMOTOR:()=>IFCELECTRICMOTOR,IFCELECTRICMOTORTYPE:()=>IFCELECTRICMOTORTYPE,IFCELECTRICTIMECONTROL:()=>IFCELECTRICTIMECONTROL,IFCELECTRICTIMECONTROLTYPE:()=>IFCELECTRICTIMECONTROLTYPE,IFCELEMENT:()=>IFCELEMENT,IFCELEMENTARYSURFACE:()=>IFCELEMENTARYSURFACE,IFCELEMENTASSEMBLY:()=>IFCELEMENTASSEMBLY,IFCELEMENTASSEMBLYTYPE:()=>IFCELEMENTASSEMBLYTYPE,IFCELEMENTCOMPONENT:()=>IFCELEMENTCOMPONENT,IFCELEMENTCOMPONENTTYPE:()=>IFCELEMENTCOMPONENTTYPE,IFCELEMENTQUANTITY:()=>IFCELEMENTQUANTITY,IFCELEMENTTYPE:()=>IFCELEMENTTYPE,IFCELLIPSE:()=>IFCELLIPSE,IFCELLIPSEPROFILEDEF:()=>IFCELLIPSEPROFILEDEF,IFCENERGYCONVERSIONDEVICE:()=>IFCENERGYCONVERSIONDEVICE,IFCENERGYCONVERSIONDEVICETYPE:()=>IFCENERGYCONVERSIONDEVICETYPE,IFCENGINE:()=>IFCENGINE,IFCENGINETYPE:()=>IFCENGINETYPE,IFCEVAPORATIVECOOLER:()=>IFCEVAPORATIVECOOLER,IFCEVAPORATIVECOOLERTYPE:()=>IFCEVAPORATIVECOOLERTYPE,IFCEVAPORATOR:()=>IFCEVAPORATOR,IFCEVAPORATORTYPE:()=>IFCEVAPORATORTYPE,IFCEVENT:()=>IFCEVENT,IFCEVENTTIME:()=>IFCEVENTTIME,IFCEVENTTYPE:()=>IFCEVENTTYPE,IFCEXTENDEDPROPERTIES:()=>IFCEXTENDEDPROPERTIES,IFCEXTERNALINFORMATION:()=>IFCEXTERNALINFORMATION,IFCEXTERNALLYDEFINEDHATCHSTYLE:()=>IFCEXTERNALLYDEFINEDHATCHSTYLE,IFCEXTERNALLYDEFINEDSURFACESTYLE:()=>IFCEXTERNALLYDEFINEDSURFACESTYLE,IFCEXTERNALLYDEFINEDTEXTFONT:()=>IFCEXTERNALLYDEFINEDTEXTFONT,IFCEXTERNALREFERENCE:()=>IFCEXTERNALREFERENCE,IFCEXTERNALREFERENCERELATIONSHIP:()=>IFCEXTERNALREFERENCERELATIONSHIP,IFCEXTERNALSPATIALELEMENT:()=>IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT:()=>IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCEXTRUDEDAREASOLID:()=>IFCEXTRUDEDAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED:()=>IFCEXTRUDEDAREASOLIDTAPERED,IFCFACE:()=>IFCFACE,IFCFACEBASEDSURFACEMODEL:()=>IFCFACEBASEDSURFACEMODEL,IFCFACEBOUND:()=>IFCFACEBOUND,IFCFACEOUTERBOUND:()=>IFCFACEOUTERBOUND,IFCFACESURFACE:()=>IFCFACESURFACE,IFCFACETEDBREP:()=>IFCFACETEDBREP,IFCFACETEDBREPWITHVOIDS:()=>IFCFACETEDBREPWITHVOIDS,IFCFACILITY:()=>IFCFACILITY,IFCFACILITYPART:()=>IFCFACILITYPART,IFCFAILURECONNECTIONCONDITION:()=>IFCFAILURECONNECTIONCONDITION,IFCFAN:()=>IFCFAN,IFCFANTYPE:()=>IFCFANTYPE,IFCFASTENER:()=>IFCFASTENER,IFCFASTENERTYPE:()=>IFCFASTENERTYPE,IFCFEATUREELEMENT:()=>IFCFEATUREELEMENT,IFCFEATUREELEMENTADDITION:()=>IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENTSUBTRACTION:()=>IFCFEATUREELEMENTSUBTRACTION,IFCFILLAREASTYLE:()=>IFCFILLAREASTYLE,IFCFILLAREASTYLEHATCHING:()=>IFCFILLAREASTYLEHATCHING,IFCFILLAREASTYLETILES:()=>IFCFILLAREASTYLETILES,IFCFILTER:()=>IFCFILTER,IFCFILTERTYPE:()=>IFCFILTERTYPE,IFCFIRESUPPRESSIONTERMINAL:()=>IFCFIRESUPPRESSIONTERMINAL,IFCFIRESUPPRESSIONTERMINALTYPE:()=>IFCFIRESUPPRESSIONTERMINALTYPE,IFCFIXEDREFERENCESWEPTAREASOLID:()=>IFCFIXEDREFERENCESWEPTAREASOLID,IFCFLOWCONTROLLER:()=>IFCFLOWCONTROLLER,IFCFLOWCONTROLLERTYPE:()=>IFCFLOWCONTROLLERTYPE,IFCFLOWFITTING:()=>IFCFLOWFITTING,IFCFLOWFITTINGTYPE:()=>IFCFLOWFITTINGTYPE,IFCFLOWINSTRUMENT:()=>IFCFLOWINSTRUMENT,IFCFLOWINSTRUMENTTYPE:()=>IFCFLOWINSTRUMENTTYPE,IFCFLOWMETER:()=>IFCFLOWMETER,IFCFLOWMETERTYPE:()=>IFCFLOWMETERTYPE,IFCFLOWMOVINGDEVICE:()=>IFCFLOWMOVINGDEVICE,IFCFLOWMOVINGDEVICETYPE:()=>IFCFLOWMOVINGDEVICETYPE,IFCFLOWSEGMENT:()=>IFCFLOWSEGMENT,IFCFLOWSEGMENTTYPE:()=>IFCFLOWSEGMENTTYPE,IFCFLOWSTORAGEDEVICE:()=>IFCFLOWSTORAGEDEVICE,IFCFLOWSTORAGEDEVICETYPE:()=>IFCFLOWSTORAGEDEVICETYPE,IFCFLOWTERMINAL:()=>IFCFLOWTERMINAL,IFCFLOWTERMINALTYPE:()=>IFCFLOWTERMINALTYPE,IFCFLOWTREATMENTDEVICE:()=>IFCFLOWTREATMENTDEVICE,IFCFLOWTREATMENTDEVICETYPE:()=>IFCFLOWTREATMENTDEVICETYPE,IFCFOOTING:()=>IFCFOOTING,IFCFOOTINGTYPE:()=>IFCFOOTINGTYPE,IFCFURNISHINGELEMENT:()=>IFCFURNISHINGELEMENT,IFCFURNISHINGELEMENTTYPE:()=>IFCFURNISHINGELEMENTTYPE,IFCFURNITURE:()=>IFCFURNITURE,IFCFURNITURETYPE:()=>IFCFURNITURETYPE,IFCGEOGRAPHICELEMENT:()=>IFCGEOGRAPHICELEMENT,IFCGEOGRAPHICELEMENTTYPE:()=>IFCGEOGRAPHICELEMENTTYPE,IFCGEOMETRICCURVESET:()=>IFCGEOMETRICCURVESET,IFCGEOMETRICREPRESENTATIONCONTEXT:()=>IFCGEOMETRICREPRESENTATIONCONTEXT,IFCGEOMETRICREPRESENTATIONITEM:()=>IFCGEOMETRICREPRESENTATIONITEM,IFCGEOMETRICREPRESENTATIONSUBCONTEXT:()=>IFCGEOMETRICREPRESENTATIONSUBCONTEXT,IFCGEOMETRICSET:()=>IFCGEOMETRICSET,IFCGRID:()=>IFCGRID,IFCGRIDAXIS:()=>IFCGRIDAXIS,IFCGRIDPLACEMENT:()=>IFCGRIDPLACEMENT,IFCGROUP:()=>IFCGROUP,IFCHALFSPACESOLID:()=>IFCHALFSPACESOLID,IFCHEATEXCHANGER:()=>IFCHEATEXCHANGER,IFCHEATEXCHANGERTYPE:()=>IFCHEATEXCHANGERTYPE,IFCHUMIDIFIER:()=>IFCHUMIDIFIER,IFCHUMIDIFIERTYPE:()=>IFCHUMIDIFIERTYPE,IFCIMAGETEXTURE:()=>IFCIMAGETEXTURE,IFCINDEXEDCOLOURMAP:()=>IFCINDEXEDCOLOURMAP,IFCINDEXEDPOLYCURVE:()=>IFCINDEXEDPOLYCURVE,IFCINDEXEDPOLYGONALFACE:()=>IFCINDEXEDPOLYGONALFACE,IFCINDEXEDPOLYGONALFACEWITHVOIDS:()=>IFCINDEXEDPOLYGONALFACEWITHVOIDS,IFCINDEXEDTEXTUREMAP:()=>IFCINDEXEDTEXTUREMAP,IFCINDEXEDTRIANGLETEXTUREMAP:()=>IFCINDEXEDTRIANGLETEXTUREMAP,IFCINTERCEPTOR:()=>IFCINTERCEPTOR,IFCINTERCEPTORTYPE:()=>IFCINTERCEPTORTYPE,IFCINTERSECTIONCURVE:()=>IFCINTERSECTIONCURVE,IFCINVENTORY:()=>IFCINVENTORY,IFCIRREGULARTIMESERIES:()=>IFCIRREGULARTIMESERIES,IFCIRREGULARTIMESERIESVALUE:()=>IFCIRREGULARTIMESERIESVALUE,IFCISHAPEPROFILEDEF:()=>IFCISHAPEPROFILEDEF,IFCJUNCTIONBOX:()=>IFCJUNCTIONBOX,IFCJUNCTIONBOXTYPE:()=>IFCJUNCTIONBOXTYPE,IFCLABORRESOURCE:()=>IFCLABORRESOURCE,IFCLABORRESOURCETYPE:()=>IFCLABORRESOURCETYPE,IFCLAGTIME:()=>IFCLAGTIME,IFCLAMP:()=>IFCLAMP,IFCLAMPTYPE:()=>IFCLAMPTYPE,IFCLIBRARYINFORMATION:()=>IFCLIBRARYINFORMATION,IFCLIBRARYREFERENCE:()=>IFCLIBRARYREFERENCE,IFCLIGHTDISTRIBUTIONDATA:()=>IFCLIGHTDISTRIBUTIONDATA,IFCLIGHTFIXTURE:()=>IFCLIGHTFIXTURE,IFCLIGHTFIXTURETYPE:()=>IFCLIGHTFIXTURETYPE,IFCLIGHTINTENSITYDISTRIBUTION:()=>IFCLIGHTINTENSITYDISTRIBUTION,IFCLIGHTSOURCE:()=>IFCLIGHTSOURCE,IFCLIGHTSOURCEAMBIENT:()=>IFCLIGHTSOURCEAMBIENT,IFCLIGHTSOURCEDIRECTIONAL:()=>IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEGONIOMETRIC:()=>IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEPOSITIONAL:()=>IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCESPOT:()=>IFCLIGHTSOURCESPOT,IFCLINE:()=>IFCLINE,IFCLINEARPLACEMENT:()=>IFCLINEARPLACEMENT,IFCLINEARPOSITIONINGELEMENT:()=>IFCLINEARPOSITIONINGELEMENT,IFCLINESEGMENT2D:()=>IFCLINESEGMENT2D,IFCLOCALPLACEMENT:()=>IFCLOCALPLACEMENT,IFCLOOP:()=>IFCLOOP,IFCLSHAPEPROFILEDEF:()=>IFCLSHAPEPROFILEDEF,IFCMANIFOLDSOLIDBREP:()=>IFCMANIFOLDSOLIDBREP,IFCMAPCONVERSION:()=>IFCMAPCONVERSION,IFCMAPPEDITEM:()=>IFCMAPPEDITEM,IFCMATERIAL:()=>IFCMATERIAL,IFCMATERIALCLASSIFICATIONRELATIONSHIP:()=>IFCMATERIALCLASSIFICATIONRELATIONSHIP,IFCMATERIALCONSTITUENT:()=>IFCMATERIALCONSTITUENT,IFCMATERIALCONSTITUENTSET:()=>IFCMATERIALCONSTITUENTSET,IFCMATERIALDEFINITION:()=>IFCMATERIALDEFINITION,IFCMATERIALDEFINITIONREPRESENTATION:()=>IFCMATERIALDEFINITIONREPRESENTATION,IFCMATERIALLAYER:()=>IFCMATERIALLAYER,IFCMATERIALLAYERSET:()=>IFCMATERIALLAYERSET,IFCMATERIALLAYERSETUSAGE:()=>IFCMATERIALLAYERSETUSAGE,IFCMATERIALLAYERWITHOFFSETS:()=>IFCMATERIALLAYERWITHOFFSETS,IFCMATERIALLIST:()=>IFCMATERIALLIST,IFCMATERIALPROFILE:()=>IFCMATERIALPROFILE,IFCMATERIALPROFILESET:()=>IFCMATERIALPROFILESET,IFCMATERIALPROFILESETUSAGE:()=>IFCMATERIALPROFILESETUSAGE,IFCMATERIALPROFILESETUSAGETAPERING:()=>IFCMATERIALPROFILESETUSAGETAPERING,IFCMATERIALPROFILEWITHOFFSETS:()=>IFCMATERIALPROFILEWITHOFFSETS,IFCMATERIALPROPERTIES:()=>IFCMATERIALPROPERTIES,IFCMATERIALRELATIONSHIP:()=>IFCMATERIALRELATIONSHIP,IFCMATERIALUSAGEDEFINITION:()=>IFCMATERIALUSAGEDEFINITION,IFCMEASUREWITHUNIT:()=>IFCMEASUREWITHUNIT,IFCMECHANICALFASTENER:()=>IFCMECHANICALFASTENER,IFCMECHANICALFASTENERTYPE:()=>IFCMECHANICALFASTENERTYPE,IFCMEDICALDEVICE:()=>IFCMEDICALDEVICE,IFCMEDICALDEVICETYPE:()=>IFCMEDICALDEVICETYPE,IFCMEMBER:()=>IFCMEMBER,IFCMEMBERSTANDARDCASE:()=>IFCMEMBERSTANDARDCASE,IFCMEMBERTYPE:()=>IFCMEMBERTYPE,IFCMETRIC:()=>IFCMETRIC,IFCMIRROREDPROFILEDEF:()=>IFCMIRROREDPROFILEDEF,IFCMONETARYUNIT:()=>IFCMONETARYUNIT,IFCMOTORCONNECTION:()=>IFCMOTORCONNECTION,IFCMOTORCONNECTIONTYPE:()=>IFCMOTORCONNECTIONTYPE,IFCNAMEDUNIT:()=>IFCNAMEDUNIT,IFCOBJECT:()=>IFCOBJECT,IFCOBJECTDEFINITION:()=>IFCOBJECTDEFINITION,IFCOBJECTIVE:()=>IFCOBJECTIVE,IFCOBJECTPLACEMENT:()=>IFCOBJECTPLACEMENT,IFCOCCUPANT:()=>IFCOCCUPANT,IFCOFFSETCURVE:()=>IFCOFFSETCURVE,IFCOFFSETCURVE2D:()=>IFCOFFSETCURVE2D,IFCOFFSETCURVE3D:()=>IFCOFFSETCURVE3D,IFCOFFSETCURVEBYDISTANCES:()=>IFCOFFSETCURVEBYDISTANCES,IFCOPENINGELEMENT:()=>IFCOPENINGELEMENT,IFCOPENINGSTANDARDCASE:()=>IFCOPENINGSTANDARDCASE,IFCOPENSHELL:()=>IFCOPENSHELL,IFCORGANIZATION:()=>IFCORGANIZATION,IFCORGANIZATIONRELATIONSHIP:()=>IFCORGANIZATIONRELATIONSHIP,IFCORIENTATIONEXPRESSION:()=>IFCORIENTATIONEXPRESSION,IFCORIENTEDEDGE:()=>IFCORIENTEDEDGE,IFCOUTERBOUNDARYCURVE:()=>IFCOUTERBOUNDARYCURVE,IFCOUTLET:()=>IFCOUTLET,IFCOUTLETTYPE:()=>IFCOUTLETTYPE,IFCOWNERHISTORY:()=>IFCOWNERHISTORY,IFCPARAMETERIZEDPROFILEDEF:()=>IFCPARAMETERIZEDPROFILEDEF,IFCPATH:()=>IFCPATH,IFCPCURVE:()=>IFCPCURVE,IFCPERFORMANCEHISTORY:()=>IFCPERFORMANCEHISTORY,IFCPERMEABLECOVERINGPROPERTIES:()=>IFCPERMEABLECOVERINGPROPERTIES,IFCPERMIT:()=>IFCPERMIT,IFCPERSON:()=>IFCPERSON,IFCPERSONANDORGANIZATION:()=>IFCPERSONANDORGANIZATION,IFCPHYSICALCOMPLEXQUANTITY:()=>IFCPHYSICALCOMPLEXQUANTITY,IFCPHYSICALQUANTITY:()=>IFCPHYSICALQUANTITY,IFCPHYSICALSIMPLEQUANTITY:()=>IFCPHYSICALSIMPLEQUANTITY,IFCPILE:()=>IFCPILE,IFCPILETYPE:()=>IFCPILETYPE,IFCPIPEFITTING:()=>IFCPIPEFITTING,IFCPIPEFITTINGTYPE:()=>IFCPIPEFITTINGTYPE,IFCPIPESEGMENT:()=>IFCPIPESEGMENT,IFCPIPESEGMENTTYPE:()=>IFCPIPESEGMENTTYPE,IFCPIXELTEXTURE:()=>IFCPIXELTEXTURE,IFCPLACEMENT:()=>IFCPLACEMENT,IFCPLANARBOX:()=>IFCPLANARBOX,IFCPLANAREXTENT:()=>IFCPLANAREXTENT,IFCPLANE:()=>IFCPLANE,IFCPLATE:()=>IFCPLATE,IFCPLATESTANDARDCASE:()=>IFCPLATESTANDARDCASE,IFCPLATETYPE:()=>IFCPLATETYPE,IFCPOINT:()=>IFCPOINT,IFCPOINTONCURVE:()=>IFCPOINTONCURVE,IFCPOINTONSURFACE:()=>IFCPOINTONSURFACE,IFCPOLYGONALBOUNDEDHALFSPACE:()=>IFCPOLYGONALBOUNDEDHALFSPACE,IFCPOLYGONALFACESET:()=>IFCPOLYGONALFACESET,IFCPOLYLINE:()=>IFCPOLYLINE,IFCPOLYLOOP:()=>IFCPOLYLOOP,IFCPORT:()=>IFCPORT,IFCPOSITIONINGELEMENT:()=>IFCPOSITIONINGELEMENT,IFCPOSTALADDRESS:()=>IFCPOSTALADDRESS,IFCPREDEFINEDCOLOUR:()=>IFCPREDEFINEDCOLOUR,IFCPREDEFINEDCURVEFONT:()=>IFCPREDEFINEDCURVEFONT,IFCPREDEFINEDITEM:()=>IFCPREDEFINEDITEM,IFCPREDEFINEDPROPERTIES:()=>IFCPREDEFINEDPROPERTIES,IFCPREDEFINEDPROPERTYSET:()=>IFCPREDEFINEDPROPERTYSET,IFCPREDEFINEDTEXTFONT:()=>IFCPREDEFINEDTEXTFONT,IFCPRESENTATIONITEM:()=>IFCPRESENTATIONITEM,IFCPRESENTATIONLAYERASSIGNMENT:()=>IFCPRESENTATIONLAYERASSIGNMENT,IFCPRESENTATIONLAYERWITHSTYLE:()=>IFCPRESENTATIONLAYERWITHSTYLE,IFCPRESENTATIONSTYLE:()=>IFCPRESENTATIONSTYLE,IFCPRESENTATIONSTYLEASSIGNMENT:()=>IFCPRESENTATIONSTYLEASSIGNMENT,IFCPROCEDURE:()=>IFCPROCEDURE,IFCPROCEDURETYPE:()=>IFCPROCEDURETYPE,IFCPROCESS:()=>IFCPROCESS,IFCPRODUCT:()=>IFCPRODUCT,IFCPRODUCTDEFINITIONSHAPE:()=>IFCPRODUCTDEFINITIONSHAPE,IFCPRODUCTREPRESENTATION:()=>IFCPRODUCTREPRESENTATION,IFCPROFILEDEF:()=>IFCPROFILEDEF,IFCPROFILEPROPERTIES:()=>IFCPROFILEPROPERTIES,IFCPROJECT:()=>IFCPROJECT,IFCPROJECTEDCRS:()=>IFCPROJECTEDCRS,IFCPROJECTIONELEMENT:()=>IFCPROJECTIONELEMENT,IFCPROJECTLIBRARY:()=>IFCPROJECTLIBRARY,IFCPROJECTORDER:()=>IFCPROJECTORDER,IFCPROPERTY:()=>IFCPROPERTY,IFCPROPERTYABSTRACTION:()=>IFCPROPERTYABSTRACTION,IFCPROPERTYBOUNDEDVALUE:()=>IFCPROPERTYBOUNDEDVALUE,IFCPROPERTYDEFINITION:()=>IFCPROPERTYDEFINITION,IFCPROPERTYDEPENDENCYRELATIONSHIP:()=>IFCPROPERTYDEPENDENCYRELATIONSHIP,IFCPROPERTYENUMERATEDVALUE:()=>IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYENUMERATION:()=>IFCPROPERTYENUMERATION,IFCPROPERTYLISTVALUE:()=>IFCPROPERTYLISTVALUE,IFCPROPERTYREFERENCEVALUE:()=>IFCPROPERTYREFERENCEVALUE,IFCPROPERTYSET:()=>IFCPROPERTYSET,IFCPROPERTYSETDEFINITION:()=>IFCPROPERTYSETDEFINITION,IFCPROPERTYSETTEMPLATE:()=>IFCPROPERTYSETTEMPLATE,IFCPROPERTYSINGLEVALUE:()=>IFCPROPERTYSINGLEVALUE,IFCPROPERTYTABLEVALUE:()=>IFCPROPERTYTABLEVALUE,IFCPROPERTYTEMPLATE:()=>IFCPROPERTYTEMPLATE,IFCPROPERTYTEMPLATEDEFINITION:()=>IFCPROPERTYTEMPLATEDEFINITION,IFCPROTECTIVEDEVICE:()=>IFCPROTECTIVEDEVICE,IFCPROTECTIVEDEVICETRIPPINGUNIT:()=>IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE:()=>IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCPROTECTIVEDEVICETYPE:()=>IFCPROTECTIVEDEVICETYPE,IFCPROXY:()=>IFCPROXY,IFCPUMP:()=>IFCPUMP,IFCPUMPTYPE:()=>IFCPUMPTYPE,IFCQUANTITYAREA:()=>IFCQUANTITYAREA,IFCQUANTITYCOUNT:()=>IFCQUANTITYCOUNT,IFCQUANTITYLENGTH:()=>IFCQUANTITYLENGTH,IFCQUANTITYSET:()=>IFCQUANTITYSET,IFCQUANTITYTIME:()=>IFCQUANTITYTIME,IFCQUANTITYVOLUME:()=>IFCQUANTITYVOLUME,IFCQUANTITYWEIGHT:()=>IFCQUANTITYWEIGHT,IFCRAILING:()=>IFCRAILING,IFCRAILINGTYPE:()=>IFCRAILINGTYPE,IFCRAMP:()=>IFCRAMP,IFCRAMPFLIGHT:()=>IFCRAMPFLIGHT,IFCRAMPFLIGHTTYPE:()=>IFCRAMPFLIGHTTYPE,IFCRAMPTYPE:()=>IFCRAMPTYPE,IFCRATIONALBSPLINECURVEWITHKNOTS:()=>IFCRATIONALBSPLINECURVEWITHKNOTS,IFCRATIONALBSPLINESURFACEWITHKNOTS:()=>IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCRECTANGLEHOLLOWPROFILEDEF:()=>IFCRECTANGLEHOLLOWPROFILEDEF,IFCRECTANGLEPROFILEDEF:()=>IFCRECTANGLEPROFILEDEF,IFCRECTANGULARPYRAMID:()=>IFCRECTANGULARPYRAMID,IFCRECTANGULARTRIMMEDSURFACE:()=>IFCRECTANGULARTRIMMEDSURFACE,IFCRECURRENCEPATTERN:()=>IFCRECURRENCEPATTERN,IFCREFERENCE:()=>IFCREFERENCE,IFCREFERENT:()=>IFCREFERENT,IFCREGULARTIMESERIES:()=>IFCREGULARTIMESERIES,IFCREINFORCEMENTBARPROPERTIES:()=>IFCREINFORCEMENTBARPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES:()=>IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCREINFORCINGBAR:()=>IFCREINFORCINGBAR,IFCREINFORCINGBARTYPE:()=>IFCREINFORCINGBARTYPE,IFCREINFORCINGELEMENT:()=>IFCREINFORCINGELEMENT,IFCREINFORCINGELEMENTTYPE:()=>IFCREINFORCINGELEMENTTYPE,IFCREINFORCINGMESH:()=>IFCREINFORCINGMESH,IFCREINFORCINGMESHTYPE:()=>IFCREINFORCINGMESHTYPE,IFCRELAGGREGATES:()=>IFCRELAGGREGATES,IFCRELASSIGNS:()=>IFCRELASSIGNS,IFCRELASSIGNSTOACTOR:()=>IFCRELASSIGNSTOACTOR,IFCRELASSIGNSTOCONTROL:()=>IFCRELASSIGNSTOCONTROL,IFCRELASSIGNSTOGROUP:()=>IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTOGROUPBYFACTOR:()=>IFCRELASSIGNSTOGROUPBYFACTOR,IFCRELASSIGNSTOPROCESS:()=>IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOPRODUCT:()=>IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTORESOURCE:()=>IFCRELASSIGNSTORESOURCE,IFCRELASSOCIATES:()=>IFCRELASSOCIATES,IFCRELASSOCIATESAPPROVAL:()=>IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATESCLASSIFICATION:()=>IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESCONSTRAINT:()=>IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESDOCUMENT:()=>IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESLIBRARY:()=>IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESMATERIAL:()=>IFCRELASSOCIATESMATERIAL,IFCRELATIONSHIP:()=>IFCRELATIONSHIP,IFCRELCONNECTS:()=>IFCRELCONNECTS,IFCRELCONNECTSELEMENTS:()=>IFCRELCONNECTSELEMENTS,IFCRELCONNECTSPATHELEMENTS:()=>IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSPORTS:()=>IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT:()=>IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSSTRUCTURALACTIVITY:()=>IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSSTRUCTURALMEMBER:()=>IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSWITHECCENTRICITY:()=>IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSWITHREALIZINGELEMENTS:()=>IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE:()=>IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCOVERSBLDGELEMENTS:()=>IFCRELCOVERSBLDGELEMENTS,IFCRELCOVERSSPACES:()=>IFCRELCOVERSSPACES,IFCRELDECLARES:()=>IFCRELDECLARES,IFCRELDECOMPOSES:()=>IFCRELDECOMPOSES,IFCRELDEFINES:()=>IFCRELDEFINES,IFCRELDEFINESBYOBJECT:()=>IFCRELDEFINESBYOBJECT,IFCRELDEFINESBYPROPERTIES:()=>IFCRELDEFINESBYPROPERTIES,IFCRELDEFINESBYTEMPLATE:()=>IFCRELDEFINESBYTEMPLATE,IFCRELDEFINESBYTYPE:()=>IFCRELDEFINESBYTYPE,IFCRELFILLSELEMENT:()=>IFCRELFILLSELEMENT,IFCRELFLOWCONTROLELEMENTS:()=>IFCRELFLOWCONTROLELEMENTS,IFCRELINTERFERESELEMENTS:()=>IFCRELINTERFERESELEMENTS,IFCRELNESTS:()=>IFCRELNESTS,IFCRELPOSITIONS:()=>IFCRELPOSITIONS,IFCRELPROJECTSELEMENT:()=>IFCRELPROJECTSELEMENT,IFCRELREFERENCEDINSPATIALSTRUCTURE:()=>IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELSEQUENCE:()=>IFCRELSEQUENCE,IFCRELSERVICESBUILDINGS:()=>IFCRELSERVICESBUILDINGS,IFCRELSPACEBOUNDARY:()=>IFCRELSPACEBOUNDARY,IFCRELSPACEBOUNDARY1STLEVEL:()=>IFCRELSPACEBOUNDARY1STLEVEL,IFCRELSPACEBOUNDARY2NDLEVEL:()=>IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELVOIDSELEMENT:()=>IFCRELVOIDSELEMENT,IFCREPARAMETRISEDCOMPOSITECURVESEGMENT:()=>IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,IFCREPRESENTATION:()=>IFCREPRESENTATION,IFCREPRESENTATIONCONTEXT:()=>IFCREPRESENTATIONCONTEXT,IFCREPRESENTATIONITEM:()=>IFCREPRESENTATIONITEM,IFCREPRESENTATIONMAP:()=>IFCREPRESENTATIONMAP,IFCRESOURCE:()=>IFCRESOURCE,IFCRESOURCEAPPROVALRELATIONSHIP:()=>IFCRESOURCEAPPROVALRELATIONSHIP,IFCRESOURCECONSTRAINTRELATIONSHIP:()=>IFCRESOURCECONSTRAINTRELATIONSHIP,IFCRESOURCELEVELRELATIONSHIP:()=>IFCRESOURCELEVELRELATIONSHIP,IFCRESOURCETIME:()=>IFCRESOURCETIME,IFCREVOLVEDAREASOLID:()=>IFCREVOLVEDAREASOLID,IFCREVOLVEDAREASOLIDTAPERED:()=>IFCREVOLVEDAREASOLIDTAPERED,IFCRIGHTCIRCULARCONE:()=>IFCRIGHTCIRCULARCONE,IFCRIGHTCIRCULARCYLINDER:()=>IFCRIGHTCIRCULARCYLINDER,IFCROOF:()=>IFCROOF,IFCROOFTYPE:()=>IFCROOFTYPE,IFCROOT:()=>IFCROOT,IFCROUNDEDRECTANGLEPROFILEDEF:()=>IFCROUNDEDRECTANGLEPROFILEDEF,IFCSANITARYTERMINAL:()=>IFCSANITARYTERMINAL,IFCSANITARYTERMINALTYPE:()=>IFCSANITARYTERMINALTYPE,IFCSCHEDULINGTIME:()=>IFCSCHEDULINGTIME,IFCSEAMCURVE:()=>IFCSEAMCURVE,IFCSECTIONEDSOLID:()=>IFCSECTIONEDSOLID,IFCSECTIONEDSOLIDHORIZONTAL:()=>IFCSECTIONEDSOLIDHORIZONTAL,IFCSECTIONEDSPINE:()=>IFCSECTIONEDSPINE,IFCSECTIONPROPERTIES:()=>IFCSECTIONPROPERTIES,IFCSECTIONREINFORCEMENTPROPERTIES:()=>IFCSECTIONREINFORCEMENTPROPERTIES,IFCSENSOR:()=>IFCSENSOR,IFCSENSORTYPE:()=>IFCSENSORTYPE,IFCSHADINGDEVICE:()=>IFCSHADINGDEVICE,IFCSHADINGDEVICETYPE:()=>IFCSHADINGDEVICETYPE,IFCSHAPEASPECT:()=>IFCSHAPEASPECT,IFCSHAPEMODEL:()=>IFCSHAPEMODEL,IFCSHAPEREPRESENTATION:()=>IFCSHAPEREPRESENTATION,IFCSHELLBASEDSURFACEMODEL:()=>IFCSHELLBASEDSURFACEMODEL,IFCSIMPLEPROPERTY:()=>IFCSIMPLEPROPERTY,IFCSIMPLEPROPERTYTEMPLATE:()=>IFCSIMPLEPROPERTYTEMPLATE,IFCSITE:()=>IFCSITE,IFCSIUNIT:()=>IFCSIUNIT,IFCSLAB:()=>IFCSLAB,IFCSLABELEMENTEDCASE:()=>IFCSLABELEMENTEDCASE,IFCSLABSTANDARDCASE:()=>IFCSLABSTANDARDCASE,IFCSLABTYPE:()=>IFCSLABTYPE,IFCSLIPPAGECONNECTIONCONDITION:()=>IFCSLIPPAGECONNECTIONCONDITION,IFCSOLARDEVICE:()=>IFCSOLARDEVICE,IFCSOLARDEVICETYPE:()=>IFCSOLARDEVICETYPE,IFCSOLIDMODEL:()=>IFCSOLIDMODEL,IFCSPACE:()=>IFCSPACE,IFCSPACEHEATER:()=>IFCSPACEHEATER,IFCSPACEHEATERTYPE:()=>IFCSPACEHEATERTYPE,IFCSPACETYPE:()=>IFCSPACETYPE,IFCSPATIALELEMENT:()=>IFCSPATIALELEMENT,IFCSPATIALELEMENTTYPE:()=>IFCSPATIALELEMENTTYPE,IFCSPATIALSTRUCTUREELEMENT:()=>IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALSTRUCTUREELEMENTTYPE:()=>IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALZONE:()=>IFCSPATIALZONE,IFCSPATIALZONETYPE:()=>IFCSPATIALZONETYPE,IFCSPHERE:()=>IFCSPHERE,IFCSPHERICALSURFACE:()=>IFCSPHERICALSURFACE,IFCSTACKTERMINAL:()=>IFCSTACKTERMINAL,IFCSTACKTERMINALTYPE:()=>IFCSTACKTERMINALTYPE,IFCSTAIR:()=>IFCSTAIR,IFCSTAIRFLIGHT:()=>IFCSTAIRFLIGHT,IFCSTAIRFLIGHTTYPE:()=>IFCSTAIRFLIGHTTYPE,IFCSTAIRTYPE:()=>IFCSTAIRTYPE,IFCSTRUCTURALACTION:()=>IFCSTRUCTURALACTION,IFCSTRUCTURALACTIVITY:()=>IFCSTRUCTURALACTIVITY,IFCSTRUCTURALANALYSISMODEL:()=>IFCSTRUCTURALANALYSISMODEL,IFCSTRUCTURALCONNECTION:()=>IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCONNECTIONCONDITION:()=>IFCSTRUCTURALCONNECTIONCONDITION,IFCSTRUCTURALCURVEACTION:()=>IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALCURVECONNECTION:()=>IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCURVEMEMBER:()=>IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALCURVEMEMBERVARYING:()=>IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEREACTION:()=>IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALITEM:()=>IFCSTRUCTURALITEM,IFCSTRUCTURALLINEARACTION:()=>IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALLOAD:()=>IFCSTRUCTURALLOAD,IFCSTRUCTURALLOADCASE:()=>IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADCONFIGURATION:()=>IFCSTRUCTURALLOADCONFIGURATION,IFCSTRUCTURALLOADGROUP:()=>IFCSTRUCTURALLOADGROUP,IFCSTRUCTURALLOADLINEARFORCE:()=>IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADORRESULT:()=>IFCSTRUCTURALLOADORRESULT,IFCSTRUCTURALLOADPLANARFORCE:()=>IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENT:()=>IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION:()=>IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEFORCE:()=>IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEFORCEWARPING:()=>IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSTATIC:()=>IFCSTRUCTURALLOADSTATIC,IFCSTRUCTURALLOADTEMPERATURE:()=>IFCSTRUCTURALLOADTEMPERATURE,IFCSTRUCTURALMEMBER:()=>IFCSTRUCTURALMEMBER,IFCSTRUCTURALPLANARACTION:()=>IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALPOINTACTION:()=>IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPOINTCONNECTION:()=>IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALPOINTREACTION:()=>IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALREACTION:()=>IFCSTRUCTURALREACTION,IFCSTRUCTURALRESULTGROUP:()=>IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALSURFACEACTION:()=>IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALSURFACECONNECTION:()=>IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALSURFACEMEMBER:()=>IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING:()=>IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEREACTION:()=>IFCSTRUCTURALSURFACEREACTION,IFCSTYLEDITEM:()=>IFCSTYLEDITEM,IFCSTYLEDREPRESENTATION:()=>IFCSTYLEDREPRESENTATION,IFCSTYLEMODEL:()=>IFCSTYLEMODEL,IFCSUBCONTRACTRESOURCE:()=>IFCSUBCONTRACTRESOURCE,IFCSUBCONTRACTRESOURCETYPE:()=>IFCSUBCONTRACTRESOURCETYPE,IFCSUBEDGE:()=>IFCSUBEDGE,IFCSURFACE:()=>IFCSURFACE,IFCSURFACECURVE:()=>IFCSURFACECURVE,IFCSURFACECURVESWEPTAREASOLID:()=>IFCSURFACECURVESWEPTAREASOLID,IFCSURFACEFEATURE:()=>IFCSURFACEFEATURE,IFCSURFACEOFLINEAREXTRUSION:()=>IFCSURFACEOFLINEAREXTRUSION,IFCSURFACEOFREVOLUTION:()=>IFCSURFACEOFREVOLUTION,IFCSURFACEREINFORCEMENTAREA:()=>IFCSURFACEREINFORCEMENTAREA,IFCSURFACESTYLE:()=>IFCSURFACESTYLE,IFCSURFACESTYLELIGHTING:()=>IFCSURFACESTYLELIGHTING,IFCSURFACESTYLEREFRACTION:()=>IFCSURFACESTYLEREFRACTION,IFCSURFACESTYLERENDERING:()=>IFCSURFACESTYLERENDERING,IFCSURFACESTYLESHADING:()=>IFCSURFACESTYLESHADING,IFCSURFACESTYLEWITHTEXTURES:()=>IFCSURFACESTYLEWITHTEXTURES,IFCSURFACETEXTURE:()=>IFCSURFACETEXTURE,IFCSWEPTAREASOLID:()=>IFCSWEPTAREASOLID,IFCSWEPTDISKSOLID:()=>IFCSWEPTDISKSOLID,IFCSWEPTDISKSOLIDPOLYGONAL:()=>IFCSWEPTDISKSOLIDPOLYGONAL,IFCSWEPTSURFACE:()=>IFCSWEPTSURFACE,IFCSWITCHINGDEVICE:()=>IFCSWITCHINGDEVICE,IFCSWITCHINGDEVICETYPE:()=>IFCSWITCHINGDEVICETYPE,IFCSYSTEM:()=>IFCSYSTEM,IFCSYSTEMFURNITUREELEMENT:()=>IFCSYSTEMFURNITUREELEMENT,IFCSYSTEMFURNITUREELEMENTTYPE:()=>IFCSYSTEMFURNITUREELEMENTTYPE,IFCTABLE:()=>IFCTABLE,IFCTABLECOLUMN:()=>IFCTABLECOLUMN,IFCTABLEROW:()=>IFCTABLEROW,IFCTANK:()=>IFCTANK,IFCTANKTYPE:()=>IFCTANKTYPE,IFCTASK:()=>IFCTASK,IFCTASKTIME:()=>IFCTASKTIME,IFCTASKTIMERECURRING:()=>IFCTASKTIMERECURRING,IFCTASKTYPE:()=>IFCTASKTYPE,IFCTELECOMADDRESS:()=>IFCTELECOMADDRESS,IFCTENDON:()=>IFCTENDON,IFCTENDONANCHOR:()=>IFCTENDONANCHOR,IFCTENDONANCHORTYPE:()=>IFCTENDONANCHORTYPE,IFCTENDONCONDUIT:()=>IFCTENDONCONDUIT,IFCTENDONCONDUITTYPE:()=>IFCTENDONCONDUITTYPE,IFCTENDONTYPE:()=>IFCTENDONTYPE,IFCTESSELLATEDFACESET:()=>IFCTESSELLATEDFACESET,IFCTESSELLATEDITEM:()=>IFCTESSELLATEDITEM,IFCTEXTLITERAL:()=>IFCTEXTLITERAL,IFCTEXTLITERALWITHEXTENT:()=>IFCTEXTLITERALWITHEXTENT,IFCTEXTSTYLE:()=>IFCTEXTSTYLE,IFCTEXTSTYLEFONTMODEL:()=>IFCTEXTSTYLEFONTMODEL,IFCTEXTSTYLEFORDEFINEDFONT:()=>IFCTEXTSTYLEFORDEFINEDFONT,IFCTEXTSTYLETEXTMODEL:()=>IFCTEXTSTYLETEXTMODEL,IFCTEXTURECOORDINATE:()=>IFCTEXTURECOORDINATE,IFCTEXTURECOORDINATEGENERATOR:()=>IFCTEXTURECOORDINATEGENERATOR,IFCTEXTUREMAP:()=>IFCTEXTUREMAP,IFCTEXTUREVERTEX:()=>IFCTEXTUREVERTEX,IFCTEXTUREVERTEXLIST:()=>IFCTEXTUREVERTEXLIST,IFCTIMEPERIOD:()=>IFCTIMEPERIOD,IFCTIMESERIES:()=>IFCTIMESERIES,IFCTIMESERIESVALUE:()=>IFCTIMESERIESVALUE,IFCTOPOLOGICALREPRESENTATIONITEM:()=>IFCTOPOLOGICALREPRESENTATIONITEM,IFCTOPOLOGYREPRESENTATION:()=>IFCTOPOLOGYREPRESENTATION,IFCTOROIDALSURFACE:()=>IFCTOROIDALSURFACE,IFCTRANSFORMER:()=>IFCTRANSFORMER,IFCTRANSFORMERTYPE:()=>IFCTRANSFORMERTYPE,IFCTRANSITIONCURVESEGMENT2D:()=>IFCTRANSITIONCURVESEGMENT2D,IFCTRANSPORTELEMENT:()=>IFCTRANSPORTELEMENT,IFCTRANSPORTELEMENTTYPE:()=>IFCTRANSPORTELEMENTTYPE,IFCTRAPEZIUMPROFILEDEF:()=>IFCTRAPEZIUMPROFILEDEF,IFCTRIANGULATEDFACESET:()=>IFCTRIANGULATEDFACESET,IFCTRIANGULATEDIRREGULARNETWORK:()=>IFCTRIANGULATEDIRREGULARNETWORK,IFCTRIMMEDCURVE:()=>IFCTRIMMEDCURVE,IFCTSHAPEPROFILEDEF:()=>IFCTSHAPEPROFILEDEF,IFCTUBEBUNDLE:()=>IFCTUBEBUNDLE,IFCTUBEBUNDLETYPE:()=>IFCTUBEBUNDLETYPE,IFCTYPEOBJECT:()=>IFCTYPEOBJECT,IFCTYPEPROCESS:()=>IFCTYPEPROCESS,IFCTYPEPRODUCT:()=>IFCTYPEPRODUCT,IFCTYPERESOURCE:()=>IFCTYPERESOURCE,IFCUNITARYCONTROLELEMENT:()=>IFCUNITARYCONTROLELEMENT,IFCUNITARYCONTROLELEMENTTYPE:()=>IFCUNITARYCONTROLELEMENTTYPE,IFCUNITARYEQUIPMENT:()=>IFCUNITARYEQUIPMENT,IFCUNITARYEQUIPMENTTYPE:()=>IFCUNITARYEQUIPMENTTYPE,IFCUNITASSIGNMENT:()=>IFCUNITASSIGNMENT,IFCUSHAPEPROFILEDEF:()=>IFCUSHAPEPROFILEDEF,IFCVALVE:()=>IFCVALVE,IFCVALVETYPE:()=>IFCVALVETYPE,IFCVECTOR:()=>IFCVECTOR,IFCVERTEX:()=>IFCVERTEX,IFCVERTEXLOOP:()=>IFCVERTEXLOOP,IFCVERTEXPOINT:()=>IFCVERTEXPOINT,IFCVIBRATIONDAMPER:()=>IFCVIBRATIONDAMPER,IFCVIBRATIONDAMPERTYPE:()=>IFCVIBRATIONDAMPERTYPE,IFCVIBRATIONISOLATOR:()=>IFCVIBRATIONISOLATOR,IFCVIBRATIONISOLATORTYPE:()=>IFCVIBRATIONISOLATORTYPE,IFCVIRTUALELEMENT:()=>IFCVIRTUALELEMENT,IFCVIRTUALGRIDINTERSECTION:()=>IFCVIRTUALGRIDINTERSECTION,IFCVOIDINGFEATURE:()=>IFCVOIDINGFEATURE,IFCWALL:()=>IFCWALL,IFCWALLELEMENTEDCASE:()=>IFCWALLELEMENTEDCASE,IFCWALLSTANDARDCASE:()=>IFCWALLSTANDARDCASE,IFCWALLTYPE:()=>IFCWALLTYPE,IFCWASTETERMINAL:()=>IFCWASTETERMINAL,IFCWASTETERMINALTYPE:()=>IFCWASTETERMINALTYPE,IFCWINDOW:()=>IFCWINDOW,IFCWINDOWLININGPROPERTIES:()=>IFCWINDOWLININGPROPERTIES,IFCWINDOWPANELPROPERTIES:()=>IFCWINDOWPANELPROPERTIES,IFCWINDOWSTANDARDCASE:()=>IFCWINDOWSTANDARDCASE,IFCWINDOWSTYLE:()=>IFCWINDOWSTYLE,IFCWINDOWTYPE:()=>IFCWINDOWTYPE,IFCWORKCALENDAR:()=>IFCWORKCALENDAR,IFCWORKCONTROL:()=>IFCWORKCONTROL,IFCWORKPLAN:()=>IFCWORKPLAN,IFCWORKSCHEDULE:()=>IFCWORKSCHEDULE,IFCWORKTIME:()=>IFCWORKTIME,IFCZONE:()=>IFCZONE,IFCZSHAPEPROFILEDEF:()=>IFCZSHAPEPROFILEDEF,IfcAPI:()=>IfcAPI2,IfcAbsorbedDoseMeasure:()=>IfcAbsorbedDoseMeasure,IfcAccelerationMeasure:()=>IfcAccelerationMeasure,IfcActionRequest:()=>IfcActionRequest,IfcActionRequestTypeEnum:()=>IfcActionRequestTypeEnum,IfcActionSourceTypeEnum:()=>IfcActionSourceTypeEnum,IfcActionTypeEnum:()=>IfcActionTypeEnum,IfcActor:()=>IfcActor,IfcActorRole:()=>IfcActorRole,IfcActuator:()=>IfcActuator,IfcActuatorType:()=>IfcActuatorType,IfcActuatorTypeEnum:()=>IfcActuatorTypeEnum,IfcAddress:()=>IfcAddress,IfcAddressTypeEnum:()=>IfcAddressTypeEnum,IfcAdvancedBrep:()=>IfcAdvancedBrep,IfcAdvancedBrepWithVoids:()=>IfcAdvancedBrepWithVoids,IfcAdvancedFace:()=>IfcAdvancedFace,IfcAirTerminal:()=>IfcAirTerminal,IfcAirTerminalBox:()=>IfcAirTerminalBox,IfcAirTerminalBoxType:()=>IfcAirTerminalBoxType,IfcAirTerminalBoxTypeEnum:()=>IfcAirTerminalBoxTypeEnum,IfcAirTerminalType:()=>IfcAirTerminalType,IfcAirTerminalTypeEnum:()=>IfcAirTerminalTypeEnum,IfcAirToAirHeatRecovery:()=>IfcAirToAirHeatRecovery,IfcAirToAirHeatRecoveryType:()=>IfcAirToAirHeatRecoveryType,IfcAirToAirHeatRecoveryTypeEnum:()=>IfcAirToAirHeatRecoveryTypeEnum,IfcAlarm:()=>IfcAlarm,IfcAlarmType:()=>IfcAlarmType,IfcAlarmTypeEnum:()=>IfcAlarmTypeEnum,IfcAlignment:()=>IfcAlignment,IfcAlignment2DHorizontal:()=>IfcAlignment2DHorizontal,IfcAlignment2DHorizontalSegment:()=>IfcAlignment2DHorizontalSegment,IfcAlignment2DSegment:()=>IfcAlignment2DSegment,IfcAlignment2DVerSegCircularArc:()=>IfcAlignment2DVerSegCircularArc,IfcAlignment2DVerSegLine:()=>IfcAlignment2DVerSegLine,IfcAlignment2DVerSegParabolicArc:()=>IfcAlignment2DVerSegParabolicArc,IfcAlignment2DVertical:()=>IfcAlignment2DVertical,IfcAlignment2DVerticalSegment:()=>IfcAlignment2DVerticalSegment,IfcAlignmentCurve:()=>IfcAlignmentCurve,IfcAlignmentTypeEnum:()=>IfcAlignmentTypeEnum,IfcAmountOfSubstanceMeasure:()=>IfcAmountOfSubstanceMeasure,IfcAnalysisModelTypeEnum:()=>IfcAnalysisModelTypeEnum,IfcAnalysisTheoryTypeEnum:()=>IfcAnalysisTheoryTypeEnum,IfcAngularVelocityMeasure:()=>IfcAngularVelocityMeasure,IfcAnnotation:()=>IfcAnnotation,IfcAnnotationFillArea:()=>IfcAnnotationFillArea,IfcApplication:()=>IfcApplication,IfcAppliedValue:()=>IfcAppliedValue,IfcApproval:()=>IfcApproval,IfcApprovalRelationship:()=>IfcApprovalRelationship,IfcArbitraryClosedProfileDef:()=>IfcArbitraryClosedProfileDef,IfcArbitraryOpenProfileDef:()=>IfcArbitraryOpenProfileDef,IfcArbitraryProfileDefWithVoids:()=>IfcArbitraryProfileDefWithVoids,IfcAreaDensityMeasure:()=>IfcAreaDensityMeasure,IfcAreaMeasure:()=>IfcAreaMeasure,IfcArithmeticOperatorEnum:()=>IfcArithmeticOperatorEnum,IfcAssemblyPlaceEnum:()=>IfcAssemblyPlaceEnum,IfcAsset:()=>IfcAsset,IfcAsymmetricIShapeProfileDef:()=>IfcAsymmetricIShapeProfileDef,IfcAudioVisualAppliance:()=>IfcAudioVisualAppliance,IfcAudioVisualApplianceType:()=>IfcAudioVisualApplianceType,IfcAudioVisualApplianceTypeEnum:()=>IfcAudioVisualApplianceTypeEnum,IfcAxis1Placement:()=>IfcAxis1Placement,IfcAxis2Placement2D:()=>IfcAxis2Placement2D,IfcAxis2Placement3D:()=>IfcAxis2Placement3D,IfcBSplineCurve:()=>IfcBSplineCurve,IfcBSplineCurveForm:()=>IfcBSplineCurveForm,IfcBSplineCurveWithKnots:()=>IfcBSplineCurveWithKnots,IfcBSplineSurface:()=>IfcBSplineSurface,IfcBSplineSurfaceForm:()=>IfcBSplineSurfaceForm,IfcBSplineSurfaceWithKnots:()=>IfcBSplineSurfaceWithKnots,IfcBeam:()=>IfcBeam,IfcBeamStandardCase:()=>IfcBeamStandardCase,IfcBeamType:()=>IfcBeamType,IfcBeamTypeEnum:()=>IfcBeamTypeEnum,IfcBearing:()=>IfcBearing,IfcBearingType:()=>IfcBearingType,IfcBearingTypeDisplacementEnum:()=>IfcBearingTypeDisplacementEnum,IfcBearingTypeEnum:()=>IfcBearingTypeEnum,IfcBenchmarkEnum:()=>IfcBenchmarkEnum,IfcBinary:()=>IfcBinary,IfcBlobTexture:()=>IfcBlobTexture,IfcBlock:()=>IfcBlock,IfcBoiler:()=>IfcBoiler,IfcBoilerType:()=>IfcBoilerType,IfcBoilerTypeEnum:()=>IfcBoilerTypeEnum,IfcBoolean:()=>IfcBoolean,IfcBooleanClippingResult:()=>IfcBooleanClippingResult,IfcBooleanOperator:()=>IfcBooleanOperator,IfcBooleanResult:()=>IfcBooleanResult,IfcBoundaryCondition:()=>IfcBoundaryCondition,IfcBoundaryCurve:()=>IfcBoundaryCurve,IfcBoundaryEdgeCondition:()=>IfcBoundaryEdgeCondition,IfcBoundaryFaceCondition:()=>IfcBoundaryFaceCondition,IfcBoundaryNodeCondition:()=>IfcBoundaryNodeCondition,IfcBoundaryNodeConditionWarping:()=>IfcBoundaryNodeConditionWarping,IfcBoundedCurve:()=>IfcBoundedCurve,IfcBoundedSurface:()=>IfcBoundedSurface,IfcBoundingBox:()=>IfcBoundingBox,IfcBoxAlignment:()=>IfcBoxAlignment,IfcBoxedHalfSpace:()=>IfcBoxedHalfSpace,IfcBridge:()=>IfcBridge,IfcBridgePart:()=>IfcBridgePart,IfcBridgePartTypeEnum:()=>IfcBridgePartTypeEnum,IfcBridgeTypeEnum:()=>IfcBridgeTypeEnum,IfcBuilding:()=>IfcBuilding,IfcBuildingElement:()=>IfcBuildingElement,IfcBuildingElementPart:()=>IfcBuildingElementPart,IfcBuildingElementPartType:()=>IfcBuildingElementPartType,IfcBuildingElementPartTypeEnum:()=>IfcBuildingElementPartTypeEnum,IfcBuildingElementProxy:()=>IfcBuildingElementProxy,IfcBuildingElementProxyType:()=>IfcBuildingElementProxyType,IfcBuildingElementProxyTypeEnum:()=>IfcBuildingElementProxyTypeEnum,IfcBuildingElementType:()=>IfcBuildingElementType,IfcBuildingStorey:()=>IfcBuildingStorey,IfcBuildingSystem:()=>IfcBuildingSystem,IfcBuildingSystemTypeEnum:()=>IfcBuildingSystemTypeEnum,IfcBurner:()=>IfcBurner,IfcBurnerType:()=>IfcBurnerType,IfcBurnerTypeEnum:()=>IfcBurnerTypeEnum,IfcCShapeProfileDef:()=>IfcCShapeProfileDef,IfcCableCarrierFitting:()=>IfcCableCarrierFitting,IfcCableCarrierFittingType:()=>IfcCableCarrierFittingType,IfcCableCarrierFittingTypeEnum:()=>IfcCableCarrierFittingTypeEnum,IfcCableCarrierSegment:()=>IfcCableCarrierSegment,IfcCableCarrierSegmentType:()=>IfcCableCarrierSegmentType,IfcCableCarrierSegmentTypeEnum:()=>IfcCableCarrierSegmentTypeEnum,IfcCableFitting:()=>IfcCableFitting,IfcCableFittingType:()=>IfcCableFittingType,IfcCableFittingTypeEnum:()=>IfcCableFittingTypeEnum,IfcCableSegment:()=>IfcCableSegment,IfcCableSegmentType:()=>IfcCableSegmentType,IfcCableSegmentTypeEnum:()=>IfcCableSegmentTypeEnum,IfcCaissonFoundation:()=>IfcCaissonFoundation,IfcCaissonFoundationType:()=>IfcCaissonFoundationType,IfcCaissonFoundationTypeEnum:()=>IfcCaissonFoundationTypeEnum,IfcCardinalPointReference:()=>IfcCardinalPointReference,IfcCartesianPoint:()=>IfcCartesianPoint,IfcCartesianPointList:()=>IfcCartesianPointList,IfcCartesianPointList2D:()=>IfcCartesianPointList2D,IfcCartesianPointList3D:()=>IfcCartesianPointList3D,IfcCartesianTransformationOperator:()=>IfcCartesianTransformationOperator,IfcCartesianTransformationOperator2D:()=>IfcCartesianTransformationOperator2D,IfcCartesianTransformationOperator2DnonUniform:()=>IfcCartesianTransformationOperator2DnonUniform,IfcCartesianTransformationOperator3D:()=>IfcCartesianTransformationOperator3D,IfcCartesianTransformationOperator3DnonUniform:()=>IfcCartesianTransformationOperator3DnonUniform,IfcCenterLineProfileDef:()=>IfcCenterLineProfileDef,IfcChangeActionEnum:()=>IfcChangeActionEnum,IfcChiller:()=>IfcChiller,IfcChillerType:()=>IfcChillerType,IfcChillerTypeEnum:()=>IfcChillerTypeEnum,IfcChimney:()=>IfcChimney,IfcChimneyType:()=>IfcChimneyType,IfcChimneyTypeEnum:()=>IfcChimneyTypeEnum,IfcCircle:()=>IfcCircle,IfcCircleHollowProfileDef:()=>IfcCircleHollowProfileDef,IfcCircleProfileDef:()=>IfcCircleProfileDef,IfcCircularArcSegment2D:()=>IfcCircularArcSegment2D,IfcCivilElement:()=>IfcCivilElement,IfcCivilElementType:()=>IfcCivilElementType,IfcClassification:()=>IfcClassification,IfcClassificationReference:()=>IfcClassificationReference,IfcClosedShell:()=>IfcClosedShell,IfcCoil:()=>IfcCoil,IfcCoilType:()=>IfcCoilType,IfcCoilTypeEnum:()=>IfcCoilTypeEnum,IfcColourRgb:()=>IfcColourRgb,IfcColourRgbList:()=>IfcColourRgbList,IfcColourSpecification:()=>IfcColourSpecification,IfcColumn:()=>IfcColumn,IfcColumnStandardCase:()=>IfcColumnStandardCase,IfcColumnType:()=>IfcColumnType,IfcColumnTypeEnum:()=>IfcColumnTypeEnum,IfcCommunicationsAppliance:()=>IfcCommunicationsAppliance,IfcCommunicationsApplianceType:()=>IfcCommunicationsApplianceType,IfcCommunicationsApplianceTypeEnum:()=>IfcCommunicationsApplianceTypeEnum,IfcComplexProperty:()=>IfcComplexProperty,IfcComplexPropertyTemplate:()=>IfcComplexPropertyTemplate,IfcComplexPropertyTemplateTypeEnum:()=>IfcComplexPropertyTemplateTypeEnum,IfcCompositeCurve:()=>IfcCompositeCurve,IfcCompositeCurveOnSurface:()=>IfcCompositeCurveOnSurface,IfcCompositeCurveSegment:()=>IfcCompositeCurveSegment,IfcCompositeProfileDef:()=>IfcCompositeProfileDef,IfcCompressor:()=>IfcCompressor,IfcCompressorType:()=>IfcCompressorType,IfcCompressorTypeEnum:()=>IfcCompressorTypeEnum,IfcCondenser:()=>IfcCondenser,IfcCondenserType:()=>IfcCondenserType,IfcCondenserTypeEnum:()=>IfcCondenserTypeEnum,IfcConic:()=>IfcConic,IfcConnectedFaceSet:()=>IfcConnectedFaceSet,IfcConnectionCurveGeometry:()=>IfcConnectionCurveGeometry,IfcConnectionGeometry:()=>IfcConnectionGeometry,IfcConnectionPointEccentricity:()=>IfcConnectionPointEccentricity,IfcConnectionPointGeometry:()=>IfcConnectionPointGeometry,IfcConnectionSurfaceGeometry:()=>IfcConnectionSurfaceGeometry,IfcConnectionTypeEnum:()=>IfcConnectionTypeEnum,IfcConnectionVolumeGeometry:()=>IfcConnectionVolumeGeometry,IfcConstraint:()=>IfcConstraint,IfcConstraintEnum:()=>IfcConstraintEnum,IfcConstructionEquipmentResource:()=>IfcConstructionEquipmentResource,IfcConstructionEquipmentResourceType:()=>IfcConstructionEquipmentResourceType,IfcConstructionEquipmentResourceTypeEnum:()=>IfcConstructionEquipmentResourceTypeEnum,IfcConstructionMaterialResource:()=>IfcConstructionMaterialResource,IfcConstructionMaterialResourceType:()=>IfcConstructionMaterialResourceType,IfcConstructionMaterialResourceTypeEnum:()=>IfcConstructionMaterialResourceTypeEnum,IfcConstructionProductResource:()=>IfcConstructionProductResource,IfcConstructionProductResourceType:()=>IfcConstructionProductResourceType,IfcConstructionProductResourceTypeEnum:()=>IfcConstructionProductResourceTypeEnum,IfcConstructionResource:()=>IfcConstructionResource,IfcConstructionResourceType:()=>IfcConstructionResourceType,IfcContext:()=>IfcContext,IfcContextDependentMeasure:()=>IfcContextDependentMeasure,IfcContextDependentUnit:()=>IfcContextDependentUnit,IfcControl:()=>IfcControl,IfcController:()=>IfcController,IfcControllerType:()=>IfcControllerType,IfcControllerTypeEnum:()=>IfcControllerTypeEnum,IfcConversionBasedUnit:()=>IfcConversionBasedUnit,IfcConversionBasedUnitWithOffset:()=>IfcConversionBasedUnitWithOffset,IfcCooledBeam:()=>IfcCooledBeam,IfcCooledBeamType:()=>IfcCooledBeamType,IfcCooledBeamTypeEnum:()=>IfcCooledBeamTypeEnum,IfcCoolingTower:()=>IfcCoolingTower,IfcCoolingTowerType:()=>IfcCoolingTowerType,IfcCoolingTowerTypeEnum:()=>IfcCoolingTowerTypeEnum,IfcCoordinateOperation:()=>IfcCoordinateOperation,IfcCoordinateReferenceSystem:()=>IfcCoordinateReferenceSystem,IfcCostItem:()=>IfcCostItem,IfcCostItemTypeEnum:()=>IfcCostItemTypeEnum,IfcCostSchedule:()=>IfcCostSchedule,IfcCostScheduleTypeEnum:()=>IfcCostScheduleTypeEnum,IfcCostValue:()=>IfcCostValue,IfcCountMeasure:()=>IfcCountMeasure,IfcCovering:()=>IfcCovering,IfcCoveringType:()=>IfcCoveringType,IfcCoveringTypeEnum:()=>IfcCoveringTypeEnum,IfcCrewResource:()=>IfcCrewResource,IfcCrewResourceType:()=>IfcCrewResourceType,IfcCrewResourceTypeEnum:()=>IfcCrewResourceTypeEnum,IfcCsgPrimitive3D:()=>IfcCsgPrimitive3D,IfcCsgSolid:()=>IfcCsgSolid,IfcCurrencyRelationship:()=>IfcCurrencyRelationship,IfcCurtainWall:()=>IfcCurtainWall,IfcCurtainWallType:()=>IfcCurtainWallType,IfcCurtainWallTypeEnum:()=>IfcCurtainWallTypeEnum,IfcCurvatureMeasure:()=>IfcCurvatureMeasure,IfcCurve:()=>IfcCurve,IfcCurveBoundedPlane:()=>IfcCurveBoundedPlane,IfcCurveBoundedSurface:()=>IfcCurveBoundedSurface,IfcCurveInterpolationEnum:()=>IfcCurveInterpolationEnum,IfcCurveSegment2D:()=>IfcCurveSegment2D,IfcCurveStyle:()=>IfcCurveStyle,IfcCurveStyleFont:()=>IfcCurveStyleFont,IfcCurveStyleFontAndScaling:()=>IfcCurveStyleFontAndScaling,IfcCurveStyleFontPattern:()=>IfcCurveStyleFontPattern,IfcCylindricalSurface:()=>IfcCylindricalSurface,IfcDamper:()=>IfcDamper,IfcDamperType:()=>IfcDamperType,IfcDamperTypeEnum:()=>IfcDamperTypeEnum,IfcDataOriginEnum:()=>IfcDataOriginEnum,IfcDate:()=>IfcDate,IfcDateTime:()=>IfcDateTime,IfcDayInMonthNumber:()=>IfcDayInMonthNumber,IfcDayInWeekNumber:()=>IfcDayInWeekNumber,IfcDeepFoundation:()=>IfcDeepFoundation,IfcDeepFoundationType:()=>IfcDeepFoundationType,IfcDerivedProfileDef:()=>IfcDerivedProfileDef,IfcDerivedUnit:()=>IfcDerivedUnit,IfcDerivedUnitElement:()=>IfcDerivedUnitElement,IfcDerivedUnitEnum:()=>IfcDerivedUnitEnum,IfcDescriptiveMeasure:()=>IfcDescriptiveMeasure,IfcDimensionCount:()=>IfcDimensionCount,IfcDimensionalExponents:()=>IfcDimensionalExponents,IfcDirection:()=>IfcDirection,IfcDirectionSenseEnum:()=>IfcDirectionSenseEnum,IfcDiscreteAccessory:()=>IfcDiscreteAccessory,IfcDiscreteAccessoryType:()=>IfcDiscreteAccessoryType,IfcDiscreteAccessoryTypeEnum:()=>IfcDiscreteAccessoryTypeEnum,IfcDistanceExpression:()=>IfcDistanceExpression,IfcDistributionChamberElement:()=>IfcDistributionChamberElement,IfcDistributionChamberElementType:()=>IfcDistributionChamberElementType,IfcDistributionChamberElementTypeEnum:()=>IfcDistributionChamberElementTypeEnum,IfcDistributionCircuit:()=>IfcDistributionCircuit,IfcDistributionControlElement:()=>IfcDistributionControlElement,IfcDistributionControlElementType:()=>IfcDistributionControlElementType,IfcDistributionElement:()=>IfcDistributionElement,IfcDistributionElementType:()=>IfcDistributionElementType,IfcDistributionFlowElement:()=>IfcDistributionFlowElement,IfcDistributionFlowElementType:()=>IfcDistributionFlowElementType,IfcDistributionPort:()=>IfcDistributionPort,IfcDistributionPortTypeEnum:()=>IfcDistributionPortTypeEnum,IfcDistributionSystem:()=>IfcDistributionSystem,IfcDistributionSystemEnum:()=>IfcDistributionSystemEnum,IfcDocumentConfidentialityEnum:()=>IfcDocumentConfidentialityEnum,IfcDocumentInformation:()=>IfcDocumentInformation,IfcDocumentInformationRelationship:()=>IfcDocumentInformationRelationship,IfcDocumentReference:()=>IfcDocumentReference,IfcDocumentStatusEnum:()=>IfcDocumentStatusEnum,IfcDoor:()=>IfcDoor,IfcDoorLiningProperties:()=>IfcDoorLiningProperties,IfcDoorPanelOperationEnum:()=>IfcDoorPanelOperationEnum,IfcDoorPanelPositionEnum:()=>IfcDoorPanelPositionEnum,IfcDoorPanelProperties:()=>IfcDoorPanelProperties,IfcDoorStandardCase:()=>IfcDoorStandardCase,IfcDoorStyle:()=>IfcDoorStyle,IfcDoorStyleConstructionEnum:()=>IfcDoorStyleConstructionEnum,IfcDoorStyleOperationEnum:()=>IfcDoorStyleOperationEnum,IfcDoorType:()=>IfcDoorType,IfcDoorTypeEnum:()=>IfcDoorTypeEnum,IfcDoorTypeOperationEnum:()=>IfcDoorTypeOperationEnum,IfcDoseEquivalentMeasure:()=>IfcDoseEquivalentMeasure,IfcDraughtingPreDefinedColour:()=>IfcDraughtingPreDefinedColour,IfcDraughtingPreDefinedCurveFont:()=>IfcDraughtingPreDefinedCurveFont,IfcDuctFitting:()=>IfcDuctFitting,IfcDuctFittingType:()=>IfcDuctFittingType,IfcDuctFittingTypeEnum:()=>IfcDuctFittingTypeEnum,IfcDuctSegment:()=>IfcDuctSegment,IfcDuctSegmentType:()=>IfcDuctSegmentType,IfcDuctSegmentTypeEnum:()=>IfcDuctSegmentTypeEnum,IfcDuctSilencer:()=>IfcDuctSilencer,IfcDuctSilencerType:()=>IfcDuctSilencerType,IfcDuctSilencerTypeEnum:()=>IfcDuctSilencerTypeEnum,IfcDuration:()=>IfcDuration,IfcDynamicViscosityMeasure:()=>IfcDynamicViscosityMeasure,IfcEdge:()=>IfcEdge,IfcEdgeCurve:()=>IfcEdgeCurve,IfcEdgeLoop:()=>IfcEdgeLoop,IfcElectricAppliance:()=>IfcElectricAppliance,IfcElectricApplianceType:()=>IfcElectricApplianceType,IfcElectricApplianceTypeEnum:()=>IfcElectricApplianceTypeEnum,IfcElectricCapacitanceMeasure:()=>IfcElectricCapacitanceMeasure,IfcElectricChargeMeasure:()=>IfcElectricChargeMeasure,IfcElectricConductanceMeasure:()=>IfcElectricConductanceMeasure,IfcElectricCurrentMeasure:()=>IfcElectricCurrentMeasure,IfcElectricDistributionBoard:()=>IfcElectricDistributionBoard,IfcElectricDistributionBoardType:()=>IfcElectricDistributionBoardType,IfcElectricDistributionBoardTypeEnum:()=>IfcElectricDistributionBoardTypeEnum,IfcElectricFlowStorageDevice:()=>IfcElectricFlowStorageDevice,IfcElectricFlowStorageDeviceType:()=>IfcElectricFlowStorageDeviceType,IfcElectricFlowStorageDeviceTypeEnum:()=>IfcElectricFlowStorageDeviceTypeEnum,IfcElectricGenerator:()=>IfcElectricGenerator,IfcElectricGeneratorType:()=>IfcElectricGeneratorType,IfcElectricGeneratorTypeEnum:()=>IfcElectricGeneratorTypeEnum,IfcElectricMotor:()=>IfcElectricMotor,IfcElectricMotorType:()=>IfcElectricMotorType,IfcElectricMotorTypeEnum:()=>IfcElectricMotorTypeEnum,IfcElectricResistanceMeasure:()=>IfcElectricResistanceMeasure,IfcElectricTimeControl:()=>IfcElectricTimeControl,IfcElectricTimeControlType:()=>IfcElectricTimeControlType,IfcElectricTimeControlTypeEnum:()=>IfcElectricTimeControlTypeEnum,IfcElectricVoltageMeasure:()=>IfcElectricVoltageMeasure,IfcElement:()=>IfcElement,IfcElementAssembly:()=>IfcElementAssembly,IfcElementAssemblyType:()=>IfcElementAssemblyType,IfcElementAssemblyTypeEnum:()=>IfcElementAssemblyTypeEnum,IfcElementComponent:()=>IfcElementComponent,IfcElementComponentType:()=>IfcElementComponentType,IfcElementCompositionEnum:()=>IfcElementCompositionEnum,IfcElementQuantity:()=>IfcElementQuantity,IfcElementType:()=>IfcElementType,IfcElementarySurface:()=>IfcElementarySurface,IfcElements:()=>IfcElements,IfcEllipse:()=>IfcEllipse,IfcEllipseProfileDef:()=>IfcEllipseProfileDef,IfcEnergyConversionDevice:()=>IfcEnergyConversionDevice,IfcEnergyConversionDeviceType:()=>IfcEnergyConversionDeviceType,IfcEnergyMeasure:()=>IfcEnergyMeasure,IfcEngine:()=>IfcEngine,IfcEngineType:()=>IfcEngineType,IfcEngineTypeEnum:()=>IfcEngineTypeEnum,IfcEvaporativeCooler:()=>IfcEvaporativeCooler,IfcEvaporativeCoolerType:()=>IfcEvaporativeCoolerType,IfcEvaporativeCoolerTypeEnum:()=>IfcEvaporativeCoolerTypeEnum,IfcEvaporator:()=>IfcEvaporator,IfcEvaporatorType:()=>IfcEvaporatorType,IfcEvaporatorTypeEnum:()=>IfcEvaporatorTypeEnum,IfcEvent:()=>IfcEvent,IfcEventTime:()=>IfcEventTime,IfcEventTriggerTypeEnum:()=>IfcEventTriggerTypeEnum,IfcEventType:()=>IfcEventType,IfcEventTypeEnum:()=>IfcEventTypeEnum,IfcExtendedProperties:()=>IfcExtendedProperties,IfcExternalInformation:()=>IfcExternalInformation,IfcExternalReference:()=>IfcExternalReference,IfcExternalReferenceRelationship:()=>IfcExternalReferenceRelationship,IfcExternalSpatialElement:()=>IfcExternalSpatialElement,IfcExternalSpatialElementTypeEnum:()=>IfcExternalSpatialElementTypeEnum,IfcExternalSpatialStructureElement:()=>IfcExternalSpatialStructureElement,IfcExternallyDefinedHatchStyle:()=>IfcExternallyDefinedHatchStyle,IfcExternallyDefinedSurfaceStyle:()=>IfcExternallyDefinedSurfaceStyle,IfcExternallyDefinedTextFont:()=>IfcExternallyDefinedTextFont,IfcExtrudedAreaSolid:()=>IfcExtrudedAreaSolid,IfcExtrudedAreaSolidTapered:()=>IfcExtrudedAreaSolidTapered,IfcFace:()=>IfcFace,IfcFaceBasedSurfaceModel:()=>IfcFaceBasedSurfaceModel,IfcFaceBound:()=>IfcFaceBound,IfcFaceOuterBound:()=>IfcFaceOuterBound,IfcFaceSurface:()=>IfcFaceSurface,IfcFacetedBrep:()=>IfcFacetedBrep,IfcFacetedBrepWithVoids:()=>IfcFacetedBrepWithVoids,IfcFacility:()=>IfcFacility,IfcFacilityPart:()=>IfcFacilityPart,IfcFailureConnectionCondition:()=>IfcFailureConnectionCondition,IfcFan:()=>IfcFan,IfcFanType:()=>IfcFanType,IfcFanTypeEnum:()=>IfcFanTypeEnum,IfcFastener:()=>IfcFastener,IfcFastenerType:()=>IfcFastenerType,IfcFastenerTypeEnum:()=>IfcFastenerTypeEnum,IfcFeatureElement:()=>IfcFeatureElement,IfcFeatureElementAddition:()=>IfcFeatureElementAddition,IfcFeatureElementSubtraction:()=>IfcFeatureElementSubtraction,IfcFillAreaStyle:()=>IfcFillAreaStyle,IfcFillAreaStyleHatching:()=>IfcFillAreaStyleHatching,IfcFillAreaStyleTiles:()=>IfcFillAreaStyleTiles,IfcFilter:()=>IfcFilter,IfcFilterType:()=>IfcFilterType,IfcFilterTypeEnum:()=>IfcFilterTypeEnum,IfcFireSuppressionTerminal:()=>IfcFireSuppressionTerminal,IfcFireSuppressionTerminalType:()=>IfcFireSuppressionTerminalType,IfcFireSuppressionTerminalTypeEnum:()=>IfcFireSuppressionTerminalTypeEnum,IfcFixedReferenceSweptAreaSolid:()=>IfcFixedReferenceSweptAreaSolid,IfcFlowController:()=>IfcFlowController,IfcFlowControllerType:()=>IfcFlowControllerType,IfcFlowDirectionEnum:()=>IfcFlowDirectionEnum,IfcFlowFitting:()=>IfcFlowFitting,IfcFlowFittingType:()=>IfcFlowFittingType,IfcFlowInstrument:()=>IfcFlowInstrument,IfcFlowInstrumentType:()=>IfcFlowInstrumentType,IfcFlowInstrumentTypeEnum:()=>IfcFlowInstrumentTypeEnum,IfcFlowMeter:()=>IfcFlowMeter,IfcFlowMeterType:()=>IfcFlowMeterType,IfcFlowMeterTypeEnum:()=>IfcFlowMeterTypeEnum,IfcFlowMovingDevice:()=>IfcFlowMovingDevice,IfcFlowMovingDeviceType:()=>IfcFlowMovingDeviceType,IfcFlowSegment:()=>IfcFlowSegment,IfcFlowSegmentType:()=>IfcFlowSegmentType,IfcFlowStorageDevice:()=>IfcFlowStorageDevice,IfcFlowStorageDeviceType:()=>IfcFlowStorageDeviceType,IfcFlowTerminal:()=>IfcFlowTerminal,IfcFlowTerminalType:()=>IfcFlowTerminalType,IfcFlowTreatmentDevice:()=>IfcFlowTreatmentDevice,IfcFlowTreatmentDeviceType:()=>IfcFlowTreatmentDeviceType,IfcFontStyle:()=>IfcFontStyle,IfcFontVariant:()=>IfcFontVariant,IfcFontWeight:()=>IfcFontWeight,IfcFooting:()=>IfcFooting,IfcFootingType:()=>IfcFootingType,IfcFootingTypeEnum:()=>IfcFootingTypeEnum,IfcForceMeasure:()=>IfcForceMeasure,IfcFrequencyMeasure:()=>IfcFrequencyMeasure,IfcFurnishingElement:()=>IfcFurnishingElement,IfcFurnishingElementType:()=>IfcFurnishingElementType,IfcFurniture:()=>IfcFurniture,IfcFurnitureType:()=>IfcFurnitureType,IfcFurnitureTypeEnum:()=>IfcFurnitureTypeEnum,IfcGeographicElement:()=>IfcGeographicElement,IfcGeographicElementType:()=>IfcGeographicElementType,IfcGeographicElementTypeEnum:()=>IfcGeographicElementTypeEnum,IfcGeometricCurveSet:()=>IfcGeometricCurveSet,IfcGeometricProjectionEnum:()=>IfcGeometricProjectionEnum,IfcGeometricRepresentationContext:()=>IfcGeometricRepresentationContext,IfcGeometricRepresentationItem:()=>IfcGeometricRepresentationItem,IfcGeometricRepresentationSubContext:()=>IfcGeometricRepresentationSubContext,IfcGeometricSet:()=>IfcGeometricSet,IfcGlobalOrLocalEnum:()=>IfcGlobalOrLocalEnum,IfcGloballyUniqueId:()=>IfcGloballyUniqueId,IfcGrid:()=>IfcGrid,IfcGridAxis:()=>IfcGridAxis,IfcGridPlacement:()=>IfcGridPlacement,IfcGridTypeEnum:()=>IfcGridTypeEnum,IfcGroup:()=>IfcGroup,IfcHalfSpaceSolid:()=>IfcHalfSpaceSolid,IfcHeatExchanger:()=>IfcHeatExchanger,IfcHeatExchangerType:()=>IfcHeatExchangerType,IfcHeatExchangerTypeEnum:()=>IfcHeatExchangerTypeEnum,IfcHeatFluxDensityMeasure:()=>IfcHeatFluxDensityMeasure,IfcHeatingValueMeasure:()=>IfcHeatingValueMeasure,IfcHumidifier:()=>IfcHumidifier,IfcHumidifierType:()=>IfcHumidifierType,IfcHumidifierTypeEnum:()=>IfcHumidifierTypeEnum,IfcIShapeProfileDef:()=>IfcIShapeProfileDef,IfcIdentifier:()=>IfcIdentifier,IfcIlluminanceMeasure:()=>IfcIlluminanceMeasure,IfcImageTexture:()=>IfcImageTexture,IfcIndexedColourMap:()=>IfcIndexedColourMap,IfcIndexedPolyCurve:()=>IfcIndexedPolyCurve,IfcIndexedPolygonalFace:()=>IfcIndexedPolygonalFace,IfcIndexedPolygonalFaceWithVoids:()=>IfcIndexedPolygonalFaceWithVoids,IfcIndexedTextureMap:()=>IfcIndexedTextureMap,IfcIndexedTriangleTextureMap:()=>IfcIndexedTriangleTextureMap,IfcInductanceMeasure:()=>IfcInductanceMeasure,IfcInteger:()=>IfcInteger,IfcIntegerCountRateMeasure:()=>IfcIntegerCountRateMeasure,IfcInterceptor:()=>IfcInterceptor,IfcInterceptorType:()=>IfcInterceptorType,IfcInterceptorTypeEnum:()=>IfcInterceptorTypeEnum,IfcInternalOrExternalEnum:()=>IfcInternalOrExternalEnum,IfcIntersectionCurve:()=>IfcIntersectionCurve,IfcInventory:()=>IfcInventory,IfcInventoryTypeEnum:()=>IfcInventoryTypeEnum,IfcIonConcentrationMeasure:()=>IfcIonConcentrationMeasure,IfcIrregularTimeSeries:()=>IfcIrregularTimeSeries,IfcIrregularTimeSeriesValue:()=>IfcIrregularTimeSeriesValue,IfcIsothermalMoistureCapacityMeasure:()=>IfcIsothermalMoistureCapacityMeasure,IfcJunctionBox:()=>IfcJunctionBox,IfcJunctionBoxType:()=>IfcJunctionBoxType,IfcJunctionBoxTypeEnum:()=>IfcJunctionBoxTypeEnum,IfcKinematicViscosityMeasure:()=>IfcKinematicViscosityMeasure,IfcKnotType:()=>IfcKnotType,IfcLShapeProfileDef:()=>IfcLShapeProfileDef,IfcLabel:()=>IfcLabel,IfcLaborResource:()=>IfcLaborResource,IfcLaborResourceType:()=>IfcLaborResourceType,IfcLaborResourceTypeEnum:()=>IfcLaborResourceTypeEnum,IfcLagTime:()=>IfcLagTime,IfcLamp:()=>IfcLamp,IfcLampType:()=>IfcLampType,IfcLampTypeEnum:()=>IfcLampTypeEnum,IfcLanguageId:()=>IfcLanguageId,IfcLayerSetDirectionEnum:()=>IfcLayerSetDirectionEnum,IfcLengthMeasure:()=>IfcLengthMeasure,IfcLibraryInformation:()=>IfcLibraryInformation,IfcLibraryReference:()=>IfcLibraryReference,IfcLightDistributionCurveEnum:()=>IfcLightDistributionCurveEnum,IfcLightDistributionData:()=>IfcLightDistributionData,IfcLightEmissionSourceEnum:()=>IfcLightEmissionSourceEnum,IfcLightFixture:()=>IfcLightFixture,IfcLightFixtureType:()=>IfcLightFixtureType,IfcLightFixtureTypeEnum:()=>IfcLightFixtureTypeEnum,IfcLightIntensityDistribution:()=>IfcLightIntensityDistribution,IfcLightSource:()=>IfcLightSource,IfcLightSourceAmbient:()=>IfcLightSourceAmbient,IfcLightSourceDirectional:()=>IfcLightSourceDirectional,IfcLightSourceGoniometric:()=>IfcLightSourceGoniometric,IfcLightSourcePositional:()=>IfcLightSourcePositional,IfcLightSourceSpot:()=>IfcLightSourceSpot,IfcLine:()=>IfcLine,IfcLineSegment2D:()=>IfcLineSegment2D,IfcLinearForceMeasure:()=>IfcLinearForceMeasure,IfcLinearMomentMeasure:()=>IfcLinearMomentMeasure,IfcLinearPlacement:()=>IfcLinearPlacement,IfcLinearPositioningElement:()=>IfcLinearPositioningElement,IfcLinearStiffnessMeasure:()=>IfcLinearStiffnessMeasure,IfcLinearVelocityMeasure:()=>IfcLinearVelocityMeasure,IfcLoadGroupTypeEnum:()=>IfcLoadGroupTypeEnum,IfcLocalPlacement:()=>IfcLocalPlacement,IfcLogical:()=>IfcLogical,IfcLogicalOperatorEnum:()=>IfcLogicalOperatorEnum,IfcLoop:()=>IfcLoop,IfcLuminousFluxMeasure:()=>IfcLuminousFluxMeasure,IfcLuminousIntensityDistributionMeasure:()=>IfcLuminousIntensityDistributionMeasure,IfcLuminousIntensityMeasure:()=>IfcLuminousIntensityMeasure,IfcMagneticFluxDensityMeasure:()=>IfcMagneticFluxDensityMeasure,IfcMagneticFluxMeasure:()=>IfcMagneticFluxMeasure,IfcManifoldSolidBrep:()=>IfcManifoldSolidBrep,IfcMapConversion:()=>IfcMapConversion,IfcMappedItem:()=>IfcMappedItem,IfcMassDensityMeasure:()=>IfcMassDensityMeasure,IfcMassFlowRateMeasure:()=>IfcMassFlowRateMeasure,IfcMassMeasure:()=>IfcMassMeasure,IfcMassPerLengthMeasure:()=>IfcMassPerLengthMeasure,IfcMaterial:()=>IfcMaterial,IfcMaterialClassificationRelationship:()=>IfcMaterialClassificationRelationship,IfcMaterialConstituent:()=>IfcMaterialConstituent,IfcMaterialConstituentSet:()=>IfcMaterialConstituentSet,IfcMaterialDefinition:()=>IfcMaterialDefinition,IfcMaterialDefinitionRepresentation:()=>IfcMaterialDefinitionRepresentation,IfcMaterialLayer:()=>IfcMaterialLayer,IfcMaterialLayerSet:()=>IfcMaterialLayerSet,IfcMaterialLayerSetUsage:()=>IfcMaterialLayerSetUsage,IfcMaterialLayerWithOffsets:()=>IfcMaterialLayerWithOffsets,IfcMaterialList:()=>IfcMaterialList,IfcMaterialProfile:()=>IfcMaterialProfile,IfcMaterialProfileSet:()=>IfcMaterialProfileSet,IfcMaterialProfileSetUsage:()=>IfcMaterialProfileSetUsage,IfcMaterialProfileSetUsageTapering:()=>IfcMaterialProfileSetUsageTapering,IfcMaterialProfileWithOffsets:()=>IfcMaterialProfileWithOffsets,IfcMaterialProperties:()=>IfcMaterialProperties,IfcMaterialRelationship:()=>IfcMaterialRelationship,IfcMaterialUsageDefinition:()=>IfcMaterialUsageDefinition,IfcMeasureWithUnit:()=>IfcMeasureWithUnit,IfcMechanicalFastener:()=>IfcMechanicalFastener,IfcMechanicalFastenerType:()=>IfcMechanicalFastenerType,IfcMechanicalFastenerTypeEnum:()=>IfcMechanicalFastenerTypeEnum,IfcMedicalDevice:()=>IfcMedicalDevice,IfcMedicalDeviceType:()=>IfcMedicalDeviceType,IfcMedicalDeviceTypeEnum:()=>IfcMedicalDeviceTypeEnum,IfcMember:()=>IfcMember,IfcMemberStandardCase:()=>IfcMemberStandardCase,IfcMemberType:()=>IfcMemberType,IfcMemberTypeEnum:()=>IfcMemberTypeEnum,IfcMetric:()=>IfcMetric,IfcMirroredProfileDef:()=>IfcMirroredProfileDef,IfcModulusOfElasticityMeasure:()=>IfcModulusOfElasticityMeasure,IfcModulusOfLinearSubgradeReactionMeasure:()=>IfcModulusOfLinearSubgradeReactionMeasure,IfcModulusOfRotationalSubgradeReactionMeasure:()=>IfcModulusOfRotationalSubgradeReactionMeasure,IfcModulusOfSubgradeReactionMeasure:()=>IfcModulusOfSubgradeReactionMeasure,IfcMoistureDiffusivityMeasure:()=>IfcMoistureDiffusivityMeasure,IfcMolecularWeightMeasure:()=>IfcMolecularWeightMeasure,IfcMomentOfInertiaMeasure:()=>IfcMomentOfInertiaMeasure,IfcMonetaryMeasure:()=>IfcMonetaryMeasure,IfcMonetaryUnit:()=>IfcMonetaryUnit,IfcMonthInYearNumber:()=>IfcMonthInYearNumber,IfcMotorConnection:()=>IfcMotorConnection,IfcMotorConnectionType:()=>IfcMotorConnectionType,IfcMotorConnectionTypeEnum:()=>IfcMotorConnectionTypeEnum,IfcNamedUnit:()=>IfcNamedUnit,IfcNonNegativeLengthMeasure:()=>IfcNonNegativeLengthMeasure,IfcNormalisedRatioMeasure:()=>IfcNormalisedRatioMeasure,IfcNullStyle:()=>IfcNullStyle,IfcNumericMeasure:()=>IfcNumericMeasure,IfcObject:()=>IfcObject,IfcObjectDefinition:()=>IfcObjectDefinition,IfcObjectPlacement:()=>IfcObjectPlacement,IfcObjectTypeEnum:()=>IfcObjectTypeEnum,IfcObjective:()=>IfcObjective,IfcObjectiveEnum:()=>IfcObjectiveEnum,IfcOccupant:()=>IfcOccupant,IfcOccupantTypeEnum:()=>IfcOccupantTypeEnum,IfcOffsetCurve:()=>IfcOffsetCurve,IfcOffsetCurve2D:()=>IfcOffsetCurve2D,IfcOffsetCurve3D:()=>IfcOffsetCurve3D,IfcOffsetCurveByDistances:()=>IfcOffsetCurveByDistances,IfcOpenShell:()=>IfcOpenShell,IfcOpeningElement:()=>IfcOpeningElement,IfcOpeningElementTypeEnum:()=>IfcOpeningElementTypeEnum,IfcOpeningStandardCase:()=>IfcOpeningStandardCase,IfcOrganization:()=>IfcOrganization,IfcOrganizationRelationship:()=>IfcOrganizationRelationship,IfcOrientationExpression:()=>IfcOrientationExpression,IfcOrientedEdge:()=>IfcOrientedEdge,IfcOuterBoundaryCurve:()=>IfcOuterBoundaryCurve,IfcOutlet:()=>IfcOutlet,IfcOutletType:()=>IfcOutletType,IfcOutletTypeEnum:()=>IfcOutletTypeEnum,IfcOwnerHistory:()=>IfcOwnerHistory,IfcPHMeasure:()=>IfcPHMeasure,IfcParameterValue:()=>IfcParameterValue,IfcParameterizedProfileDef:()=>IfcParameterizedProfileDef,IfcPath:()=>IfcPath,IfcPcurve:()=>IfcPcurve,IfcPerformanceHistory:()=>IfcPerformanceHistory,IfcPerformanceHistoryTypeEnum:()=>IfcPerformanceHistoryTypeEnum,IfcPermeableCoveringOperationEnum:()=>IfcPermeableCoveringOperationEnum,IfcPermeableCoveringProperties:()=>IfcPermeableCoveringProperties,IfcPermit:()=>IfcPermit,IfcPermitTypeEnum:()=>IfcPermitTypeEnum,IfcPerson:()=>IfcPerson,IfcPersonAndOrganization:()=>IfcPersonAndOrganization,IfcPhysicalComplexQuantity:()=>IfcPhysicalComplexQuantity,IfcPhysicalOrVirtualEnum:()=>IfcPhysicalOrVirtualEnum,IfcPhysicalQuantity:()=>IfcPhysicalQuantity,IfcPhysicalSimpleQuantity:()=>IfcPhysicalSimpleQuantity,IfcPile:()=>IfcPile,IfcPileConstructionEnum:()=>IfcPileConstructionEnum,IfcPileType:()=>IfcPileType,IfcPileTypeEnum:()=>IfcPileTypeEnum,IfcPipeFitting:()=>IfcPipeFitting,IfcPipeFittingType:()=>IfcPipeFittingType,IfcPipeFittingTypeEnum:()=>IfcPipeFittingTypeEnum,IfcPipeSegment:()=>IfcPipeSegment,IfcPipeSegmentType:()=>IfcPipeSegmentType,IfcPipeSegmentTypeEnum:()=>IfcPipeSegmentTypeEnum,IfcPixelTexture:()=>IfcPixelTexture,IfcPlacement:()=>IfcPlacement,IfcPlanarBox:()=>IfcPlanarBox,IfcPlanarExtent:()=>IfcPlanarExtent,IfcPlanarForceMeasure:()=>IfcPlanarForceMeasure,IfcPlane:()=>IfcPlane,IfcPlaneAngleMeasure:()=>IfcPlaneAngleMeasure,IfcPlate:()=>IfcPlate,IfcPlateStandardCase:()=>IfcPlateStandardCase,IfcPlateType:()=>IfcPlateType,IfcPlateTypeEnum:()=>IfcPlateTypeEnum,IfcPoint:()=>IfcPoint,IfcPointOnCurve:()=>IfcPointOnCurve,IfcPointOnSurface:()=>IfcPointOnSurface,IfcPolyLoop:()=>IfcPolyLoop,IfcPolygonalBoundedHalfSpace:()=>IfcPolygonalBoundedHalfSpace,IfcPolygonalFaceSet:()=>IfcPolygonalFaceSet,IfcPolyline:()=>IfcPolyline,IfcPort:()=>IfcPort,IfcPositioningElement:()=>IfcPositioningElement,IfcPositiveInteger:()=>IfcPositiveInteger,IfcPositiveLengthMeasure:()=>IfcPositiveLengthMeasure,IfcPositivePlaneAngleMeasure:()=>IfcPositivePlaneAngleMeasure,IfcPositiveRatioMeasure:()=>IfcPositiveRatioMeasure,IfcPostalAddress:()=>IfcPostalAddress,IfcPowerMeasure:()=>IfcPowerMeasure,IfcPreDefinedColour:()=>IfcPreDefinedColour,IfcPreDefinedCurveFont:()=>IfcPreDefinedCurveFont,IfcPreDefinedItem:()=>IfcPreDefinedItem,IfcPreDefinedProperties:()=>IfcPreDefinedProperties,IfcPreDefinedPropertySet:()=>IfcPreDefinedPropertySet,IfcPreDefinedTextFont:()=>IfcPreDefinedTextFont,IfcPreferredSurfaceCurveRepresentation:()=>IfcPreferredSurfaceCurveRepresentation,IfcPresentableText:()=>IfcPresentableText,IfcPresentationItem:()=>IfcPresentationItem,IfcPresentationLayerAssignment:()=>IfcPresentationLayerAssignment,IfcPresentationLayerWithStyle:()=>IfcPresentationLayerWithStyle,IfcPresentationStyle:()=>IfcPresentationStyle,IfcPresentationStyleAssignment:()=>IfcPresentationStyleAssignment,IfcPressureMeasure:()=>IfcPressureMeasure,IfcProcedure:()=>IfcProcedure,IfcProcedureType:()=>IfcProcedureType,IfcProcedureTypeEnum:()=>IfcProcedureTypeEnum,IfcProcess:()=>IfcProcess,IfcProduct:()=>IfcProduct,IfcProductDefinitionShape:()=>IfcProductDefinitionShape,IfcProductRepresentation:()=>IfcProductRepresentation,IfcProfileDef:()=>IfcProfileDef,IfcProfileProperties:()=>IfcProfileProperties,IfcProfileTypeEnum:()=>IfcProfileTypeEnum,IfcProject:()=>IfcProject,IfcProjectLibrary:()=>IfcProjectLibrary,IfcProjectOrder:()=>IfcProjectOrder,IfcProjectOrderTypeEnum:()=>IfcProjectOrderTypeEnum,IfcProjectedCRS:()=>IfcProjectedCRS,IfcProjectedOrTrueLengthEnum:()=>IfcProjectedOrTrueLengthEnum,IfcProjectionElement:()=>IfcProjectionElement,IfcProjectionElementTypeEnum:()=>IfcProjectionElementTypeEnum,IfcProperty:()=>IfcProperty,IfcPropertyAbstraction:()=>IfcPropertyAbstraction,IfcPropertyBoundedValue:()=>IfcPropertyBoundedValue,IfcPropertyDefinition:()=>IfcPropertyDefinition,IfcPropertyDependencyRelationship:()=>IfcPropertyDependencyRelationship,IfcPropertyEnumeratedValue:()=>IfcPropertyEnumeratedValue,IfcPropertyEnumeration:()=>IfcPropertyEnumeration,IfcPropertyListValue:()=>IfcPropertyListValue,IfcPropertyReferenceValue:()=>IfcPropertyReferenceValue,IfcPropertySet:()=>IfcPropertySet,IfcPropertySetDefinition:()=>IfcPropertySetDefinition,IfcPropertySetTemplate:()=>IfcPropertySetTemplate,IfcPropertySetTemplateTypeEnum:()=>IfcPropertySetTemplateTypeEnum,IfcPropertySingleValue:()=>IfcPropertySingleValue,IfcPropertyTableValue:()=>IfcPropertyTableValue,IfcPropertyTemplate:()=>IfcPropertyTemplate,IfcPropertyTemplateDefinition:()=>IfcPropertyTemplateDefinition,IfcProtectiveDevice:()=>IfcProtectiveDevice,IfcProtectiveDeviceTrippingUnit:()=>IfcProtectiveDeviceTrippingUnit,IfcProtectiveDeviceTrippingUnitType:()=>IfcProtectiveDeviceTrippingUnitType,IfcProtectiveDeviceTrippingUnitTypeEnum:()=>IfcProtectiveDeviceTrippingUnitTypeEnum,IfcProtectiveDeviceType:()=>IfcProtectiveDeviceType,IfcProtectiveDeviceTypeEnum:()=>IfcProtectiveDeviceTypeEnum,IfcProxy:()=>IfcProxy,IfcPump:()=>IfcPump,IfcPumpType:()=>IfcPumpType,IfcPumpTypeEnum:()=>IfcPumpTypeEnum,IfcQuantityArea:()=>IfcQuantityArea,IfcQuantityCount:()=>IfcQuantityCount,IfcQuantityLength:()=>IfcQuantityLength,IfcQuantitySet:()=>IfcQuantitySet,IfcQuantityTime:()=>IfcQuantityTime,IfcQuantityVolume:()=>IfcQuantityVolume,IfcQuantityWeight:()=>IfcQuantityWeight,IfcRadioActivityMeasure:()=>IfcRadioActivityMeasure,IfcRailing:()=>IfcRailing,IfcRailingType:()=>IfcRailingType,IfcRailingTypeEnum:()=>IfcRailingTypeEnum,IfcRamp:()=>IfcRamp,IfcRampFlight:()=>IfcRampFlight,IfcRampFlightType:()=>IfcRampFlightType,IfcRampFlightTypeEnum:()=>IfcRampFlightTypeEnum,IfcRampType:()=>IfcRampType,IfcRampTypeEnum:()=>IfcRampTypeEnum,IfcRatioMeasure:()=>IfcRatioMeasure,IfcRationalBSplineCurveWithKnots:()=>IfcRationalBSplineCurveWithKnots,IfcRationalBSplineSurfaceWithKnots:()=>IfcRationalBSplineSurfaceWithKnots,IfcReal:()=>IfcReal,IfcRectangleHollowProfileDef:()=>IfcRectangleHollowProfileDef,IfcRectangleProfileDef:()=>IfcRectangleProfileDef,IfcRectangularPyramid:()=>IfcRectangularPyramid,IfcRectangularTrimmedSurface:()=>IfcRectangularTrimmedSurface,IfcRecurrencePattern:()=>IfcRecurrencePattern,IfcRecurrenceTypeEnum:()=>IfcRecurrenceTypeEnum,IfcReference:()=>IfcReference,IfcReferent:()=>IfcReferent,IfcReferentTypeEnum:()=>IfcReferentTypeEnum,IfcReflectanceMethodEnum:()=>IfcReflectanceMethodEnum,IfcRegularTimeSeries:()=>IfcRegularTimeSeries,IfcReinforcementBarProperties:()=>IfcReinforcementBarProperties,IfcReinforcementDefinitionProperties:()=>IfcReinforcementDefinitionProperties,IfcReinforcingBar:()=>IfcReinforcingBar,IfcReinforcingBarRoleEnum:()=>IfcReinforcingBarRoleEnum,IfcReinforcingBarSurfaceEnum:()=>IfcReinforcingBarSurfaceEnum,IfcReinforcingBarType:()=>IfcReinforcingBarType,IfcReinforcingBarTypeEnum:()=>IfcReinforcingBarTypeEnum,IfcReinforcingElement:()=>IfcReinforcingElement,IfcReinforcingElementType:()=>IfcReinforcingElementType,IfcReinforcingMesh:()=>IfcReinforcingMesh,IfcReinforcingMeshType:()=>IfcReinforcingMeshType,IfcReinforcingMeshTypeEnum:()=>IfcReinforcingMeshTypeEnum,IfcRelAggregates:()=>IfcRelAggregates,IfcRelAssigns:()=>IfcRelAssigns,IfcRelAssignsToActor:()=>IfcRelAssignsToActor,IfcRelAssignsToControl:()=>IfcRelAssignsToControl,IfcRelAssignsToGroup:()=>IfcRelAssignsToGroup,IfcRelAssignsToGroupByFactor:()=>IfcRelAssignsToGroupByFactor,IfcRelAssignsToProcess:()=>IfcRelAssignsToProcess,IfcRelAssignsToProduct:()=>IfcRelAssignsToProduct,IfcRelAssignsToResource:()=>IfcRelAssignsToResource,IfcRelAssociates:()=>IfcRelAssociates,IfcRelAssociatesApproval:()=>IfcRelAssociatesApproval,IfcRelAssociatesClassification:()=>IfcRelAssociatesClassification,IfcRelAssociatesConstraint:()=>IfcRelAssociatesConstraint,IfcRelAssociatesDocument:()=>IfcRelAssociatesDocument,IfcRelAssociatesLibrary:()=>IfcRelAssociatesLibrary,IfcRelAssociatesMaterial:()=>IfcRelAssociatesMaterial,IfcRelConnects:()=>IfcRelConnects,IfcRelConnectsElements:()=>IfcRelConnectsElements,IfcRelConnectsPathElements:()=>IfcRelConnectsPathElements,IfcRelConnectsPortToElement:()=>IfcRelConnectsPortToElement,IfcRelConnectsPorts:()=>IfcRelConnectsPorts,IfcRelConnectsStructuralActivity:()=>IfcRelConnectsStructuralActivity,IfcRelConnectsStructuralMember:()=>IfcRelConnectsStructuralMember,IfcRelConnectsWithEccentricity:()=>IfcRelConnectsWithEccentricity,IfcRelConnectsWithRealizingElements:()=>IfcRelConnectsWithRealizingElements,IfcRelContainedInSpatialStructure:()=>IfcRelContainedInSpatialStructure,IfcRelCoversBldgElements:()=>IfcRelCoversBldgElements,IfcRelCoversSpaces:()=>IfcRelCoversSpaces,IfcRelDeclares:()=>IfcRelDeclares,IfcRelDecomposes:()=>IfcRelDecomposes,IfcRelDefines:()=>IfcRelDefines,IfcRelDefinesByObject:()=>IfcRelDefinesByObject,IfcRelDefinesByProperties:()=>IfcRelDefinesByProperties,IfcRelDefinesByTemplate:()=>IfcRelDefinesByTemplate,IfcRelDefinesByType:()=>IfcRelDefinesByType,IfcRelFillsElement:()=>IfcRelFillsElement,IfcRelFlowControlElements:()=>IfcRelFlowControlElements,IfcRelInterferesElements:()=>IfcRelInterferesElements,IfcRelNests:()=>IfcRelNests,IfcRelPositions:()=>IfcRelPositions,IfcRelProjectsElement:()=>IfcRelProjectsElement,IfcRelReferencedInSpatialStructure:()=>IfcRelReferencedInSpatialStructure,IfcRelSequence:()=>IfcRelSequence,IfcRelServicesBuildings:()=>IfcRelServicesBuildings,IfcRelSpaceBoundary:()=>IfcRelSpaceBoundary,IfcRelSpaceBoundary1stLevel:()=>IfcRelSpaceBoundary1stLevel,IfcRelSpaceBoundary2ndLevel:()=>IfcRelSpaceBoundary2ndLevel,IfcRelVoidsElement:()=>IfcRelVoidsElement,IfcRelationship:()=>IfcRelationship,IfcReparametrisedCompositeCurveSegment:()=>IfcReparametrisedCompositeCurveSegment,IfcRepresentation:()=>IfcRepresentation,IfcRepresentationContext:()=>IfcRepresentationContext,IfcRepresentationItem:()=>IfcRepresentationItem,IfcRepresentationMap:()=>IfcRepresentationMap,IfcResource:()=>IfcResource,IfcResourceApprovalRelationship:()=>IfcResourceApprovalRelationship,IfcResourceConstraintRelationship:()=>IfcResourceConstraintRelationship,IfcResourceLevelRelationship:()=>IfcResourceLevelRelationship,IfcResourceTime:()=>IfcResourceTime,IfcRevolvedAreaSolid:()=>IfcRevolvedAreaSolid,IfcRevolvedAreaSolidTapered:()=>IfcRevolvedAreaSolidTapered,IfcRightCircularCone:()=>IfcRightCircularCone,IfcRightCircularCylinder:()=>IfcRightCircularCylinder,IfcRoleEnum:()=>IfcRoleEnum,IfcRoof:()=>IfcRoof,IfcRoofType:()=>IfcRoofType,IfcRoofTypeEnum:()=>IfcRoofTypeEnum,IfcRoot:()=>IfcRoot,IfcRotationalFrequencyMeasure:()=>IfcRotationalFrequencyMeasure,IfcRotationalMassMeasure:()=>IfcRotationalMassMeasure,IfcRotationalStiffnessMeasure:()=>IfcRotationalStiffnessMeasure,IfcRoundedRectangleProfileDef:()=>IfcRoundedRectangleProfileDef,IfcSIPrefix:()=>IfcSIPrefix,IfcSIUnit:()=>IfcSIUnit,IfcSIUnitName:()=>IfcSIUnitName,IfcSanitaryTerminal:()=>IfcSanitaryTerminal,IfcSanitaryTerminalType:()=>IfcSanitaryTerminalType,IfcSanitaryTerminalTypeEnum:()=>IfcSanitaryTerminalTypeEnum,IfcSchedulingTime:()=>IfcSchedulingTime,IfcSeamCurve:()=>IfcSeamCurve,IfcSectionModulusMeasure:()=>IfcSectionModulusMeasure,IfcSectionProperties:()=>IfcSectionProperties,IfcSectionReinforcementProperties:()=>IfcSectionReinforcementProperties,IfcSectionTypeEnum:()=>IfcSectionTypeEnum,IfcSectionalAreaIntegralMeasure:()=>IfcSectionalAreaIntegralMeasure,IfcSectionedSolid:()=>IfcSectionedSolid,IfcSectionedSolidHorizontal:()=>IfcSectionedSolidHorizontal,IfcSectionedSpine:()=>IfcSectionedSpine,IfcSensor:()=>IfcSensor,IfcSensorType:()=>IfcSensorType,IfcSensorTypeEnum:()=>IfcSensorTypeEnum,IfcSequenceEnum:()=>IfcSequenceEnum,IfcShadingDevice:()=>IfcShadingDevice,IfcShadingDeviceType:()=>IfcShadingDeviceType,IfcShadingDeviceTypeEnum:()=>IfcShadingDeviceTypeEnum,IfcShapeAspect:()=>IfcShapeAspect,IfcShapeModel:()=>IfcShapeModel,IfcShapeRepresentation:()=>IfcShapeRepresentation,IfcShearModulusMeasure:()=>IfcShearModulusMeasure,IfcShellBasedSurfaceModel:()=>IfcShellBasedSurfaceModel,IfcSimpleProperty:()=>IfcSimpleProperty,IfcSimplePropertyTemplate:()=>IfcSimplePropertyTemplate,IfcSimplePropertyTemplateTypeEnum:()=>IfcSimplePropertyTemplateTypeEnum,IfcSite:()=>IfcSite,IfcSlab:()=>IfcSlab,IfcSlabElementedCase:()=>IfcSlabElementedCase,IfcSlabStandardCase:()=>IfcSlabStandardCase,IfcSlabType:()=>IfcSlabType,IfcSlabTypeEnum:()=>IfcSlabTypeEnum,IfcSlippageConnectionCondition:()=>IfcSlippageConnectionCondition,IfcSolarDevice:()=>IfcSolarDevice,IfcSolarDeviceType:()=>IfcSolarDeviceType,IfcSolarDeviceTypeEnum:()=>IfcSolarDeviceTypeEnum,IfcSolidAngleMeasure:()=>IfcSolidAngleMeasure,IfcSolidModel:()=>IfcSolidModel,IfcSoundPowerLevelMeasure:()=>IfcSoundPowerLevelMeasure,IfcSoundPowerMeasure:()=>IfcSoundPowerMeasure,IfcSoundPressureLevelMeasure:()=>IfcSoundPressureLevelMeasure,IfcSoundPressureMeasure:()=>IfcSoundPressureMeasure,IfcSpace:()=>IfcSpace,IfcSpaceHeater:()=>IfcSpaceHeater,IfcSpaceHeaterType:()=>IfcSpaceHeaterType,IfcSpaceHeaterTypeEnum:()=>IfcSpaceHeaterTypeEnum,IfcSpaceType:()=>IfcSpaceType,IfcSpaceTypeEnum:()=>IfcSpaceTypeEnum,IfcSpatialElement:()=>IfcSpatialElement,IfcSpatialElementType:()=>IfcSpatialElementType,IfcSpatialStructureElement:()=>IfcSpatialStructureElement,IfcSpatialStructureElementType:()=>IfcSpatialStructureElementType,IfcSpatialZone:()=>IfcSpatialZone,IfcSpatialZoneType:()=>IfcSpatialZoneType,IfcSpatialZoneTypeEnum:()=>IfcSpatialZoneTypeEnum,IfcSpecificHeatCapacityMeasure:()=>IfcSpecificHeatCapacityMeasure,IfcSpecularExponent:()=>IfcSpecularExponent,IfcSpecularRoughness:()=>IfcSpecularRoughness,IfcSphere:()=>IfcSphere,IfcSphericalSurface:()=>IfcSphericalSurface,IfcStackTerminal:()=>IfcStackTerminal,IfcStackTerminalType:()=>IfcStackTerminalType,IfcStackTerminalTypeEnum:()=>IfcStackTerminalTypeEnum,IfcStair:()=>IfcStair,IfcStairFlight:()=>IfcStairFlight,IfcStairFlightType:()=>IfcStairFlightType,IfcStairFlightTypeEnum:()=>IfcStairFlightTypeEnum,IfcStairType:()=>IfcStairType,IfcStairTypeEnum:()=>IfcStairTypeEnum,IfcStateEnum:()=>IfcStateEnum,IfcStructuralAction:()=>IfcStructuralAction,IfcStructuralActivity:()=>IfcStructuralActivity,IfcStructuralAnalysisModel:()=>IfcStructuralAnalysisModel,IfcStructuralConnection:()=>IfcStructuralConnection,IfcStructuralConnectionCondition:()=>IfcStructuralConnectionCondition,IfcStructuralCurveAction:()=>IfcStructuralCurveAction,IfcStructuralCurveActivityTypeEnum:()=>IfcStructuralCurveActivityTypeEnum,IfcStructuralCurveConnection:()=>IfcStructuralCurveConnection,IfcStructuralCurveMember:()=>IfcStructuralCurveMember,IfcStructuralCurveMemberTypeEnum:()=>IfcStructuralCurveMemberTypeEnum,IfcStructuralCurveMemberVarying:()=>IfcStructuralCurveMemberVarying,IfcStructuralCurveReaction:()=>IfcStructuralCurveReaction,IfcStructuralItem:()=>IfcStructuralItem,IfcStructuralLinearAction:()=>IfcStructuralLinearAction,IfcStructuralLoad:()=>IfcStructuralLoad,IfcStructuralLoadCase:()=>IfcStructuralLoadCase,IfcStructuralLoadConfiguration:()=>IfcStructuralLoadConfiguration,IfcStructuralLoadGroup:()=>IfcStructuralLoadGroup,IfcStructuralLoadLinearForce:()=>IfcStructuralLoadLinearForce,IfcStructuralLoadOrResult:()=>IfcStructuralLoadOrResult,IfcStructuralLoadPlanarForce:()=>IfcStructuralLoadPlanarForce,IfcStructuralLoadSingleDisplacement:()=>IfcStructuralLoadSingleDisplacement,IfcStructuralLoadSingleDisplacementDistortion:()=>IfcStructuralLoadSingleDisplacementDistortion,IfcStructuralLoadSingleForce:()=>IfcStructuralLoadSingleForce,IfcStructuralLoadSingleForceWarping:()=>IfcStructuralLoadSingleForceWarping,IfcStructuralLoadStatic:()=>IfcStructuralLoadStatic,IfcStructuralLoadTemperature:()=>IfcStructuralLoadTemperature,IfcStructuralMember:()=>IfcStructuralMember,IfcStructuralPlanarAction:()=>IfcStructuralPlanarAction,IfcStructuralPointAction:()=>IfcStructuralPointAction,IfcStructuralPointConnection:()=>IfcStructuralPointConnection,IfcStructuralPointReaction:()=>IfcStructuralPointReaction,IfcStructuralReaction:()=>IfcStructuralReaction,IfcStructuralResultGroup:()=>IfcStructuralResultGroup,IfcStructuralSurfaceAction:()=>IfcStructuralSurfaceAction,IfcStructuralSurfaceActivityTypeEnum:()=>IfcStructuralSurfaceActivityTypeEnum,IfcStructuralSurfaceConnection:()=>IfcStructuralSurfaceConnection,IfcStructuralSurfaceMember:()=>IfcStructuralSurfaceMember,IfcStructuralSurfaceMemberTypeEnum:()=>IfcStructuralSurfaceMemberTypeEnum,IfcStructuralSurfaceMemberVarying:()=>IfcStructuralSurfaceMemberVarying,IfcStructuralSurfaceReaction:()=>IfcStructuralSurfaceReaction,IfcStyleModel:()=>IfcStyleModel,IfcStyledItem:()=>IfcStyledItem,IfcStyledRepresentation:()=>IfcStyledRepresentation,IfcSubContractResource:()=>IfcSubContractResource,IfcSubContractResourceType:()=>IfcSubContractResourceType,IfcSubContractResourceTypeEnum:()=>IfcSubContractResourceTypeEnum,IfcSubedge:()=>IfcSubedge,IfcSurface:()=>IfcSurface,IfcSurfaceCurve:()=>IfcSurfaceCurve,IfcSurfaceCurveSweptAreaSolid:()=>IfcSurfaceCurveSweptAreaSolid,IfcSurfaceFeature:()=>IfcSurfaceFeature,IfcSurfaceFeatureTypeEnum:()=>IfcSurfaceFeatureTypeEnum,IfcSurfaceOfLinearExtrusion:()=>IfcSurfaceOfLinearExtrusion,IfcSurfaceOfRevolution:()=>IfcSurfaceOfRevolution,IfcSurfaceReinforcementArea:()=>IfcSurfaceReinforcementArea,IfcSurfaceSide:()=>IfcSurfaceSide,IfcSurfaceStyle:()=>IfcSurfaceStyle,IfcSurfaceStyleLighting:()=>IfcSurfaceStyleLighting,IfcSurfaceStyleRefraction:()=>IfcSurfaceStyleRefraction,IfcSurfaceStyleRendering:()=>IfcSurfaceStyleRendering,IfcSurfaceStyleShading:()=>IfcSurfaceStyleShading,IfcSurfaceStyleWithTextures:()=>IfcSurfaceStyleWithTextures,IfcSurfaceTexture:()=>IfcSurfaceTexture,IfcSweptAreaSolid:()=>IfcSweptAreaSolid,IfcSweptDiskSolid:()=>IfcSweptDiskSolid,IfcSweptDiskSolidPolygonal:()=>IfcSweptDiskSolidPolygonal,IfcSweptSurface:()=>IfcSweptSurface,IfcSwitchingDevice:()=>IfcSwitchingDevice,IfcSwitchingDeviceType:()=>IfcSwitchingDeviceType,IfcSwitchingDeviceTypeEnum:()=>IfcSwitchingDeviceTypeEnum,IfcSystem:()=>IfcSystem,IfcSystemFurnitureElement:()=>IfcSystemFurnitureElement,IfcSystemFurnitureElementType:()=>IfcSystemFurnitureElementType,IfcSystemFurnitureElementTypeEnum:()=>IfcSystemFurnitureElementTypeEnum,IfcTShapeProfileDef:()=>IfcTShapeProfileDef,IfcTable:()=>IfcTable,IfcTableColumn:()=>IfcTableColumn,IfcTableRow:()=>IfcTableRow,IfcTank:()=>IfcTank,IfcTankType:()=>IfcTankType,IfcTankTypeEnum:()=>IfcTankTypeEnum,IfcTask:()=>IfcTask,IfcTaskDurationEnum:()=>IfcTaskDurationEnum,IfcTaskTime:()=>IfcTaskTime,IfcTaskTimeRecurring:()=>IfcTaskTimeRecurring,IfcTaskType:()=>IfcTaskType,IfcTaskTypeEnum:()=>IfcTaskTypeEnum,IfcTelecomAddress:()=>IfcTelecomAddress,IfcTemperatureGradientMeasure:()=>IfcTemperatureGradientMeasure,IfcTemperatureRateOfChangeMeasure:()=>IfcTemperatureRateOfChangeMeasure,IfcTendon:()=>IfcTendon,IfcTendonAnchor:()=>IfcTendonAnchor,IfcTendonAnchorType:()=>IfcTendonAnchorType,IfcTendonAnchorTypeEnum:()=>IfcTendonAnchorTypeEnum,IfcTendonConduit:()=>IfcTendonConduit,IfcTendonConduitType:()=>IfcTendonConduitType,IfcTendonConduitTypeEnum:()=>IfcTendonConduitTypeEnum,IfcTendonType:()=>IfcTendonType,IfcTendonTypeEnum:()=>IfcTendonTypeEnum,IfcTessellatedFaceSet:()=>IfcTessellatedFaceSet,IfcTessellatedItem:()=>IfcTessellatedItem,IfcText:()=>IfcText,IfcTextAlignment:()=>IfcTextAlignment,IfcTextDecoration:()=>IfcTextDecoration,IfcTextFontName:()=>IfcTextFontName,IfcTextLiteral:()=>IfcTextLiteral,IfcTextLiteralWithExtent:()=>IfcTextLiteralWithExtent,IfcTextPath:()=>IfcTextPath,IfcTextStyle:()=>IfcTextStyle,IfcTextStyleFontModel:()=>IfcTextStyleFontModel,IfcTextStyleForDefinedFont:()=>IfcTextStyleForDefinedFont,IfcTextStyleTextModel:()=>IfcTextStyleTextModel,IfcTextTransformation:()=>IfcTextTransformation,IfcTextureCoordinate:()=>IfcTextureCoordinate,IfcTextureCoordinateGenerator:()=>IfcTextureCoordinateGenerator,IfcTextureMap:()=>IfcTextureMap,IfcTextureVertex:()=>IfcTextureVertex,IfcTextureVertexList:()=>IfcTextureVertexList,IfcThermalAdmittanceMeasure:()=>IfcThermalAdmittanceMeasure,IfcThermalConductivityMeasure:()=>IfcThermalConductivityMeasure,IfcThermalExpansionCoefficientMeasure:()=>IfcThermalExpansionCoefficientMeasure,IfcThermalResistanceMeasure:()=>IfcThermalResistanceMeasure,IfcThermalTransmittanceMeasure:()=>IfcThermalTransmittanceMeasure,IfcThermodynamicTemperatureMeasure:()=>IfcThermodynamicTemperatureMeasure,IfcTime:()=>IfcTime,IfcTimeMeasure:()=>IfcTimeMeasure,IfcTimePeriod:()=>IfcTimePeriod,IfcTimeSeries:()=>IfcTimeSeries,IfcTimeSeriesDataTypeEnum:()=>IfcTimeSeriesDataTypeEnum,IfcTimeSeriesValue:()=>IfcTimeSeriesValue,IfcTimeStamp:()=>IfcTimeStamp,IfcTopologicalRepresentationItem:()=>IfcTopologicalRepresentationItem,IfcTopologyRepresentation:()=>IfcTopologyRepresentation,IfcToroidalSurface:()=>IfcToroidalSurface,IfcTorqueMeasure:()=>IfcTorqueMeasure,IfcTransformer:()=>IfcTransformer,IfcTransformerType:()=>IfcTransformerType,IfcTransformerTypeEnum:()=>IfcTransformerTypeEnum,IfcTransitionCode:()=>IfcTransitionCode,IfcTransitionCurveSegment2D:()=>IfcTransitionCurveSegment2D,IfcTransitionCurveType:()=>IfcTransitionCurveType,IfcTransportElement:()=>IfcTransportElement,IfcTransportElementType:()=>IfcTransportElementType,IfcTransportElementTypeEnum:()=>IfcTransportElementTypeEnum,IfcTrapeziumProfileDef:()=>IfcTrapeziumProfileDef,IfcTriangulatedFaceSet:()=>IfcTriangulatedFaceSet,IfcTriangulatedIrregularNetwork:()=>IfcTriangulatedIrregularNetwork,IfcTrimmedCurve:()=>IfcTrimmedCurve,IfcTrimmingPreference:()=>IfcTrimmingPreference,IfcTubeBundle:()=>IfcTubeBundle,IfcTubeBundleType:()=>IfcTubeBundleType,IfcTubeBundleTypeEnum:()=>IfcTubeBundleTypeEnum,IfcTypeObject:()=>IfcTypeObject,IfcTypeProcess:()=>IfcTypeProcess,IfcTypeProduct:()=>IfcTypeProduct,IfcTypeResource:()=>IfcTypeResource,IfcURIReference:()=>IfcURIReference,IfcUShapeProfileDef:()=>IfcUShapeProfileDef,IfcUnitAssignment:()=>IfcUnitAssignment,IfcUnitEnum:()=>IfcUnitEnum,IfcUnitaryControlElement:()=>IfcUnitaryControlElement,IfcUnitaryControlElementType:()=>IfcUnitaryControlElementType,IfcUnitaryControlElementTypeEnum:()=>IfcUnitaryControlElementTypeEnum,IfcUnitaryEquipment:()=>IfcUnitaryEquipment,IfcUnitaryEquipmentType:()=>IfcUnitaryEquipmentType,IfcUnitaryEquipmentTypeEnum:()=>IfcUnitaryEquipmentTypeEnum,IfcValve:()=>IfcValve,IfcValveType:()=>IfcValveType,IfcValveTypeEnum:()=>IfcValveTypeEnum,IfcVaporPermeabilityMeasure:()=>IfcVaporPermeabilityMeasure,IfcVector:()=>IfcVector,IfcVertex:()=>IfcVertex,IfcVertexLoop:()=>IfcVertexLoop,IfcVertexPoint:()=>IfcVertexPoint,IfcVibrationDamper:()=>IfcVibrationDamper,IfcVibrationDamperType:()=>IfcVibrationDamperType,IfcVibrationDamperTypeEnum:()=>IfcVibrationDamperTypeEnum,IfcVibrationIsolator:()=>IfcVibrationIsolator,IfcVibrationIsolatorType:()=>IfcVibrationIsolatorType,IfcVibrationIsolatorTypeEnum:()=>IfcVibrationIsolatorTypeEnum,IfcVirtualElement:()=>IfcVirtualElement,IfcVirtualGridIntersection:()=>IfcVirtualGridIntersection,IfcVoidingFeature:()=>IfcVoidingFeature,IfcVoidingFeatureTypeEnum:()=>IfcVoidingFeatureTypeEnum,IfcVolumeMeasure:()=>IfcVolumeMeasure,IfcVolumetricFlowRateMeasure:()=>IfcVolumetricFlowRateMeasure,IfcWall:()=>IfcWall,IfcWallElementedCase:()=>IfcWallElementedCase,IfcWallStandardCase:()=>IfcWallStandardCase,IfcWallType:()=>IfcWallType,IfcWallTypeEnum:()=>IfcWallTypeEnum,IfcWarpingConstantMeasure:()=>IfcWarpingConstantMeasure,IfcWarpingMomentMeasure:()=>IfcWarpingMomentMeasure,IfcWasteTerminal:()=>IfcWasteTerminal,IfcWasteTerminalType:()=>IfcWasteTerminalType,IfcWasteTerminalTypeEnum:()=>IfcWasteTerminalTypeEnum,IfcWindow:()=>IfcWindow,IfcWindowLiningProperties:()=>IfcWindowLiningProperties,IfcWindowPanelOperationEnum:()=>IfcWindowPanelOperationEnum,IfcWindowPanelPositionEnum:()=>IfcWindowPanelPositionEnum,IfcWindowPanelProperties:()=>IfcWindowPanelProperties,IfcWindowStandardCase:()=>IfcWindowStandardCase,IfcWindowStyle:()=>IfcWindowStyle,IfcWindowStyleConstructionEnum:()=>IfcWindowStyleConstructionEnum,IfcWindowStyleOperationEnum:()=>IfcWindowStyleOperationEnum,IfcWindowType:()=>IfcWindowType,IfcWindowTypeEnum:()=>IfcWindowTypeEnum,IfcWindowTypePartitioningEnum:()=>IfcWindowTypePartitioningEnum,IfcWorkCalendar:()=>IfcWorkCalendar,IfcWorkCalendarTypeEnum:()=>IfcWorkCalendarTypeEnum,IfcWorkControl:()=>IfcWorkControl,IfcWorkPlan:()=>IfcWorkPlan,IfcWorkPlanTypeEnum:()=>IfcWorkPlanTypeEnum,IfcWorkSchedule:()=>IfcWorkSchedule,IfcWorkScheduleTypeEnum:()=>IfcWorkScheduleTypeEnum,IfcWorkTime:()=>IfcWorkTime,IfcZShapeProfileDef:()=>IfcZShapeProfileDef,IfcZone:()=>IfcZone,LABEL:()=>LABEL,LINE_END:()=>LINE_END,REAL:()=>REAL,REF:()=>REF,SET_BEGIN:()=>SET_BEGIN,SET_END:()=>SET_END,STRING:()=>STRING,UNKNOWN:()=>UNKNOWN,Value:()=>Value,ms:()=>ms});var IFCACTIONREQUEST=3821786052,IFCACTOR=2296667514,IFCACTORROLE=3630933823,IFCACTUATOR=4288193352,IFCACTUATORTYPE=2874132201,IFCADDRESS=618182010,IFCADVANCEDBREP=1635779807,IFCADVANCEDBREPWITHVOIDS=2603310189,IFCADVANCEDFACE=3406155212,IFCAIRTERMINAL=1634111441,IFCAIRTERMINALBOX=177149247,IFCAIRTERMINALBOXTYPE=1411407467,IFCAIRTERMINALTYPE=3352864051,IFCAIRTOAIRHEATRECOVERY=2056796094,IFCAIRTOAIRHEATRECOVERYTYPE=1871374353,IFCALARM=3087945054,IFCALARMTYPE=3001207471,IFCALIGNMENT=325726236,IFCALIGNMENT2DHORIZONTAL=749761778,IFCALIGNMENT2DHORIZONTALSEGMENT=3199563722,IFCALIGNMENT2DSEGMENT=2483840362,IFCALIGNMENT2DVERSEGCIRCULARARC=3379348081,IFCALIGNMENT2DVERSEGLINE=3239324667,IFCALIGNMENT2DVERSEGPARABOLICARC=4263986512,IFCALIGNMENT2DVERTICAL=53199957,IFCALIGNMENT2DVERTICALSEGMENT=2029264950,IFCALIGNMENTCURVE=3512275521,IFCANNOTATION=1674181508,IFCANNOTATIONFILLAREA=669184980,IFCAPPLICATION=639542469,IFCAPPLIEDVALUE=411424972,IFCAPPROVAL=130549933,IFCAPPROVALRELATIONSHIP=3869604511,IFCARBITRARYCLOSEDPROFILEDEF=3798115385,IFCARBITRARYOPENPROFILEDEF=1310608509,IFCARBITRARYPROFILEDEFWITHVOIDS=2705031697,IFCASSET=3460190687,IFCASYMMETRICISHAPEPROFILEDEF=3207858831,IFCAUDIOVISUALAPPLIANCE=277319702,IFCAUDIOVISUALAPPLIANCETYPE=1532957894,IFCAXIS1PLACEMENT=4261334040,IFCAXIS2PLACEMENT2D=3125803723,IFCAXIS2PLACEMENT3D=2740243338,IFCBSPLINECURVE=1967976161,IFCBSPLINECURVEWITHKNOTS=2461110595,IFCBSPLINESURFACE=2887950389,IFCBSPLINESURFACEWITHKNOTS=167062518,IFCBEAM=753842376,IFCBEAMSTANDARDCASE=2906023776,IFCBEAMTYPE=819618141,IFCBEARING=4196446775,IFCBEARINGTYPE=3649138523,IFCBLOBTEXTURE=616511568,IFCBLOCK=1334484129,IFCBOILER=32344328,IFCBOILERTYPE=231477066,IFCBOOLEANCLIPPINGRESULT=3649129432,IFCBOOLEANRESULT=2736907675,IFCBOUNDARYCONDITION=4037036970,IFCBOUNDARYCURVE=1136057603,IFCBOUNDARYEDGECONDITION=1560379544,IFCBOUNDARYFACECONDITION=3367102660,IFCBOUNDARYNODECONDITION=1387855156,IFCBOUNDARYNODECONDITIONWARPING=2069777674,IFCBOUNDEDCURVE=1260505505,IFCBOUNDEDSURFACE=4182860854,IFCBOUNDINGBOX=2581212453,IFCBOXEDHALFSPACE=2713105998,IFCBRIDGE=644574406,IFCBRIDGEPART=963979645,IFCBUILDING=4031249490,IFCBUILDINGELEMENT=3299480353,IFCBUILDINGELEMENTPART=2979338954,IFCBUILDINGELEMENTPARTTYPE=39481116,IFCBUILDINGELEMENTPROXY=1095909175,IFCBUILDINGELEMENTPROXYTYPE=1909888760,IFCBUILDINGELEMENTTYPE=1950629157,IFCBUILDINGSTOREY=3124254112,IFCBUILDINGSYSTEM=1177604601,IFCBURNER=2938176219,IFCBURNERTYPE=2188180465,IFCCSHAPEPROFILEDEF=2898889636,IFCCABLECARRIERFITTING=635142910,IFCCABLECARRIERFITTINGTYPE=395041908,IFCCABLECARRIERSEGMENT=3758799889,IFCCABLECARRIERSEGMENTTYPE=3293546465,IFCCABLEFITTING=1051757585,IFCCABLEFITTINGTYPE=2674252688,IFCCABLESEGMENT=4217484030,IFCCABLESEGMENTTYPE=1285652485,IFCCAISSONFOUNDATION=3999819293,IFCCAISSONFOUNDATIONTYPE=3203706013,IFCCARTESIANPOINT=1123145078,IFCCARTESIANPOINTLIST=574549367,IFCCARTESIANPOINTLIST2D=1675464909,IFCCARTESIANPOINTLIST3D=2059837836,IFCCARTESIANTRANSFORMATIONOPERATOR=59481748,IFCCARTESIANTRANSFORMATIONOPERATOR2D=3749851601,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=3486308946,IFCCARTESIANTRANSFORMATIONOPERATOR3D=3331915920,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=1416205885,IFCCENTERLINEPROFILEDEF=3150382593,IFCCHILLER=3902619387,IFCCHILLERTYPE=2951183804,IFCCHIMNEY=3296154744,IFCCHIMNEYTYPE=2197970202,IFCCIRCLE=2611217952,IFCCIRCLEHOLLOWPROFILEDEF=2937912522,IFCCIRCLEPROFILEDEF=1383045692,IFCCIRCULARARCSEGMENT2D=1062206242,IFCCIVILELEMENT=1677625105,IFCCIVILELEMENTTYPE=3893394355,IFCCLASSIFICATION=747523909,IFCCLASSIFICATIONREFERENCE=647927063,IFCCLOSEDSHELL=2205249479,IFCCOIL=639361253,IFCCOILTYPE=2301859152,IFCCOLOURRGB=776857604,IFCCOLOURRGBLIST=3285139300,IFCCOLOURSPECIFICATION=3264961684,IFCCOLUMN=843113511,IFCCOLUMNSTANDARDCASE=905975707,IFCCOLUMNTYPE=300633059,IFCCOMMUNICATIONSAPPLIANCE=3221913625,IFCCOMMUNICATIONSAPPLIANCETYPE=400855858,IFCCOMPLEXPROPERTY=2542286263,IFCCOMPLEXPROPERTYTEMPLATE=3875453745,IFCCOMPOSITECURVE=3732776249,IFCCOMPOSITECURVEONSURFACE=15328376,IFCCOMPOSITECURVESEGMENT=2485617015,IFCCOMPOSITEPROFILEDEF=1485152156,IFCCOMPRESSOR=3571504051,IFCCOMPRESSORTYPE=3850581409,IFCCONDENSER=2272882330,IFCCONDENSERTYPE=2816379211,IFCCONIC=2510884976,IFCCONNECTEDFACESET=370225590,IFCCONNECTIONCURVEGEOMETRY=1981873012,IFCCONNECTIONGEOMETRY=2859738748,IFCCONNECTIONPOINTECCENTRICITY=45288368,IFCCONNECTIONPOINTGEOMETRY=2614616156,IFCCONNECTIONSURFACEGEOMETRY=2732653382,IFCCONNECTIONVOLUMEGEOMETRY=775493141,IFCCONSTRAINT=1959218052,IFCCONSTRUCTIONEQUIPMENTRESOURCE=3898045240,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=2185764099,IFCCONSTRUCTIONMATERIALRESOURCE=1060000209,IFCCONSTRUCTIONMATERIALRESOURCETYPE=4105962743,IFCCONSTRUCTIONPRODUCTRESOURCE=488727124,IFCCONSTRUCTIONPRODUCTRESOURCETYPE=1525564444,IFCCONSTRUCTIONRESOURCE=2559216714,IFCCONSTRUCTIONRESOURCETYPE=2574617495,IFCCONTEXT=3419103109,IFCCONTEXTDEPENDENTUNIT=3050246964,IFCCONTROL=3293443760,IFCCONTROLLER=25142252,IFCCONTROLLERTYPE=578613899,IFCCONVERSIONBASEDUNIT=2889183280,IFCCONVERSIONBASEDUNITWITHOFFSET=2713554722,IFCCOOLEDBEAM=4136498852,IFCCOOLEDBEAMTYPE=335055490,IFCCOOLINGTOWER=3640358203,IFCCOOLINGTOWERTYPE=2954562838,IFCCOORDINATEOPERATION=1785450214,IFCCOORDINATEREFERENCESYSTEM=1466758467,IFCCOSTITEM=3895139033,IFCCOSTSCHEDULE=1419761937,IFCCOSTVALUE=602808272,IFCCOVERING=1973544240,IFCCOVERINGTYPE=1916426348,IFCCREWRESOURCE=3295246426,IFCCREWRESOURCETYPE=1815067380,IFCCSGPRIMITIVE3D=2506170314,IFCCSGSOLID=2147822146,IFCCURRENCYRELATIONSHIP=539742890,IFCCURTAINWALL=3495092785,IFCCURTAINWALLTYPE=1457835157,IFCCURVE=2601014836,IFCCURVEBOUNDEDPLANE=2827736869,IFCCURVEBOUNDEDSURFACE=2629017746,IFCCURVESEGMENT2D=1186437898,IFCCURVESTYLE=3800577675,IFCCURVESTYLEFONT=1105321065,IFCCURVESTYLEFONTANDSCALING=2367409068,IFCCURVESTYLEFONTPATTERN=3510044353,IFCCYLINDRICALSURFACE=1213902940,IFCDAMPER=4074379575,IFCDAMPERTYPE=3961806047,IFCDEEPFOUNDATION=3426335179,IFCDEEPFOUNDATIONTYPE=1306400036,IFCDERIVEDPROFILEDEF=3632507154,IFCDERIVEDUNIT=1765591967,IFCDERIVEDUNITELEMENT=1045800335,IFCDIMENSIONALEXPONENTS=2949456006,IFCDIRECTION=32440307,IFCDISCRETEACCESSORY=1335981549,IFCDISCRETEACCESSORYTYPE=2635815018,IFCDISTANCEEXPRESSION=1945343521,IFCDISTRIBUTIONCHAMBERELEMENT=1052013943,IFCDISTRIBUTIONCHAMBERELEMENTTYPE=1599208980,IFCDISTRIBUTIONCIRCUIT=562808652,IFCDISTRIBUTIONCONTROLELEMENT=1062813311,IFCDISTRIBUTIONCONTROLELEMENTTYPE=2063403501,IFCDISTRIBUTIONELEMENT=1945004755,IFCDISTRIBUTIONELEMENTTYPE=3256556792,IFCDISTRIBUTIONFLOWELEMENT=3040386961,IFCDISTRIBUTIONFLOWELEMENTTYPE=3849074793,IFCDISTRIBUTIONPORT=3041715199,IFCDISTRIBUTIONSYSTEM=3205830791,IFCDOCUMENTINFORMATION=1154170062,IFCDOCUMENTINFORMATIONRELATIONSHIP=770865208,IFCDOCUMENTREFERENCE=3732053477,IFCDOOR=395920057,IFCDOORLININGPROPERTIES=2963535650,IFCDOORPANELPROPERTIES=1714330368,IFCDOORSTANDARDCASE=3242481149,IFCDOORSTYLE=526551008,IFCDOORTYPE=2323601079,IFCDRAUGHTINGPREDEFINEDCOLOUR=445594917,IFCDRAUGHTINGPREDEFINEDCURVEFONT=4006246654,IFCDUCTFITTING=342316401,IFCDUCTFITTINGTYPE=869906466,IFCDUCTSEGMENT=3518393246,IFCDUCTSEGMENTTYPE=3760055223,IFCDUCTSILENCER=1360408905,IFCDUCTSILENCERTYPE=2030761528,IFCEDGE=3900360178,IFCEDGECURVE=476780140,IFCEDGELOOP=1472233963,IFCELECTRICAPPLIANCE=1904799276,IFCELECTRICAPPLIANCETYPE=663422040,IFCELECTRICDISTRIBUTIONBOARD=862014818,IFCELECTRICDISTRIBUTIONBOARDTYPE=2417008758,IFCELECTRICFLOWSTORAGEDEVICE=3310460725,IFCELECTRICFLOWSTORAGEDEVICETYPE=3277789161,IFCELECTRICGENERATOR=264262732,IFCELECTRICGENERATORTYPE=1534661035,IFCELECTRICMOTOR=402227799,IFCELECTRICMOTORTYPE=1217240411,IFCELECTRICTIMECONTROL=1003880860,IFCELECTRICTIMECONTROLTYPE=712377611,IFCELEMENT=1758889154,IFCELEMENTASSEMBLY=4123344466,IFCELEMENTASSEMBLYTYPE=2397081782,IFCELEMENTCOMPONENT=1623761950,IFCELEMENTCOMPONENTTYPE=2590856083,IFCELEMENTQUANTITY=1883228015,IFCELEMENTTYPE=339256511,IFCELEMENTARYSURFACE=2777663545,IFCELLIPSE=1704287377,IFCELLIPSEPROFILEDEF=2835456948,IFCENERGYCONVERSIONDEVICE=1658829314,IFCENERGYCONVERSIONDEVICETYPE=2107101300,IFCENGINE=2814081492,IFCENGINETYPE=132023988,IFCEVAPORATIVECOOLER=3747195512,IFCEVAPORATIVECOOLERTYPE=3174744832,IFCEVAPORATOR=484807127,IFCEVAPORATORTYPE=3390157468,IFCEVENT=4148101412,IFCEVENTTIME=211053100,IFCEVENTTYPE=4024345920,IFCEXTENDEDPROPERTIES=297599258,IFCEXTERNALINFORMATION=4294318154,IFCEXTERNALREFERENCE=3200245327,IFCEXTERNALREFERENCERELATIONSHIP=1437805879,IFCEXTERNALSPATIALELEMENT=1209101575,IFCEXTERNALSPATIALSTRUCTUREELEMENT=2853485674,IFCEXTERNALLYDEFINEDHATCHSTYLE=2242383968,IFCEXTERNALLYDEFINEDSURFACESTYLE=1040185647,IFCEXTERNALLYDEFINEDTEXTFONT=3548104201,IFCEXTRUDEDAREASOLID=477187591,IFCEXTRUDEDAREASOLIDTAPERED=2804161546,IFCFACE=2556980723,IFCFACEBASEDSURFACEMODEL=2047409740,IFCFACEBOUND=1809719519,IFCFACEOUTERBOUND=803316827,IFCFACESURFACE=3008276851,IFCFACETEDBREP=807026263,IFCFACETEDBREPWITHVOIDS=3737207727,IFCFACILITY=24185140,IFCFACILITYPART=1310830890,IFCFAILURECONNECTIONCONDITION=4219587988,IFCFAN=3415622556,IFCFANTYPE=346874300,IFCFASTENER=647756555,IFCFASTENERTYPE=2489546625,IFCFEATUREELEMENT=2827207264,IFCFEATUREELEMENTADDITION=2143335405,IFCFEATUREELEMENTSUBTRACTION=1287392070,IFCFILLAREASTYLE=738692330,IFCFILLAREASTYLEHATCHING=374418227,IFCFILLAREASTYLETILES=315944413,IFCFILTER=819412036,IFCFILTERTYPE=1810631287,IFCFIRESUPPRESSIONTERMINAL=1426591983,IFCFIRESUPPRESSIONTERMINALTYPE=4222183408,IFCFIXEDREFERENCESWEPTAREASOLID=2652556860,IFCFLOWCONTROLLER=2058353004,IFCFLOWCONTROLLERTYPE=3907093117,IFCFLOWFITTING=4278956645,IFCFLOWFITTINGTYPE=3198132628,IFCFLOWINSTRUMENT=182646315,IFCFLOWINSTRUMENTTYPE=4037862832,IFCFLOWMETER=2188021234,IFCFLOWMETERTYPE=3815607619,IFCFLOWMOVINGDEVICE=3132237377,IFCFLOWMOVINGDEVICETYPE=1482959167,IFCFLOWSEGMENT=987401354,IFCFLOWSEGMENTTYPE=1834744321,IFCFLOWSTORAGEDEVICE=707683696,IFCFLOWSTORAGEDEVICETYPE=1339347760,IFCFLOWTERMINAL=2223149337,IFCFLOWTERMINALTYPE=2297155007,IFCFLOWTREATMENTDEVICE=3508470533,IFCFLOWTREATMENTDEVICETYPE=3009222698,IFCFOOTING=900683007,IFCFOOTINGTYPE=1893162501,IFCFURNISHINGELEMENT=263784265,IFCFURNISHINGELEMENTTYPE=4238390223,IFCFURNITURE=1509553395,IFCFURNITURETYPE=1268542332,IFCGEOGRAPHICELEMENT=3493046030,IFCGEOGRAPHICELEMENTTYPE=4095422895,IFCGEOMETRICCURVESET=987898635,IFCGEOMETRICREPRESENTATIONCONTEXT=3448662350,IFCGEOMETRICREPRESENTATIONITEM=2453401579,IFCGEOMETRICREPRESENTATIONSUBCONTEXT=4142052618,IFCGEOMETRICSET=3590301190,IFCGRID=3009204131,IFCGRIDAXIS=852622518,IFCGRIDPLACEMENT=178086475,IFCGROUP=2706460486,IFCHALFSPACESOLID=812098782,IFCHEATEXCHANGER=3319311131,IFCHEATEXCHANGERTYPE=1251058090,IFCHUMIDIFIER=2068733104,IFCHUMIDIFIERTYPE=1806887404,IFCISHAPEPROFILEDEF=1484403080,IFCIMAGETEXTURE=3905492369,IFCINDEXEDCOLOURMAP=3570813810,IFCINDEXEDPOLYCURVE=2571569899,IFCINDEXEDPOLYGONALFACE=178912537,IFCINDEXEDPOLYGONALFACEWITHVOIDS=2294589976,IFCINDEXEDTEXTUREMAP=1437953363,IFCINDEXEDTRIANGLETEXTUREMAP=2133299955,IFCINTERCEPTOR=4175244083,IFCINTERCEPTORTYPE=3946677679,IFCINTERSECTIONCURVE=3113134337,IFCINVENTORY=2391368822,IFCIRREGULARTIMESERIES=3741457305,IFCIRREGULARTIMESERIESVALUE=3020489413,IFCJUNCTIONBOX=2176052936,IFCJUNCTIONBOXTYPE=4288270099,IFCLSHAPEPROFILEDEF=572779678,IFCLABORRESOURCE=3827777499,IFCLABORRESOURCETYPE=428585644,IFCLAGTIME=1585845231,IFCLAMP=76236018,IFCLAMPTYPE=1051575348,IFCLIBRARYINFORMATION=2655187982,IFCLIBRARYREFERENCE=3452421091,IFCLIGHTDISTRIBUTIONDATA=4162380809,IFCLIGHTFIXTURE=629592764,IFCLIGHTFIXTURETYPE=1161773419,IFCLIGHTINTENSITYDISTRIBUTION=1566485204,IFCLIGHTSOURCE=1402838566,IFCLIGHTSOURCEAMBIENT=125510826,IFCLIGHTSOURCEDIRECTIONAL=2604431987,IFCLIGHTSOURCEGONIOMETRIC=4266656042,IFCLIGHTSOURCEPOSITIONAL=1520743889,IFCLIGHTSOURCESPOT=3422422726,IFCLINE=1281925730,IFCLINESEGMENT2D=3092502836,IFCLINEARPLACEMENT=388784114,IFCLINEARPOSITIONINGELEMENT=1154579445,IFCLOCALPLACEMENT=2624227202,IFCLOOP=1008929658,IFCMANIFOLDSOLIDBREP=1425443689,IFCMAPCONVERSION=3057273783,IFCMAPPEDITEM=2347385850,IFCMATERIAL=1838606355,IFCMATERIALCLASSIFICATIONRELATIONSHIP=1847130766,IFCMATERIALCONSTITUENT=3708119e3,IFCMATERIALCONSTITUENTSET=2852063980,IFCMATERIALDEFINITION=760658860,IFCMATERIALDEFINITIONREPRESENTATION=2022407955,IFCMATERIALLAYER=248100487,IFCMATERIALLAYERSET=3303938423,IFCMATERIALLAYERSETUSAGE=1303795690,IFCMATERIALLAYERWITHOFFSETS=1847252529,IFCMATERIALLIST=2199411900,IFCMATERIALPROFILE=2235152071,IFCMATERIALPROFILESET=164193824,IFCMATERIALPROFILESETUSAGE=3079605661,IFCMATERIALPROFILESETUSAGETAPERING=3404854881,IFCMATERIALPROFILEWITHOFFSETS=552965576,IFCMATERIALPROPERTIES=3265635763,IFCMATERIALRELATIONSHIP=853536259,IFCMATERIALUSAGEDEFINITION=1507914824,IFCMEASUREWITHUNIT=2597039031,IFCMECHANICALFASTENER=377706215,IFCMECHANICALFASTENERTYPE=2108223431,IFCMEDICALDEVICE=1437502449,IFCMEDICALDEVICETYPE=1114901282,IFCMEMBER=1073191201,IFCMEMBERSTANDARDCASE=1911478936,IFCMEMBERTYPE=3181161470,IFCMETRIC=3368373690,IFCMIRROREDPROFILEDEF=2998442950,IFCMONETARYUNIT=2706619895,IFCMOTORCONNECTION=2474470126,IFCMOTORCONNECTIONTYPE=977012517,IFCNAMEDUNIT=1918398963,IFCOBJECT=3888040117,IFCOBJECTDEFINITION=219451334,IFCOBJECTPLACEMENT=3701648758,IFCOBJECTIVE=2251480897,IFCOCCUPANT=4143007308,IFCOFFSETCURVE=590820931,IFCOFFSETCURVE2D=3388369263,IFCOFFSETCURVE3D=3505215534,IFCOFFSETCURVEBYDISTANCES=2485787929,IFCOPENSHELL=2665983363,IFCOPENINGELEMENT=3588315303,IFCOPENINGSTANDARDCASE=3079942009,IFCORGANIZATION=4251960020,IFCORGANIZATIONRELATIONSHIP=1411181986,IFCORIENTATIONEXPRESSION=643959842,IFCORIENTEDEDGE=1029017970,IFCOUTERBOUNDARYCURVE=144952367,IFCOUTLET=3694346114,IFCOUTLETTYPE=2837617999,IFCOWNERHISTORY=1207048766,IFCPARAMETERIZEDPROFILEDEF=2529465313,IFCPATH=2519244187,IFCPCURVE=1682466193,IFCPERFORMANCEHISTORY=2382730787,IFCPERMEABLECOVERINGPROPERTIES=3566463478,IFCPERMIT=3327091369,IFCPERSON=2077209135,IFCPERSONANDORGANIZATION=101040310,IFCPHYSICALCOMPLEXQUANTITY=3021840470,IFCPHYSICALQUANTITY=2483315170,IFCPHYSICALSIMPLEQUANTITY=2226359599,IFCPILE=1687234759,IFCPILETYPE=1158309216,IFCPIPEFITTING=310824031,IFCPIPEFITTINGTYPE=804291784,IFCPIPESEGMENT=3612865200,IFCPIPESEGMENTTYPE=4231323485,IFCPIXELTEXTURE=597895409,IFCPLACEMENT=2004835150,IFCPLANARBOX=603570806,IFCPLANAREXTENT=1663979128,IFCPLANE=220341763,IFCPLATE=3171933400,IFCPLATESTANDARDCASE=1156407060,IFCPLATETYPE=4017108033,IFCPOINT=2067069095,IFCPOINTONCURVE=4022376103,IFCPOINTONSURFACE=1423911732,IFCPOLYLOOP=2924175390,IFCPOLYGONALBOUNDEDHALFSPACE=2775532180,IFCPOLYGONALFACESET=2839578677,IFCPOLYLINE=3724593414,IFCPORT=3740093272,IFCPOSITIONINGELEMENT=1946335990,IFCPOSTALADDRESS=3355820592,IFCPREDEFINEDCOLOUR=759155922,IFCPREDEFINEDCURVEFONT=2559016684,IFCPREDEFINEDITEM=3727388367,IFCPREDEFINEDPROPERTIES=3778827333,IFCPREDEFINEDPROPERTYSET=3967405729,IFCPREDEFINEDTEXTFONT=1775413392,IFCPRESENTATIONITEM=677532197,IFCPRESENTATIONLAYERASSIGNMENT=2022622350,IFCPRESENTATIONLAYERWITHSTYLE=1304840413,IFCPRESENTATIONSTYLE=3119450353,IFCPRESENTATIONSTYLEASSIGNMENT=2417041796,IFCPROCEDURE=2744685151,IFCPROCEDURETYPE=569719735,IFCPROCESS=2945172077,IFCPRODUCT=4208778838,IFCPRODUCTDEFINITIONSHAPE=673634403,IFCPRODUCTREPRESENTATION=2095639259,IFCPROFILEDEF=3958567839,IFCPROFILEPROPERTIES=2802850158,IFCPROJECT=103090709,IFCPROJECTLIBRARY=653396225,IFCPROJECTORDER=2904328755,IFCPROJECTEDCRS=3843373140,IFCPROJECTIONELEMENT=3651124850,IFCPROPERTY=2598011224,IFCPROPERTYABSTRACTION=986844984,IFCPROPERTYBOUNDEDVALUE=871118103,IFCPROPERTYDEFINITION=1680319473,IFCPROPERTYDEPENDENCYRELATIONSHIP=148025276,IFCPROPERTYENUMERATEDVALUE=4166981789,IFCPROPERTYENUMERATION=3710013099,IFCPROPERTYLISTVALUE=2752243245,IFCPROPERTYREFERENCEVALUE=941946838,IFCPROPERTYSET=1451395588,IFCPROPERTYSETDEFINITION=3357820518,IFCPROPERTYSETTEMPLATE=492091185,IFCPROPERTYSINGLEVALUE=3650150729,IFCPROPERTYTABLEVALUE=110355661,IFCPROPERTYTEMPLATE=3521284610,IFCPROPERTYTEMPLATEDEFINITION=1482703590,IFCPROTECTIVEDEVICE=738039164,IFCPROTECTIVEDEVICETRIPPINGUNIT=2295281155,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=655969474,IFCPROTECTIVEDEVICETYPE=1842657554,IFCPROXY=3219374653,IFCPUMP=90941305,IFCPUMPTYPE=2250791053,IFCQUANTITYAREA=2044713172,IFCQUANTITYCOUNT=2093928680,IFCQUANTITYLENGTH=931644368,IFCQUANTITYSET=2090586900,IFCQUANTITYTIME=3252649465,IFCQUANTITYVOLUME=2405470396,IFCQUANTITYWEIGHT=825690147,IFCRAILING=2262370178,IFCRAILINGTYPE=2893384427,IFCRAMP=3024970846,IFCRAMPFLIGHT=3283111854,IFCRAMPFLIGHTTYPE=2324767716,IFCRAMPTYPE=1469900589,IFCRATIONALBSPLINECURVEWITHKNOTS=1232101972,IFCRATIONALBSPLINESURFACEWITHKNOTS=683857671,IFCRECTANGLEHOLLOWPROFILEDEF=2770003689,IFCRECTANGLEPROFILEDEF=3615266464,IFCRECTANGULARPYRAMID=2798486643,IFCRECTANGULARTRIMMEDSURFACE=3454111270,IFCRECURRENCEPATTERN=3915482550,IFCREFERENCE=2433181523,IFCREFERENT=4021432810,IFCREGULARTIMESERIES=3413951693,IFCREINFORCEMENTBARPROPERTIES=1580146022,IFCREINFORCEMENTDEFINITIONPROPERTIES=3765753017,IFCREINFORCINGBAR=979691226,IFCREINFORCINGBARTYPE=2572171363,IFCREINFORCINGELEMENT=3027567501,IFCREINFORCINGELEMENTTYPE=964333572,IFCREINFORCINGMESH=2320036040,IFCREINFORCINGMESHTYPE=2310774935,IFCRELAGGREGATES=160246688,IFCRELASSIGNS=3939117080,IFCRELASSIGNSTOACTOR=1683148259,IFCRELASSIGNSTOCONTROL=2495723537,IFCRELASSIGNSTOGROUP=1307041759,IFCRELASSIGNSTOGROUPBYFACTOR=1027710054,IFCRELASSIGNSTOPROCESS=4278684876,IFCRELASSIGNSTOPRODUCT=2857406711,IFCRELASSIGNSTORESOURCE=205026976,IFCRELASSOCIATES=1865459582,IFCRELASSOCIATESAPPROVAL=4095574036,IFCRELASSOCIATESCLASSIFICATION=919958153,IFCRELASSOCIATESCONSTRAINT=2728634034,IFCRELASSOCIATESDOCUMENT=982818633,IFCRELASSOCIATESLIBRARY=3840914261,IFCRELASSOCIATESMATERIAL=2655215786,IFCRELCONNECTS=826625072,IFCRELCONNECTSELEMENTS=1204542856,IFCRELCONNECTSPATHELEMENTS=3945020480,IFCRELCONNECTSPORTTOELEMENT=4201705270,IFCRELCONNECTSPORTS=3190031847,IFCRELCONNECTSSTRUCTURALACTIVITY=2127690289,IFCRELCONNECTSSTRUCTURALMEMBER=1638771189,IFCRELCONNECTSWITHECCENTRICITY=504942748,IFCRELCONNECTSWITHREALIZINGELEMENTS=3678494232,IFCRELCONTAINEDINSPATIALSTRUCTURE=3242617779,IFCRELCOVERSBLDGELEMENTS=886880790,IFCRELCOVERSSPACES=2802773753,IFCRELDECLARES=2565941209,IFCRELDECOMPOSES=2551354335,IFCRELDEFINES=693640335,IFCRELDEFINESBYOBJECT=1462361463,IFCRELDEFINESBYPROPERTIES=4186316022,IFCRELDEFINESBYTEMPLATE=307848117,IFCRELDEFINESBYTYPE=781010003,IFCRELFILLSELEMENT=3940055652,IFCRELFLOWCONTROLELEMENTS=279856033,IFCRELINTERFERESELEMENTS=427948657,IFCRELNESTS=3268803585,IFCRELPOSITIONS=1441486842,IFCRELPROJECTSELEMENT=750771296,IFCRELREFERENCEDINSPATIALSTRUCTURE=1245217292,IFCRELSEQUENCE=4122056220,IFCRELSERVICESBUILDINGS=366585022,IFCRELSPACEBOUNDARY=3451746338,IFCRELSPACEBOUNDARY1STLEVEL=3523091289,IFCRELSPACEBOUNDARY2NDLEVEL=1521410863,IFCRELVOIDSELEMENT=1401173127,IFCRELATIONSHIP=478536968,IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=816062949,IFCREPRESENTATION=1076942058,IFCREPRESENTATIONCONTEXT=3377609919,IFCREPRESENTATIONITEM=3008791417,IFCREPRESENTATIONMAP=1660063152,IFCRESOURCE=2914609552,IFCRESOURCEAPPROVALRELATIONSHIP=2943643501,IFCRESOURCECONSTRAINTRELATIONSHIP=1608871552,IFCRESOURCELEVELRELATIONSHIP=2439245199,IFCRESOURCETIME=1042787934,IFCREVOLVEDAREASOLID=1856042241,IFCREVOLVEDAREASOLIDTAPERED=3243963512,IFCRIGHTCIRCULARCONE=4158566097,IFCRIGHTCIRCULARCYLINDER=3626867408,IFCROOF=2016517767,IFCROOFTYPE=2781568857,IFCROOT=2341007311,IFCROUNDEDRECTANGLEPROFILEDEF=2778083089,IFCSIUNIT=448429030,IFCSANITARYTERMINAL=3053780830,IFCSANITARYTERMINALTYPE=1768891740,IFCSCHEDULINGTIME=1054537805,IFCSEAMCURVE=2157484638,IFCSECTIONPROPERTIES=2042790032,IFCSECTIONREINFORCEMENTPROPERTIES=4165799628,IFCSECTIONEDSOLID=1862484736,IFCSECTIONEDSOLIDHORIZONTAL=1290935644,IFCSECTIONEDSPINE=1509187699,IFCSENSOR=4086658281,IFCSENSORTYPE=1783015770,IFCSHADINGDEVICE=1329646415,IFCSHADINGDEVICETYPE=4074543187,IFCSHAPEASPECT=867548509,IFCSHAPEMODEL=3982875396,IFCSHAPEREPRESENTATION=4240577450,IFCSHELLBASEDSURFACEMODEL=4124623270,IFCSIMPLEPROPERTY=3692461612,IFCSIMPLEPROPERTYTEMPLATE=3663146110,IFCSITE=4097777520,IFCSLAB=1529196076,IFCSLABELEMENTEDCASE=3127900445,IFCSLABSTANDARDCASE=3027962421,IFCSLABTYPE=2533589738,IFCSLIPPAGECONNECTIONCONDITION=2609359061,IFCSOLARDEVICE=3420628829,IFCSOLARDEVICETYPE=1072016465,IFCSOLIDMODEL=723233188,IFCSPACE=3856911033,IFCSPACEHEATER=1999602285,IFCSPACEHEATERTYPE=1305183839,IFCSPACETYPE=3812236995,IFCSPATIALELEMENT=1412071761,IFCSPATIALELEMENTTYPE=710998568,IFCSPATIALSTRUCTUREELEMENT=2706606064,IFCSPATIALSTRUCTUREELEMENTTYPE=3893378262,IFCSPATIALZONE=463610769,IFCSPATIALZONETYPE=2481509218,IFCSPHERE=451544542,IFCSPHERICALSURFACE=4015995234,IFCSTACKTERMINAL=1404847402,IFCSTACKTERMINALTYPE=3112655638,IFCSTAIR=331165859,IFCSTAIRFLIGHT=4252922144,IFCSTAIRFLIGHTTYPE=1039846685,IFCSTAIRTYPE=338393293,IFCSTRUCTURALACTION=682877961,IFCSTRUCTURALACTIVITY=3544373492,IFCSTRUCTURALANALYSISMODEL=2515109513,IFCSTRUCTURALCONNECTION=1179482911,IFCSTRUCTURALCONNECTIONCONDITION=2273995522,IFCSTRUCTURALCURVEACTION=1004757350,IFCSTRUCTURALCURVECONNECTION=4243806635,IFCSTRUCTURALCURVEMEMBER=214636428,IFCSTRUCTURALCURVEMEMBERVARYING=2445595289,IFCSTRUCTURALCURVEREACTION=2757150158,IFCSTRUCTURALITEM=3136571912,IFCSTRUCTURALLINEARACTION=1807405624,IFCSTRUCTURALLOAD=2162789131,IFCSTRUCTURALLOADCASE=385403989,IFCSTRUCTURALLOADCONFIGURATION=3478079324,IFCSTRUCTURALLOADGROUP=1252848954,IFCSTRUCTURALLOADLINEARFORCE=1595516126,IFCSTRUCTURALLOADORRESULT=609421318,IFCSTRUCTURALLOADPLANARFORCE=2668620305,IFCSTRUCTURALLOADSINGLEDISPLACEMENT=2473145415,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=1973038258,IFCSTRUCTURALLOADSINGLEFORCE=1597423693,IFCSTRUCTURALLOADSINGLEFORCEWARPING=1190533807,IFCSTRUCTURALLOADSTATIC=2525727697,IFCSTRUCTURALLOADTEMPERATURE=3408363356,IFCSTRUCTURALMEMBER=530289379,IFCSTRUCTURALPLANARACTION=1621171031,IFCSTRUCTURALPOINTACTION=2082059205,IFCSTRUCTURALPOINTCONNECTION=734778138,IFCSTRUCTURALPOINTREACTION=1235345126,IFCSTRUCTURALREACTION=3689010777,IFCSTRUCTURALRESULTGROUP=2986769608,IFCSTRUCTURALSURFACEACTION=3657597509,IFCSTRUCTURALSURFACECONNECTION=1975003073,IFCSTRUCTURALSURFACEMEMBER=3979015343,IFCSTRUCTURALSURFACEMEMBERVARYING=2218152070,IFCSTRUCTURALSURFACEREACTION=603775116,IFCSTYLEMODEL=2830218821,IFCSTYLEDITEM=3958052878,IFCSTYLEDREPRESENTATION=3049322572,IFCSUBCONTRACTRESOURCE=148013059,IFCSUBCONTRACTRESOURCETYPE=4095615324,IFCSUBEDGE=2233826070,IFCSURFACE=2513912981,IFCSURFACECURVE=699246055,IFCSURFACECURVESWEPTAREASOLID=2028607225,IFCSURFACEFEATURE=3101698114,IFCSURFACEOFLINEAREXTRUSION=2809605785,IFCSURFACEOFREVOLUTION=4124788165,IFCSURFACEREINFORCEMENTAREA=2934153892,IFCSURFACESTYLE=1300840506,IFCSURFACESTYLELIGHTING=3303107099,IFCSURFACESTYLEREFRACTION=1607154358,IFCSURFACESTYLERENDERING=1878645084,IFCSURFACESTYLESHADING=846575682,IFCSURFACESTYLEWITHTEXTURES=1351298697,IFCSURFACETEXTURE=626085974,IFCSWEPTAREASOLID=2247615214,IFCSWEPTDISKSOLID=1260650574,IFCSWEPTDISKSOLIDPOLYGONAL=1096409881,IFCSWEPTSURFACE=230924584,IFCSWITCHINGDEVICE=1162798199,IFCSWITCHINGDEVICETYPE=2315554128,IFCSYSTEM=2254336722,IFCSYSTEMFURNITUREELEMENT=413509423,IFCSYSTEMFURNITUREELEMENTTYPE=1580310250,IFCTSHAPEPROFILEDEF=3071757647,IFCTABLE=985171141,IFCTABLECOLUMN=2043862942,IFCTABLEROW=531007025,IFCTANK=812556717,IFCTANKTYPE=5716631,IFCTASK=3473067441,IFCTASKTIME=1549132990,IFCTASKTIMERECURRING=2771591690,IFCTASKTYPE=3206491090,IFCTELECOMADDRESS=912023232,IFCTENDON=3824725483,IFCTENDONANCHOR=2347447852,IFCTENDONANCHORTYPE=3081323446,IFCTENDONCONDUIT=3663046924,IFCTENDONCONDUITTYPE=2281632017,IFCTENDONTYPE=2415094496,IFCTESSELLATEDFACESET=2387106220,IFCTESSELLATEDITEM=901063453,IFCTEXTLITERAL=4282788508,IFCTEXTLITERALWITHEXTENT=3124975700,IFCTEXTSTYLE=1447204868,IFCTEXTSTYLEFONTMODEL=1983826977,IFCTEXTSTYLEFORDEFINEDFONT=2636378356,IFCTEXTSTYLETEXTMODEL=1640371178,IFCTEXTURECOORDINATE=280115917,IFCTEXTURECOORDINATEGENERATOR=1742049831,IFCTEXTUREMAP=2552916305,IFCTEXTUREVERTEX=1210645708,IFCTEXTUREVERTEXLIST=3611470254,IFCTIMEPERIOD=1199560280,IFCTIMESERIES=3101149627,IFCTIMESERIESVALUE=581633288,IFCTOPOLOGICALREPRESENTATIONITEM=1377556343,IFCTOPOLOGYREPRESENTATION=1735638870,IFCTOROIDALSURFACE=1935646853,IFCTRANSFORMER=3825984169,IFCTRANSFORMERTYPE=1692211062,IFCTRANSITIONCURVESEGMENT2D=2595432518,IFCTRANSPORTELEMENT=1620046519,IFCTRANSPORTELEMENTTYPE=2097647324,IFCTRAPEZIUMPROFILEDEF=2715220739,IFCTRIANGULATEDFACESET=2916149573,IFCTRIANGULATEDIRREGULARNETWORK=1229763772,IFCTRIMMEDCURVE=3593883385,IFCTUBEBUNDLE=3026737570,IFCTUBEBUNDLETYPE=1600972822,IFCTYPEOBJECT=1628702193,IFCTYPEPROCESS=3736923433,IFCTYPEPRODUCT=2347495698,IFCTYPERESOURCE=3698973494,IFCUSHAPEPROFILEDEF=427810014,IFCUNITASSIGNMENT=180925521,IFCUNITARYCONTROLELEMENT=630975310,IFCUNITARYCONTROLELEMENTTYPE=3179687236,IFCUNITARYEQUIPMENT=4292641817,IFCUNITARYEQUIPMENTTYPE=1911125066,IFCVALVE=4207607924,IFCVALVETYPE=728799441,IFCVECTOR=1417489154,IFCVERTEX=2799835756,IFCVERTEXLOOP=2759199220,IFCVERTEXPOINT=1907098498,IFCVIBRATIONDAMPER=1530820697,IFCVIBRATIONDAMPERTYPE=3956297820,IFCVIBRATIONISOLATOR=2391383451,IFCVIBRATIONISOLATORTYPE=3313531582,IFCVIRTUALELEMENT=2769231204,IFCVIRTUALGRIDINTERSECTION=891718957,IFCVOIDINGFEATURE=926996030,IFCWALL=2391406946,IFCWALLELEMENTEDCASE=4156078855,IFCWALLSTANDARDCASE=3512223829,IFCWALLTYPE=1898987631,IFCWASTETERMINAL=4237592921,IFCWASTETERMINALTYPE=1133259667,IFCWINDOW=3304561284,IFCWINDOWLININGPROPERTIES=336235671,IFCWINDOWPANELPROPERTIES=512836454,IFCWINDOWSTANDARDCASE=486154966,IFCWINDOWSTYLE=1299126871,IFCWINDOWTYPE=4009809668,IFCWORKCALENDAR=4088093105,IFCWORKCONTROL=1028945134,IFCWORKPLAN=4218914973,IFCWORKSCHEDULE=3342526732,IFCWORKTIME=1236880293,IFCZSHAPEPROFILEDEF=2543172580,IFCZONE=1033361043,IfcElements=[IFCACTUATOR,IFCAIRTERMINAL,IFCAIRTERMINALBOX,IFCAIRTOAIRHEATRECOVERY,IFCALARM,IFCALIGNMENT,IFCANNOTATION,IFCAUDIOVISUALAPPLIANCE,IFCBEAM,IFCBEAMSTANDARDCASE,IFCBEARING,IFCBOILER,IFCBRIDGE,IFCBRIDGEPART,IFCBUILDING,IFCBUILDINGELEMENT,IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTPROXY,IFCBUILDINGSTOREY,IFCBURNER,IFCCABLECARRIERFITTING,IFCCABLECARRIERSEGMENT,IFCCABLEFITTING,IFCCABLESEGMENT,IFCCAISSONFOUNDATION,IFCCHILLER,IFCCHIMNEY,IFCCIVILELEMENT,IFCCOIL,IFCCOLUMN,IFCCOLUMNSTANDARDCASE,IFCCOMMUNICATIONSAPPLIANCE,IFCCOMPRESSOR,IFCCONDENSER,IFCCONTROLLER,IFCCOOLEDBEAM,IFCCOOLINGTOWER,IFCCOVERING,IFCCURTAINWALL,IFCDAMPER,IFCDEEPFOUNDATION,IFCDISCRETEACCESSORY,IFCDISTRIBUTIONCHAMBERELEMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONELEMENT,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONPORT,IFCDOOR,IFCDOORSTANDARDCASE,IFCDUCTFITTING,IFCDUCTSEGMENT,IFCDUCTSILENCER,IFCELECTRICAPPLIANCE,IFCELECTRICDISTRIBUTIONBOARD,IFCELECTRICFLOWSTORAGEDEVICE,IFCELECTRICGENERATOR,IFCELECTRICMOTOR,IFCELECTRICTIMECONTROL,IFCELEMENT,IFCELEMENTASSEMBLY,IFCELEMENTCOMPONENT,IFCENERGYCONVERSIONDEVICE,IFCENGINE,IFCEVAPORATIVECOOLER,IFCEVAPORATOR,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCFACILITY,IFCFACILITYPART,IFCFAN,IFCFASTENER,IFCFEATUREELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENTSUBTRACTION,IFCFILTER,IFCFIRESUPPRESSIONTERMINAL,IFCFLOWCONTROLLER,IFCFLOWFITTING,IFCFLOWINSTRUMENT,IFCFLOWMETER,IFCFLOWMOVINGDEVICE,IFCFLOWSEGMENT,IFCFLOWSTORAGEDEVICE,IFCFLOWTERMINAL,IFCFLOWTREATMENTDEVICE,IFCFOOTING,IFCFURNISHINGELEMENT,IFCFURNITURE,IFCGEOGRAPHICELEMENT,IFCGRID,IFCHEATEXCHANGER,IFCHUMIDIFIER,IFCINTERCEPTOR,IFCJUNCTIONBOX,IFCLAMP,IFCLIGHTFIXTURE,IFCLINEARPOSITIONINGELEMENT,IFCMECHANICALFASTENER,IFCMEDICALDEVICE,IFCMEMBER,IFCMEMBERSTANDARDCASE,IFCMOTORCONNECTION,IFCOPENINGELEMENT,IFCOPENINGSTANDARDCASE,IFCOUTLET,IFCPILE,IFCPIPEFITTING,IFCPIPESEGMENT,IFCPLATE,IFCPLATESTANDARDCASE,IFCPORT,IFCPOSITIONINGELEMENT,IFCPROJECTIONELEMENT,IFCPROTECTIVEDEVICE,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCPROXY,IFCPUMP,IFCRAILING,IFCRAMP,IFCRAMPFLIGHT,IFCREFERENT,IFCREINFORCINGBAR,IFCREINFORCINGELEMENT,IFCREINFORCINGMESH,IFCROOF,IFCSANITARYTERMINAL,IFCSENSOR,IFCSHADINGDEVICE,IFCSITE,IFCSLAB,IFCSLABELEMENTEDCASE,IFCSLABSTANDARDCASE,IFCSOLARDEVICE,IFCSPACE,IFCSPACEHEATER,IFCSPATIALELEMENT,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSTACKTERMINAL,IFCSTAIR,IFCSTAIRFLIGHT,IFCSTRUCTURALACTION,IFCSTRUCTURALACTIVITY,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALITEM,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALMEMBER,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEREACTION,IFCSURFACEFEATURE,IFCSWITCHINGDEVICE,IFCSYSTEMFURNITUREELEMENT,IFCTANK,IFCTENDON,IFCTENDONANCHOR,IFCTENDONCONDUIT,IFCTRANSFORMER,IFCTRANSPORTELEMENT,IFCTUBEBUNDLE,IFCUNITARYCONTROLELEMENT,IFCUNITARYEQUIPMENT,IFCVALVE,IFCVIBRATIONDAMPER,IFCVIBRATIONISOLATOR,IFCVIRTUALELEMENT,IFCVOIDINGFEATURE,IFCWALL,IFCWALLELEMENTEDCASE,IFCWALLSTANDARDCASE,IFCWASTETERMINAL,IFCWINDOW,IFCWINDOWSTANDARDCASE],FromRawLineData={};FromRawLineData[IFCACTIONREQUEST]=d=>IfcActionRequest.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCACTOR]=d=>IfcActor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCACTORROLE]=d=>IfcActorRole.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCACTUATOR]=d=>IfcActuator.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCACTUATORTYPE]=d=>IfcActuatorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCADDRESS]=d=>IfcAddress.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCADVANCEDBREP]=d=>IfcAdvancedBrep.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCADVANCEDBREPWITHVOIDS]=d=>IfcAdvancedBrepWithVoids.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCADVANCEDFACE]=d=>IfcAdvancedFace.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAIRTERMINAL]=d=>IfcAirTerminal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAIRTERMINALBOX]=d=>IfcAirTerminalBox.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAIRTERMINALBOXTYPE]=d=>IfcAirTerminalBoxType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAIRTERMINALTYPE]=d=>IfcAirTerminalType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAIRTOAIRHEATRECOVERY]=d=>IfcAirToAirHeatRecovery.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAIRTOAIRHEATRECOVERYTYPE]=d=>IfcAirToAirHeatRecoveryType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALARM]=d=>IfcAlarm.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALARMTYPE]=d=>IfcAlarmType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT]=d=>IfcAlignment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DHORIZONTAL]=d=>IfcAlignment2DHorizontal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DHORIZONTALSEGMENT]=d=>IfcAlignment2DHorizontalSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DSEGMENT]=d=>IfcAlignment2DSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DVERSEGCIRCULARARC]=d=>IfcAlignment2DVerSegCircularArc.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DVERSEGLINE]=d=>IfcAlignment2DVerSegLine.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DVERSEGPARABOLICARC]=d=>IfcAlignment2DVerSegParabolicArc.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DVERTICAL]=d=>IfcAlignment2DVertical.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENT2DVERTICALSEGMENT]=d=>IfcAlignment2DVerticalSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCALIGNMENTCURVE]=d=>IfcAlignmentCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCANNOTATION]=d=>IfcAnnotation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCANNOTATIONFILLAREA]=d=>IfcAnnotationFillArea.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAPPLICATION]=d=>IfcApplication.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAPPLIEDVALUE]=d=>IfcAppliedValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAPPROVAL]=d=>IfcApproval.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAPPROVALRELATIONSHIP]=d=>IfcApprovalRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCARBITRARYCLOSEDPROFILEDEF]=d=>IfcArbitraryClosedProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCARBITRARYOPENPROFILEDEF]=d=>IfcArbitraryOpenProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCARBITRARYPROFILEDEFWITHVOIDS]=d=>IfcArbitraryProfileDefWithVoids.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCASSET]=d=>IfcAsset.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCASYMMETRICISHAPEPROFILEDEF]=d=>IfcAsymmetricIShapeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAUDIOVISUALAPPLIANCE]=d=>IfcAudioVisualAppliance.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAUDIOVISUALAPPLIANCETYPE]=d=>IfcAudioVisualApplianceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAXIS1PLACEMENT]=d=>IfcAxis1Placement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAXIS2PLACEMENT2D]=d=>IfcAxis2Placement2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCAXIS2PLACEMENT3D]=d=>IfcAxis2Placement3D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBSPLINECURVE]=d=>IfcBSplineCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBSPLINECURVEWITHKNOTS]=d=>IfcBSplineCurveWithKnots.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBSPLINESURFACE]=d=>IfcBSplineSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBSPLINESURFACEWITHKNOTS]=d=>IfcBSplineSurfaceWithKnots.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBEAM]=d=>IfcBeam.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBEAMSTANDARDCASE]=d=>IfcBeamStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBEAMTYPE]=d=>IfcBeamType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBEARING]=d=>IfcBearing.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBEARINGTYPE]=d=>IfcBearingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBLOBTEXTURE]=d=>IfcBlobTexture.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBLOCK]=d=>IfcBlock.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOILER]=d=>IfcBoiler.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOILERTYPE]=d=>IfcBoilerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOOLEANCLIPPINGRESULT]=d=>IfcBooleanClippingResult.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOOLEANRESULT]=d=>IfcBooleanResult.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDARYCONDITION]=d=>IfcBoundaryCondition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDARYCURVE]=d=>IfcBoundaryCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDARYEDGECONDITION]=d=>IfcBoundaryEdgeCondition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDARYFACECONDITION]=d=>IfcBoundaryFaceCondition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDARYNODECONDITION]=d=>IfcBoundaryNodeCondition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDARYNODECONDITIONWARPING]=d=>IfcBoundaryNodeConditionWarping.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDEDCURVE]=d=>IfcBoundedCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDEDSURFACE]=d=>IfcBoundedSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOUNDINGBOX]=d=>IfcBoundingBox.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBOXEDHALFSPACE]=d=>IfcBoxedHalfSpace.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBRIDGE]=d=>IfcBridge.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBRIDGEPART]=d=>IfcBridgePart.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDING]=d=>IfcBuilding.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGELEMENT]=d=>IfcBuildingElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGELEMENTPART]=d=>IfcBuildingElementPart.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGELEMENTPARTTYPE]=d=>IfcBuildingElementPartType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGELEMENTPROXY]=d=>IfcBuildingElementProxy.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGELEMENTPROXYTYPE]=d=>IfcBuildingElementProxyType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGELEMENTTYPE]=d=>IfcBuildingElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGSTOREY]=d=>IfcBuildingStorey.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBUILDINGSYSTEM]=d=>IfcBuildingSystem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBURNER]=d=>IfcBurner.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCBURNERTYPE]=d=>IfcBurnerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCSHAPEPROFILEDEF]=d=>IfcCShapeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLECARRIERFITTING]=d=>IfcCableCarrierFitting.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLECARRIERFITTINGTYPE]=d=>IfcCableCarrierFittingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLECARRIERSEGMENT]=d=>IfcCableCarrierSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLECARRIERSEGMENTTYPE]=d=>IfcCableCarrierSegmentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLEFITTING]=d=>IfcCableFitting.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLEFITTINGTYPE]=d=>IfcCableFittingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLESEGMENT]=d=>IfcCableSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCABLESEGMENTTYPE]=d=>IfcCableSegmentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCAISSONFOUNDATION]=d=>IfcCaissonFoundation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCAISSONFOUNDATIONTYPE]=d=>IfcCaissonFoundationType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANPOINT]=d=>IfcCartesianPoint.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANPOINTLIST]=d=>IfcCartesianPointList.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANPOINTLIST2D]=d=>IfcCartesianPointList2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANPOINTLIST3D]=d=>IfcCartesianPointList3D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR]=d=>IfcCartesianTransformationOperator.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR2D]=d=>IfcCartesianTransformationOperator2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM]=d=>IfcCartesianTransformationOperator2DnonUniform.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR3D]=d=>IfcCartesianTransformationOperator3D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM]=d=>IfcCartesianTransformationOperator3DnonUniform.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCENTERLINEPROFILEDEF]=d=>IfcCenterLineProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCHILLER]=d=>IfcChiller.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCHILLERTYPE]=d=>IfcChillerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCHIMNEY]=d=>IfcChimney.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCHIMNEYTYPE]=d=>IfcChimneyType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCIRCLE]=d=>IfcCircle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCIRCLEHOLLOWPROFILEDEF]=d=>IfcCircleHollowProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCIRCLEPROFILEDEF]=d=>IfcCircleProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCIRCULARARCSEGMENT2D]=d=>IfcCircularArcSegment2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCIVILELEMENT]=d=>IfcCivilElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCIVILELEMENTTYPE]=d=>IfcCivilElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCLASSIFICATION]=d=>IfcClassification.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCLASSIFICATIONREFERENCE]=d=>IfcClassificationReference.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCLOSEDSHELL]=d=>IfcClosedShell.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOIL]=d=>IfcCoil.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOILTYPE]=d=>IfcCoilType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOLOURRGB]=d=>IfcColourRgb.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOLOURRGBLIST]=d=>IfcColourRgbList.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOLOURSPECIFICATION]=d=>IfcColourSpecification.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOLUMN]=d=>IfcColumn.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOLUMNSTANDARDCASE]=d=>IfcColumnStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOLUMNTYPE]=d=>IfcColumnType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMMUNICATIONSAPPLIANCE]=d=>IfcCommunicationsAppliance.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMMUNICATIONSAPPLIANCETYPE]=d=>IfcCommunicationsApplianceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPLEXPROPERTY]=d=>IfcComplexProperty.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPLEXPROPERTYTEMPLATE]=d=>IfcComplexPropertyTemplate.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPOSITECURVE]=d=>IfcCompositeCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPOSITECURVEONSURFACE]=d=>IfcCompositeCurveOnSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPOSITECURVESEGMENT]=d=>IfcCompositeCurveSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPOSITEPROFILEDEF]=d=>IfcCompositeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPRESSOR]=d=>IfcCompressor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOMPRESSORTYPE]=d=>IfcCompressorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONDENSER]=d=>IfcCondenser.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONDENSERTYPE]=d=>IfcCondenserType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONIC]=d=>IfcConic.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONNECTEDFACESET]=d=>IfcConnectedFaceSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONNECTIONCURVEGEOMETRY]=d=>IfcConnectionCurveGeometry.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONNECTIONGEOMETRY]=d=>IfcConnectionGeometry.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONNECTIONPOINTECCENTRICITY]=d=>IfcConnectionPointEccentricity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONNECTIONPOINTGEOMETRY]=d=>IfcConnectionPointGeometry.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONNECTIONSURFACEGEOMETRY]=d=>IfcConnectionSurfaceGeometry.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONNECTIONVOLUMEGEOMETRY]=d=>IfcConnectionVolumeGeometry.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRAINT]=d=>IfcConstraint.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONEQUIPMENTRESOURCE]=d=>IfcConstructionEquipmentResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE]=d=>IfcConstructionEquipmentResourceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONMATERIALRESOURCE]=d=>IfcConstructionMaterialResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONMATERIALRESOURCETYPE]=d=>IfcConstructionMaterialResourceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONPRODUCTRESOURCE]=d=>IfcConstructionProductResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONPRODUCTRESOURCETYPE]=d=>IfcConstructionProductResourceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONRESOURCE]=d=>IfcConstructionResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONSTRUCTIONRESOURCETYPE]=d=>IfcConstructionResourceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONTEXT]=d=>IfcContext.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONTEXTDEPENDENTUNIT]=d=>IfcContextDependentUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONTROL]=d=>IfcControl.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONTROLLER]=d=>IfcController.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONTROLLERTYPE]=d=>IfcControllerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONVERSIONBASEDUNIT]=d=>IfcConversionBasedUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCONVERSIONBASEDUNITWITHOFFSET]=d=>IfcConversionBasedUnitWithOffset.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOOLEDBEAM]=d=>IfcCooledBeam.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOOLEDBEAMTYPE]=d=>IfcCooledBeamType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOOLINGTOWER]=d=>IfcCoolingTower.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOOLINGTOWERTYPE]=d=>IfcCoolingTowerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOORDINATEOPERATION]=d=>IfcCoordinateOperation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOORDINATEREFERENCESYSTEM]=d=>IfcCoordinateReferenceSystem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOSTITEM]=d=>IfcCostItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOSTSCHEDULE]=d=>IfcCostSchedule.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOSTVALUE]=d=>IfcCostValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOVERING]=d=>IfcCovering.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCOVERINGTYPE]=d=>IfcCoveringType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCREWRESOURCE]=d=>IfcCrewResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCREWRESOURCETYPE]=d=>IfcCrewResourceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCSGPRIMITIVE3D]=d=>IfcCsgPrimitive3D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCSGSOLID]=d=>IfcCsgSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURRENCYRELATIONSHIP]=d=>IfcCurrencyRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURTAINWALL]=d=>IfcCurtainWall.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURTAINWALLTYPE]=d=>IfcCurtainWallType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVE]=d=>IfcCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVEBOUNDEDPLANE]=d=>IfcCurveBoundedPlane.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVEBOUNDEDSURFACE]=d=>IfcCurveBoundedSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVESEGMENT2D]=d=>IfcCurveSegment2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVESTYLE]=d=>IfcCurveStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVESTYLEFONT]=d=>IfcCurveStyleFont.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVESTYLEFONTANDSCALING]=d=>IfcCurveStyleFontAndScaling.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCURVESTYLEFONTPATTERN]=d=>IfcCurveStyleFontPattern.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCCYLINDRICALSURFACE]=d=>IfcCylindricalSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDAMPER]=d=>IfcDamper.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDAMPERTYPE]=d=>IfcDamperType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDEEPFOUNDATION]=d=>IfcDeepFoundation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDEEPFOUNDATIONTYPE]=d=>IfcDeepFoundationType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDERIVEDPROFILEDEF]=d=>IfcDerivedProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDERIVEDUNIT]=d=>IfcDerivedUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDERIVEDUNITELEMENT]=d=>IfcDerivedUnitElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDIMENSIONALEXPONENTS]=d=>IfcDimensionalExponents.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDIRECTION]=d=>IfcDirection.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISCRETEACCESSORY]=d=>IfcDiscreteAccessory.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISCRETEACCESSORYTYPE]=d=>IfcDiscreteAccessoryType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTANCEEXPRESSION]=d=>IfcDistanceExpression.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONCHAMBERELEMENT]=d=>IfcDistributionChamberElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONCHAMBERELEMENTTYPE]=d=>IfcDistributionChamberElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONCIRCUIT]=d=>IfcDistributionCircuit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONCONTROLELEMENT]=d=>IfcDistributionControlElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONCONTROLELEMENTTYPE]=d=>IfcDistributionControlElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONELEMENT]=d=>IfcDistributionElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONELEMENTTYPE]=d=>IfcDistributionElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONFLOWELEMENT]=d=>IfcDistributionFlowElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONFLOWELEMENTTYPE]=d=>IfcDistributionFlowElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONPORT]=d=>IfcDistributionPort.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDISTRIBUTIONSYSTEM]=d=>IfcDistributionSystem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOCUMENTINFORMATION]=d=>IfcDocumentInformation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOCUMENTINFORMATIONRELATIONSHIP]=d=>IfcDocumentInformationRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOCUMENTREFERENCE]=d=>IfcDocumentReference.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOOR]=d=>IfcDoor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOORLININGPROPERTIES]=d=>IfcDoorLiningProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOORPANELPROPERTIES]=d=>IfcDoorPanelProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOORSTANDARDCASE]=d=>IfcDoorStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOORSTYLE]=d=>IfcDoorStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDOORTYPE]=d=>IfcDoorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDRAUGHTINGPREDEFINEDCOLOUR]=d=>IfcDraughtingPreDefinedColour.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDRAUGHTINGPREDEFINEDCURVEFONT]=d=>IfcDraughtingPreDefinedCurveFont.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDUCTFITTING]=d=>IfcDuctFitting.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDUCTFITTINGTYPE]=d=>IfcDuctFittingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDUCTSEGMENT]=d=>IfcDuctSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDUCTSEGMENTTYPE]=d=>IfcDuctSegmentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDUCTSILENCER]=d=>IfcDuctSilencer.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCDUCTSILENCERTYPE]=d=>IfcDuctSilencerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEDGE]=d=>IfcEdge.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEDGECURVE]=d=>IfcEdgeCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEDGELOOP]=d=>IfcEdgeLoop.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICAPPLIANCE]=d=>IfcElectricAppliance.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICAPPLIANCETYPE]=d=>IfcElectricApplianceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICDISTRIBUTIONBOARD]=d=>IfcElectricDistributionBoard.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICDISTRIBUTIONBOARDTYPE]=d=>IfcElectricDistributionBoardType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICFLOWSTORAGEDEVICE]=d=>IfcElectricFlowStorageDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICFLOWSTORAGEDEVICETYPE]=d=>IfcElectricFlowStorageDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICGENERATOR]=d=>IfcElectricGenerator.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICGENERATORTYPE]=d=>IfcElectricGeneratorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICMOTOR]=d=>IfcElectricMotor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICMOTORTYPE]=d=>IfcElectricMotorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICTIMECONTROL]=d=>IfcElectricTimeControl.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELECTRICTIMECONTROLTYPE]=d=>IfcElectricTimeControlType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENT]=d=>IfcElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENTASSEMBLY]=d=>IfcElementAssembly.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENTASSEMBLYTYPE]=d=>IfcElementAssemblyType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENTCOMPONENT]=d=>IfcElementComponent.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENTCOMPONENTTYPE]=d=>IfcElementComponentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENTQUANTITY]=d=>IfcElementQuantity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENTTYPE]=d=>IfcElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELEMENTARYSURFACE]=d=>IfcElementarySurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELLIPSE]=d=>IfcEllipse.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCELLIPSEPROFILEDEF]=d=>IfcEllipseProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCENERGYCONVERSIONDEVICE]=d=>IfcEnergyConversionDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCENERGYCONVERSIONDEVICETYPE]=d=>IfcEnergyConversionDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCENGINE]=d=>IfcEngine.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCENGINETYPE]=d=>IfcEngineType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEVAPORATIVECOOLER]=d=>IfcEvaporativeCooler.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEVAPORATIVECOOLERTYPE]=d=>IfcEvaporativeCoolerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEVAPORATOR]=d=>IfcEvaporator.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEVAPORATORTYPE]=d=>IfcEvaporatorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEVENT]=d=>IfcEvent.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEVENTTIME]=d=>IfcEventTime.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEVENTTYPE]=d=>IfcEventType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTENDEDPROPERTIES]=d=>IfcExtendedProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALINFORMATION]=d=>IfcExternalInformation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALREFERENCE]=d=>IfcExternalReference.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALREFERENCERELATIONSHIP]=d=>IfcExternalReferenceRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALSPATIALELEMENT]=d=>IfcExternalSpatialElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALSPATIALSTRUCTUREELEMENT]=d=>IfcExternalSpatialStructureElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALLYDEFINEDHATCHSTYLE]=d=>IfcExternallyDefinedHatchStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALLYDEFINEDSURFACESTYLE]=d=>IfcExternallyDefinedSurfaceStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTERNALLYDEFINEDTEXTFONT]=d=>IfcExternallyDefinedTextFont.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTRUDEDAREASOLID]=d=>IfcExtrudedAreaSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCEXTRUDEDAREASOLIDTAPERED]=d=>IfcExtrudedAreaSolidTapered.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACE]=d=>IfcFace.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACEBASEDSURFACEMODEL]=d=>IfcFaceBasedSurfaceModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACEBOUND]=d=>IfcFaceBound.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACEOUTERBOUND]=d=>IfcFaceOuterBound.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACESURFACE]=d=>IfcFaceSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACETEDBREP]=d=>IfcFacetedBrep.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACETEDBREPWITHVOIDS]=d=>IfcFacetedBrepWithVoids.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACILITY]=d=>IfcFacility.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFACILITYPART]=d=>IfcFacilityPart.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFAILURECONNECTIONCONDITION]=d=>IfcFailureConnectionCondition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFAN]=d=>IfcFan.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFANTYPE]=d=>IfcFanType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFASTENER]=d=>IfcFastener.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFASTENERTYPE]=d=>IfcFastenerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFEATUREELEMENT]=d=>IfcFeatureElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFEATUREELEMENTADDITION]=d=>IfcFeatureElementAddition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFEATUREELEMENTSUBTRACTION]=d=>IfcFeatureElementSubtraction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFILLAREASTYLE]=d=>IfcFillAreaStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFILLAREASTYLEHATCHING]=d=>IfcFillAreaStyleHatching.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFILLAREASTYLETILES]=d=>IfcFillAreaStyleTiles.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFILTER]=d=>IfcFilter.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFILTERTYPE]=d=>IfcFilterType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFIRESUPPRESSIONTERMINAL]=d=>IfcFireSuppressionTerminal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFIRESUPPRESSIONTERMINALTYPE]=d=>IfcFireSuppressionTerminalType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFIXEDREFERENCESWEPTAREASOLID]=d=>IfcFixedReferenceSweptAreaSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWCONTROLLER]=d=>IfcFlowController.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWCONTROLLERTYPE]=d=>IfcFlowControllerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWFITTING]=d=>IfcFlowFitting.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWFITTINGTYPE]=d=>IfcFlowFittingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWINSTRUMENT]=d=>IfcFlowInstrument.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWINSTRUMENTTYPE]=d=>IfcFlowInstrumentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWMETER]=d=>IfcFlowMeter.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWMETERTYPE]=d=>IfcFlowMeterType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWMOVINGDEVICE]=d=>IfcFlowMovingDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWMOVINGDEVICETYPE]=d=>IfcFlowMovingDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWSEGMENT]=d=>IfcFlowSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWSEGMENTTYPE]=d=>IfcFlowSegmentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWSTORAGEDEVICE]=d=>IfcFlowStorageDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWSTORAGEDEVICETYPE]=d=>IfcFlowStorageDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWTERMINAL]=d=>IfcFlowTerminal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWTERMINALTYPE]=d=>IfcFlowTerminalType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWTREATMENTDEVICE]=d=>IfcFlowTreatmentDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFLOWTREATMENTDEVICETYPE]=d=>IfcFlowTreatmentDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFOOTING]=d=>IfcFooting.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFOOTINGTYPE]=d=>IfcFootingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFURNISHINGELEMENT]=d=>IfcFurnishingElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFURNISHINGELEMENTTYPE]=d=>IfcFurnishingElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFURNITURE]=d=>IfcFurniture.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCFURNITURETYPE]=d=>IfcFurnitureType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGEOGRAPHICELEMENT]=d=>IfcGeographicElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGEOGRAPHICELEMENTTYPE]=d=>IfcGeographicElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGEOMETRICCURVESET]=d=>IfcGeometricCurveSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGEOMETRICREPRESENTATIONCONTEXT]=d=>IfcGeometricRepresentationContext.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGEOMETRICREPRESENTATIONITEM]=d=>IfcGeometricRepresentationItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGEOMETRICREPRESENTATIONSUBCONTEXT]=d=>IfcGeometricRepresentationSubContext.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGEOMETRICSET]=d=>IfcGeometricSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGRID]=d=>IfcGrid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGRIDAXIS]=d=>IfcGridAxis.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGRIDPLACEMENT]=d=>IfcGridPlacement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCGROUP]=d=>IfcGroup.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCHALFSPACESOLID]=d=>IfcHalfSpaceSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCHEATEXCHANGER]=d=>IfcHeatExchanger.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCHEATEXCHANGERTYPE]=d=>IfcHeatExchangerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCHUMIDIFIER]=d=>IfcHumidifier.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCHUMIDIFIERTYPE]=d=>IfcHumidifierType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCISHAPEPROFILEDEF]=d=>IfcIShapeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCIMAGETEXTURE]=d=>IfcImageTexture.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINDEXEDCOLOURMAP]=d=>IfcIndexedColourMap.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINDEXEDPOLYCURVE]=d=>IfcIndexedPolyCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINDEXEDPOLYGONALFACE]=d=>IfcIndexedPolygonalFace.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINDEXEDPOLYGONALFACEWITHVOIDS]=d=>IfcIndexedPolygonalFaceWithVoids.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINDEXEDTEXTUREMAP]=d=>IfcIndexedTextureMap.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINDEXEDTRIANGLETEXTUREMAP]=d=>IfcIndexedTriangleTextureMap.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINTERCEPTOR]=d=>IfcInterceptor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINTERCEPTORTYPE]=d=>IfcInterceptorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINTERSECTIONCURVE]=d=>IfcIntersectionCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCINVENTORY]=d=>IfcInventory.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCIRREGULARTIMESERIES]=d=>IfcIrregularTimeSeries.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCIRREGULARTIMESERIESVALUE]=d=>IfcIrregularTimeSeriesValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCJUNCTIONBOX]=d=>IfcJunctionBox.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCJUNCTIONBOXTYPE]=d=>IfcJunctionBoxType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLSHAPEPROFILEDEF]=d=>IfcLShapeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLABORRESOURCE]=d=>IfcLaborResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLABORRESOURCETYPE]=d=>IfcLaborResourceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLAGTIME]=d=>IfcLagTime.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLAMP]=d=>IfcLamp.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLAMPTYPE]=d=>IfcLampType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIBRARYINFORMATION]=d=>IfcLibraryInformation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIBRARYREFERENCE]=d=>IfcLibraryReference.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTDISTRIBUTIONDATA]=d=>IfcLightDistributionData.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTFIXTURE]=d=>IfcLightFixture.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTFIXTURETYPE]=d=>IfcLightFixtureType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTINTENSITYDISTRIBUTION]=d=>IfcLightIntensityDistribution.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTSOURCE]=d=>IfcLightSource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTSOURCEAMBIENT]=d=>IfcLightSourceAmbient.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTSOURCEDIRECTIONAL]=d=>IfcLightSourceDirectional.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTSOURCEGONIOMETRIC]=d=>IfcLightSourceGoniometric.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTSOURCEPOSITIONAL]=d=>IfcLightSourcePositional.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLIGHTSOURCESPOT]=d=>IfcLightSourceSpot.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLINE]=d=>IfcLine.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLINESEGMENT2D]=d=>IfcLineSegment2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLINEARPLACEMENT]=d=>IfcLinearPlacement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLINEARPOSITIONINGELEMENT]=d=>IfcLinearPositioningElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLOCALPLACEMENT]=d=>IfcLocalPlacement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCLOOP]=d=>IfcLoop.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMANIFOLDSOLIDBREP]=d=>IfcManifoldSolidBrep.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMAPCONVERSION]=d=>IfcMapConversion.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMAPPEDITEM]=d=>IfcMappedItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIAL]=d=>IfcMaterial.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALCLASSIFICATIONRELATIONSHIP]=d=>IfcMaterialClassificationRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALCONSTITUENT]=d=>IfcMaterialConstituent.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALCONSTITUENTSET]=d=>IfcMaterialConstituentSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALDEFINITION]=d=>IfcMaterialDefinition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALDEFINITIONREPRESENTATION]=d=>IfcMaterialDefinitionRepresentation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALLAYER]=d=>IfcMaterialLayer.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALLAYERSET]=d=>IfcMaterialLayerSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALLAYERSETUSAGE]=d=>IfcMaterialLayerSetUsage.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALLAYERWITHOFFSETS]=d=>IfcMaterialLayerWithOffsets.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALLIST]=d=>IfcMaterialList.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALPROFILE]=d=>IfcMaterialProfile.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALPROFILESET]=d=>IfcMaterialProfileSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALPROFILESETUSAGE]=d=>IfcMaterialProfileSetUsage.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALPROFILESETUSAGETAPERING]=d=>IfcMaterialProfileSetUsageTapering.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALPROFILEWITHOFFSETS]=d=>IfcMaterialProfileWithOffsets.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALPROPERTIES]=d=>IfcMaterialProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALRELATIONSHIP]=d=>IfcMaterialRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMATERIALUSAGEDEFINITION]=d=>IfcMaterialUsageDefinition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMEASUREWITHUNIT]=d=>IfcMeasureWithUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMECHANICALFASTENER]=d=>IfcMechanicalFastener.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMECHANICALFASTENERTYPE]=d=>IfcMechanicalFastenerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMEDICALDEVICE]=d=>IfcMedicalDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMEDICALDEVICETYPE]=d=>IfcMedicalDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMEMBER]=d=>IfcMember.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMEMBERSTANDARDCASE]=d=>IfcMemberStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMEMBERTYPE]=d=>IfcMemberType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMETRIC]=d=>IfcMetric.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMIRROREDPROFILEDEF]=d=>IfcMirroredProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMONETARYUNIT]=d=>IfcMonetaryUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMOTORCONNECTION]=d=>IfcMotorConnection.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCMOTORCONNECTIONTYPE]=d=>IfcMotorConnectionType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCNAMEDUNIT]=d=>IfcNamedUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOBJECT]=d=>IfcObject.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOBJECTDEFINITION]=d=>IfcObjectDefinition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOBJECTPLACEMENT]=d=>IfcObjectPlacement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOBJECTIVE]=d=>IfcObjective.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOCCUPANT]=d=>IfcOccupant.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOFFSETCURVE]=d=>IfcOffsetCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOFFSETCURVE2D]=d=>IfcOffsetCurve2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOFFSETCURVE3D]=d=>IfcOffsetCurve3D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOFFSETCURVEBYDISTANCES]=d=>IfcOffsetCurveByDistances.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOPENSHELL]=d=>IfcOpenShell.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOPENINGELEMENT]=d=>IfcOpeningElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOPENINGSTANDARDCASE]=d=>IfcOpeningStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCORGANIZATION]=d=>IfcOrganization.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCORGANIZATIONRELATIONSHIP]=d=>IfcOrganizationRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCORIENTATIONEXPRESSION]=d=>IfcOrientationExpression.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCORIENTEDEDGE]=d=>IfcOrientedEdge.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOUTERBOUNDARYCURVE]=d=>IfcOuterBoundaryCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOUTLET]=d=>IfcOutlet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOUTLETTYPE]=d=>IfcOutletType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCOWNERHISTORY]=d=>IfcOwnerHistory.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPARAMETERIZEDPROFILEDEF]=d=>IfcParameterizedProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPATH]=d=>IfcPath.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPCURVE]=d=>IfcPcurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPERFORMANCEHISTORY]=d=>IfcPerformanceHistory.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPERMEABLECOVERINGPROPERTIES]=d=>IfcPermeableCoveringProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPERMIT]=d=>IfcPermit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPERSON]=d=>IfcPerson.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPERSONANDORGANIZATION]=d=>IfcPersonAndOrganization.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPHYSICALCOMPLEXQUANTITY]=d=>IfcPhysicalComplexQuantity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPHYSICALQUANTITY]=d=>IfcPhysicalQuantity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPHYSICALSIMPLEQUANTITY]=d=>IfcPhysicalSimpleQuantity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPILE]=d=>IfcPile.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPILETYPE]=d=>IfcPileType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPIPEFITTING]=d=>IfcPipeFitting.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPIPEFITTINGTYPE]=d=>IfcPipeFittingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPIPESEGMENT]=d=>IfcPipeSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPIPESEGMENTTYPE]=d=>IfcPipeSegmentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPIXELTEXTURE]=d=>IfcPixelTexture.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPLACEMENT]=d=>IfcPlacement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPLANARBOX]=d=>IfcPlanarBox.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPLANAREXTENT]=d=>IfcPlanarExtent.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPLANE]=d=>IfcPlane.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPLATE]=d=>IfcPlate.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPLATESTANDARDCASE]=d=>IfcPlateStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPLATETYPE]=d=>IfcPlateType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOINT]=d=>IfcPoint.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOINTONCURVE]=d=>IfcPointOnCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOINTONSURFACE]=d=>IfcPointOnSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOLYLOOP]=d=>IfcPolyLoop.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOLYGONALBOUNDEDHALFSPACE]=d=>IfcPolygonalBoundedHalfSpace.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOLYGONALFACESET]=d=>IfcPolygonalFaceSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOLYLINE]=d=>IfcPolyline.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPORT]=d=>IfcPort.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOSITIONINGELEMENT]=d=>IfcPositioningElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPOSTALADDRESS]=d=>IfcPostalAddress.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPREDEFINEDCOLOUR]=d=>IfcPreDefinedColour.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPREDEFINEDCURVEFONT]=d=>IfcPreDefinedCurveFont.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPREDEFINEDITEM]=d=>IfcPreDefinedItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPREDEFINEDPROPERTIES]=d=>IfcPreDefinedProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPREDEFINEDPROPERTYSET]=d=>IfcPreDefinedPropertySet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPREDEFINEDTEXTFONT]=d=>IfcPreDefinedTextFont.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRESENTATIONITEM]=d=>IfcPresentationItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRESENTATIONLAYERASSIGNMENT]=d=>IfcPresentationLayerAssignment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRESENTATIONLAYERWITHSTYLE]=d=>IfcPresentationLayerWithStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRESENTATIONSTYLE]=d=>IfcPresentationStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRESENTATIONSTYLEASSIGNMENT]=d=>IfcPresentationStyleAssignment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROCEDURE]=d=>IfcProcedure.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROCEDURETYPE]=d=>IfcProcedureType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROCESS]=d=>IfcProcess.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRODUCT]=d=>IfcProduct.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRODUCTDEFINITIONSHAPE]=d=>IfcProductDefinitionShape.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPRODUCTREPRESENTATION]=d=>IfcProductRepresentation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROFILEDEF]=d=>IfcProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROFILEPROPERTIES]=d=>IfcProfileProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROJECT]=d=>IfcProject.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROJECTLIBRARY]=d=>IfcProjectLibrary.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROJECTORDER]=d=>IfcProjectOrder.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROJECTEDCRS]=d=>IfcProjectedCRS.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROJECTIONELEMENT]=d=>IfcProjectionElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTY]=d=>IfcProperty.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYABSTRACTION]=d=>IfcPropertyAbstraction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYBOUNDEDVALUE]=d=>IfcPropertyBoundedValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYDEFINITION]=d=>IfcPropertyDefinition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYDEPENDENCYRELATIONSHIP]=d=>IfcPropertyDependencyRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYENUMERATEDVALUE]=d=>IfcPropertyEnumeratedValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYENUMERATION]=d=>IfcPropertyEnumeration.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYLISTVALUE]=d=>IfcPropertyListValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYREFERENCEVALUE]=d=>IfcPropertyReferenceValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYSET]=d=>IfcPropertySet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYSETDEFINITION]=d=>IfcPropertySetDefinition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYSETTEMPLATE]=d=>IfcPropertySetTemplate.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYSINGLEVALUE]=d=>IfcPropertySingleValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYTABLEVALUE]=d=>IfcPropertyTableValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYTEMPLATE]=d=>IfcPropertyTemplate.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROPERTYTEMPLATEDEFINITION]=d=>IfcPropertyTemplateDefinition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROTECTIVEDEVICE]=d=>IfcProtectiveDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROTECTIVEDEVICETRIPPINGUNIT]=d=>IfcProtectiveDeviceTrippingUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROTECTIVEDEVICETRIPPINGUNITTYPE]=d=>IfcProtectiveDeviceTrippingUnitType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROTECTIVEDEVICETYPE]=d=>IfcProtectiveDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPROXY]=d=>IfcProxy.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPUMP]=d=>IfcPump.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCPUMPTYPE]=d=>IfcPumpType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCQUANTITYAREA]=d=>IfcQuantityArea.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCQUANTITYCOUNT]=d=>IfcQuantityCount.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCQUANTITYLENGTH]=d=>IfcQuantityLength.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCQUANTITYSET]=d=>IfcQuantitySet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCQUANTITYTIME]=d=>IfcQuantityTime.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCQUANTITYVOLUME]=d=>IfcQuantityVolume.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCQUANTITYWEIGHT]=d=>IfcQuantityWeight.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRAILING]=d=>IfcRailing.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRAILINGTYPE]=d=>IfcRailingType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRAMP]=d=>IfcRamp.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRAMPFLIGHT]=d=>IfcRampFlight.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRAMPFLIGHTTYPE]=d=>IfcRampFlightType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRAMPTYPE]=d=>IfcRampType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRATIONALBSPLINECURVEWITHKNOTS]=d=>IfcRationalBSplineCurveWithKnots.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRATIONALBSPLINESURFACEWITHKNOTS]=d=>IfcRationalBSplineSurfaceWithKnots.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRECTANGLEHOLLOWPROFILEDEF]=d=>IfcRectangleHollowProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRECTANGLEPROFILEDEF]=d=>IfcRectangleProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRECTANGULARPYRAMID]=d=>IfcRectangularPyramid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRECTANGULARTRIMMEDSURFACE]=d=>IfcRectangularTrimmedSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRECURRENCEPATTERN]=d=>IfcRecurrencePattern.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREFERENCE]=d=>IfcReference.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREFERENT]=d=>IfcReferent.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREGULARTIMESERIES]=d=>IfcRegularTimeSeries.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCEMENTBARPROPERTIES]=d=>IfcReinforcementBarProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCEMENTDEFINITIONPROPERTIES]=d=>IfcReinforcementDefinitionProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCINGBAR]=d=>IfcReinforcingBar.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCINGBARTYPE]=d=>IfcReinforcingBarType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCINGELEMENT]=d=>IfcReinforcingElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCINGELEMENTTYPE]=d=>IfcReinforcingElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCINGMESH]=d=>IfcReinforcingMesh.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREINFORCINGMESHTYPE]=d=>IfcReinforcingMeshType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELAGGREGATES]=d=>IfcRelAggregates.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNS]=d=>IfcRelAssigns.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNSTOACTOR]=d=>IfcRelAssignsToActor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNSTOCONTROL]=d=>IfcRelAssignsToControl.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNSTOGROUP]=d=>IfcRelAssignsToGroup.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNSTOGROUPBYFACTOR]=d=>IfcRelAssignsToGroupByFactor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNSTOPROCESS]=d=>IfcRelAssignsToProcess.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNSTOPRODUCT]=d=>IfcRelAssignsToProduct.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSIGNSTORESOURCE]=d=>IfcRelAssignsToResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSOCIATES]=d=>IfcRelAssociates.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSOCIATESAPPROVAL]=d=>IfcRelAssociatesApproval.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSOCIATESCLASSIFICATION]=d=>IfcRelAssociatesClassification.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSOCIATESCONSTRAINT]=d=>IfcRelAssociatesConstraint.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSOCIATESDOCUMENT]=d=>IfcRelAssociatesDocument.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSOCIATESLIBRARY]=d=>IfcRelAssociatesLibrary.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELASSOCIATESMATERIAL]=d=>IfcRelAssociatesMaterial.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTS]=d=>IfcRelConnects.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSELEMENTS]=d=>IfcRelConnectsElements.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSPATHELEMENTS]=d=>IfcRelConnectsPathElements.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSPORTTOELEMENT]=d=>IfcRelConnectsPortToElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSPORTS]=d=>IfcRelConnectsPorts.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSSTRUCTURALACTIVITY]=d=>IfcRelConnectsStructuralActivity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSSTRUCTURALMEMBER]=d=>IfcRelConnectsStructuralMember.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSWITHECCENTRICITY]=d=>IfcRelConnectsWithEccentricity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONNECTSWITHREALIZINGELEMENTS]=d=>IfcRelConnectsWithRealizingElements.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCONTAINEDINSPATIALSTRUCTURE]=d=>IfcRelContainedInSpatialStructure.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCOVERSBLDGELEMENTS]=d=>IfcRelCoversBldgElements.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELCOVERSSPACES]=d=>IfcRelCoversSpaces.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELDECLARES]=d=>IfcRelDeclares.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELDECOMPOSES]=d=>IfcRelDecomposes.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELDEFINES]=d=>IfcRelDefines.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELDEFINESBYOBJECT]=d=>IfcRelDefinesByObject.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELDEFINESBYPROPERTIES]=d=>IfcRelDefinesByProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELDEFINESBYTEMPLATE]=d=>IfcRelDefinesByTemplate.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELDEFINESBYTYPE]=d=>IfcRelDefinesByType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELFILLSELEMENT]=d=>IfcRelFillsElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELFLOWCONTROLELEMENTS]=d=>IfcRelFlowControlElements.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELINTERFERESELEMENTS]=d=>IfcRelInterferesElements.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELNESTS]=d=>IfcRelNests.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELPOSITIONS]=d=>IfcRelPositions.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELPROJECTSELEMENT]=d=>IfcRelProjectsElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELREFERENCEDINSPATIALSTRUCTURE]=d=>IfcRelReferencedInSpatialStructure.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELSEQUENCE]=d=>IfcRelSequence.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELSERVICESBUILDINGS]=d=>IfcRelServicesBuildings.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELSPACEBOUNDARY]=d=>IfcRelSpaceBoundary.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELSPACEBOUNDARY1STLEVEL]=d=>IfcRelSpaceBoundary1stLevel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELSPACEBOUNDARY2NDLEVEL]=d=>IfcRelSpaceBoundary2ndLevel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELVOIDSELEMENT]=d=>IfcRelVoidsElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRELATIONSHIP]=d=>IfcRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREPARAMETRISEDCOMPOSITECURVESEGMENT]=d=>IfcReparametrisedCompositeCurveSegment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREPRESENTATION]=d=>IfcRepresentation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREPRESENTATIONCONTEXT]=d=>IfcRepresentationContext.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREPRESENTATIONITEM]=d=>IfcRepresentationItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREPRESENTATIONMAP]=d=>IfcRepresentationMap.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRESOURCE]=d=>IfcResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRESOURCEAPPROVALRELATIONSHIP]=d=>IfcResourceApprovalRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRESOURCECONSTRAINTRELATIONSHIP]=d=>IfcResourceConstraintRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRESOURCELEVELRELATIONSHIP]=d=>IfcResourceLevelRelationship.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRESOURCETIME]=d=>IfcResourceTime.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREVOLVEDAREASOLID]=d=>IfcRevolvedAreaSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCREVOLVEDAREASOLIDTAPERED]=d=>IfcRevolvedAreaSolidTapered.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRIGHTCIRCULARCONE]=d=>IfcRightCircularCone.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCRIGHTCIRCULARCYLINDER]=d=>IfcRightCircularCylinder.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCROOF]=d=>IfcRoof.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCROOFTYPE]=d=>IfcRoofType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCROOT]=d=>IfcRoot.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCROUNDEDRECTANGLEPROFILEDEF]=d=>IfcRoundedRectangleProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSIUNIT]=d=>IfcSIUnit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSANITARYTERMINAL]=d=>IfcSanitaryTerminal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSANITARYTERMINALTYPE]=d=>IfcSanitaryTerminalType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSCHEDULINGTIME]=d=>IfcSchedulingTime.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSEAMCURVE]=d=>IfcSeamCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSECTIONPROPERTIES]=d=>IfcSectionProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSECTIONREINFORCEMENTPROPERTIES]=d=>IfcSectionReinforcementProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSECTIONEDSOLID]=d=>IfcSectionedSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSECTIONEDSOLIDHORIZONTAL]=d=>IfcSectionedSolidHorizontal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSECTIONEDSPINE]=d=>IfcSectionedSpine.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSENSOR]=d=>IfcSensor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSENSORTYPE]=d=>IfcSensorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSHADINGDEVICE]=d=>IfcShadingDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSHADINGDEVICETYPE]=d=>IfcShadingDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSHAPEASPECT]=d=>IfcShapeAspect.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSHAPEMODEL]=d=>IfcShapeModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSHAPEREPRESENTATION]=d=>IfcShapeRepresentation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSHELLBASEDSURFACEMODEL]=d=>IfcShellBasedSurfaceModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSIMPLEPROPERTY]=d=>IfcSimpleProperty.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSIMPLEPROPERTYTEMPLATE]=d=>IfcSimplePropertyTemplate.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSITE]=d=>IfcSite.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSLAB]=d=>IfcSlab.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSLABELEMENTEDCASE]=d=>IfcSlabElementedCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSLABSTANDARDCASE]=d=>IfcSlabStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSLABTYPE]=d=>IfcSlabType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSLIPPAGECONNECTIONCONDITION]=d=>IfcSlippageConnectionCondition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSOLARDEVICE]=d=>IfcSolarDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSOLARDEVICETYPE]=d=>IfcSolarDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSOLIDMODEL]=d=>IfcSolidModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPACE]=d=>IfcSpace.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPACEHEATER]=d=>IfcSpaceHeater.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPACEHEATERTYPE]=d=>IfcSpaceHeaterType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPACETYPE]=d=>IfcSpaceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPATIALELEMENT]=d=>IfcSpatialElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPATIALELEMENTTYPE]=d=>IfcSpatialElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPATIALSTRUCTUREELEMENT]=d=>IfcSpatialStructureElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPATIALSTRUCTUREELEMENTTYPE]=d=>IfcSpatialStructureElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPATIALZONE]=d=>IfcSpatialZone.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPATIALZONETYPE]=d=>IfcSpatialZoneType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPHERE]=d=>IfcSphere.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSPHERICALSURFACE]=d=>IfcSphericalSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTACKTERMINAL]=d=>IfcStackTerminal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTACKTERMINALTYPE]=d=>IfcStackTerminalType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTAIR]=d=>IfcStair.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTAIRFLIGHT]=d=>IfcStairFlight.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTAIRFLIGHTTYPE]=d=>IfcStairFlightType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTAIRTYPE]=d=>IfcStairType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALACTION]=d=>IfcStructuralAction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALACTIVITY]=d=>IfcStructuralActivity.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALANALYSISMODEL]=d=>IfcStructuralAnalysisModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALCONNECTION]=d=>IfcStructuralConnection.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALCONNECTIONCONDITION]=d=>IfcStructuralConnectionCondition.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALCURVEACTION]=d=>IfcStructuralCurveAction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALCURVECONNECTION]=d=>IfcStructuralCurveConnection.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALCURVEMEMBER]=d=>IfcStructuralCurveMember.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALCURVEMEMBERVARYING]=d=>IfcStructuralCurveMemberVarying.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALCURVEREACTION]=d=>IfcStructuralCurveReaction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALITEM]=d=>IfcStructuralItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLINEARACTION]=d=>IfcStructuralLinearAction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOAD]=d=>IfcStructuralLoad.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADCASE]=d=>IfcStructuralLoadCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADCONFIGURATION]=d=>IfcStructuralLoadConfiguration.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADGROUP]=d=>IfcStructuralLoadGroup.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADLINEARFORCE]=d=>IfcStructuralLoadLinearForce.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADORRESULT]=d=>IfcStructuralLoadOrResult.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADPLANARFORCE]=d=>IfcStructuralLoadPlanarForce.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADSINGLEDISPLACEMENT]=d=>IfcStructuralLoadSingleDisplacement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION]=d=>IfcStructuralLoadSingleDisplacementDistortion.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADSINGLEFORCE]=d=>IfcStructuralLoadSingleForce.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADSINGLEFORCEWARPING]=d=>IfcStructuralLoadSingleForceWarping.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADSTATIC]=d=>IfcStructuralLoadStatic.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALLOADTEMPERATURE]=d=>IfcStructuralLoadTemperature.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALMEMBER]=d=>IfcStructuralMember.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALPLANARACTION]=d=>IfcStructuralPlanarAction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALPOINTACTION]=d=>IfcStructuralPointAction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALPOINTCONNECTION]=d=>IfcStructuralPointConnection.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALPOINTREACTION]=d=>IfcStructuralPointReaction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALREACTION]=d=>IfcStructuralReaction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALRESULTGROUP]=d=>IfcStructuralResultGroup.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALSURFACEACTION]=d=>IfcStructuralSurfaceAction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALSURFACECONNECTION]=d=>IfcStructuralSurfaceConnection.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALSURFACEMEMBER]=d=>IfcStructuralSurfaceMember.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALSURFACEMEMBERVARYING]=d=>IfcStructuralSurfaceMemberVarying.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTRUCTURALSURFACEREACTION]=d=>IfcStructuralSurfaceReaction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTYLEMODEL]=d=>IfcStyleModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTYLEDITEM]=d=>IfcStyledItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSTYLEDREPRESENTATION]=d=>IfcStyledRepresentation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSUBCONTRACTRESOURCE]=d=>IfcSubContractResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSUBCONTRACTRESOURCETYPE]=d=>IfcSubContractResourceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSUBEDGE]=d=>IfcSubedge.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACE]=d=>IfcSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACECURVE]=d=>IfcSurfaceCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACECURVESWEPTAREASOLID]=d=>IfcSurfaceCurveSweptAreaSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACEFEATURE]=d=>IfcSurfaceFeature.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACEOFLINEAREXTRUSION]=d=>IfcSurfaceOfLinearExtrusion.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACEOFREVOLUTION]=d=>IfcSurfaceOfRevolution.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACEREINFORCEMENTAREA]=d=>IfcSurfaceReinforcementArea.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACESTYLE]=d=>IfcSurfaceStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACESTYLELIGHTING]=d=>IfcSurfaceStyleLighting.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACESTYLEREFRACTION]=d=>IfcSurfaceStyleRefraction.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACESTYLERENDERING]=d=>IfcSurfaceStyleRendering.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACESTYLESHADING]=d=>IfcSurfaceStyleShading.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACESTYLEWITHTEXTURES]=d=>IfcSurfaceStyleWithTextures.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSURFACETEXTURE]=d=>IfcSurfaceTexture.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSWEPTAREASOLID]=d=>IfcSweptAreaSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSWEPTDISKSOLID]=d=>IfcSweptDiskSolid.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSWEPTDISKSOLIDPOLYGONAL]=d=>IfcSweptDiskSolidPolygonal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSWEPTSURFACE]=d=>IfcSweptSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSWITCHINGDEVICE]=d=>IfcSwitchingDevice.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSWITCHINGDEVICETYPE]=d=>IfcSwitchingDeviceType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSYSTEM]=d=>IfcSystem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSYSTEMFURNITUREELEMENT]=d=>IfcSystemFurnitureElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCSYSTEMFURNITUREELEMENTTYPE]=d=>IfcSystemFurnitureElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTSHAPEPROFILEDEF]=d=>IfcTShapeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTABLE]=d=>IfcTable.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTABLECOLUMN]=d=>IfcTableColumn.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTABLEROW]=d=>IfcTableRow.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTANK]=d=>IfcTank.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTANKTYPE]=d=>IfcTankType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTASK]=d=>IfcTask.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTASKTIME]=d=>IfcTaskTime.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTASKTIMERECURRING]=d=>IfcTaskTimeRecurring.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTASKTYPE]=d=>IfcTaskType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTELECOMADDRESS]=d=>IfcTelecomAddress.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTENDON]=d=>IfcTendon.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTENDONANCHOR]=d=>IfcTendonAnchor.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTENDONANCHORTYPE]=d=>IfcTendonAnchorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTENDONCONDUIT]=d=>IfcTendonConduit.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTENDONCONDUITTYPE]=d=>IfcTendonConduitType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTENDONTYPE]=d=>IfcTendonType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTESSELLATEDFACESET]=d=>IfcTessellatedFaceSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTESSELLATEDITEM]=d=>IfcTessellatedItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTLITERAL]=d=>IfcTextLiteral.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTLITERALWITHEXTENT]=d=>IfcTextLiteralWithExtent.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTSTYLE]=d=>IfcTextStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTSTYLEFONTMODEL]=d=>IfcTextStyleFontModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTSTYLEFORDEFINEDFONT]=d=>IfcTextStyleForDefinedFont.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTSTYLETEXTMODEL]=d=>IfcTextStyleTextModel.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTURECOORDINATE]=d=>IfcTextureCoordinate.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTURECOORDINATEGENERATOR]=d=>IfcTextureCoordinateGenerator.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTUREMAP]=d=>IfcTextureMap.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTUREVERTEX]=d=>IfcTextureVertex.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTEXTUREVERTEXLIST]=d=>IfcTextureVertexList.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTIMEPERIOD]=d=>IfcTimePeriod.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTIMESERIES]=d=>IfcTimeSeries.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTIMESERIESVALUE]=d=>IfcTimeSeriesValue.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTOPOLOGICALREPRESENTATIONITEM]=d=>IfcTopologicalRepresentationItem.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTOPOLOGYREPRESENTATION]=d=>IfcTopologyRepresentation.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTOROIDALSURFACE]=d=>IfcToroidalSurface.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRANSFORMER]=d=>IfcTransformer.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRANSFORMERTYPE]=d=>IfcTransformerType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRANSITIONCURVESEGMENT2D]=d=>IfcTransitionCurveSegment2D.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRANSPORTELEMENT]=d=>IfcTransportElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRANSPORTELEMENTTYPE]=d=>IfcTransportElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRAPEZIUMPROFILEDEF]=d=>IfcTrapeziumProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRIANGULATEDFACESET]=d=>IfcTriangulatedFaceSet.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRIANGULATEDIRREGULARNETWORK]=d=>IfcTriangulatedIrregularNetwork.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTRIMMEDCURVE]=d=>IfcTrimmedCurve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTUBEBUNDLE]=d=>IfcTubeBundle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTUBEBUNDLETYPE]=d=>IfcTubeBundleType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTYPEOBJECT]=d=>IfcTypeObject.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTYPEPROCESS]=d=>IfcTypeProcess.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTYPEPRODUCT]=d=>IfcTypeProduct.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCTYPERESOURCE]=d=>IfcTypeResource.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCUSHAPEPROFILEDEF]=d=>IfcUShapeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCUNITASSIGNMENT]=d=>IfcUnitAssignment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCUNITARYCONTROLELEMENT]=d=>IfcUnitaryControlElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCUNITARYCONTROLELEMENTTYPE]=d=>IfcUnitaryControlElementType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCUNITARYEQUIPMENT]=d=>IfcUnitaryEquipment.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCUNITARYEQUIPMENTTYPE]=d=>IfcUnitaryEquipmentType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVALVE]=d=>IfcValve.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVALVETYPE]=d=>IfcValveType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVECTOR]=d=>IfcVector.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVERTEX]=d=>IfcVertex.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVERTEXLOOP]=d=>IfcVertexLoop.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVERTEXPOINT]=d=>IfcVertexPoint.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVIBRATIONDAMPER]=d=>IfcVibrationDamper.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVIBRATIONDAMPERTYPE]=d=>IfcVibrationDamperType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVIBRATIONISOLATOR]=d=>IfcVibrationIsolator.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVIBRATIONISOLATORTYPE]=d=>IfcVibrationIsolatorType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVIRTUALELEMENT]=d=>IfcVirtualElement.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVIRTUALGRIDINTERSECTION]=d=>IfcVirtualGridIntersection.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCVOIDINGFEATURE]=d=>IfcVoidingFeature.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWALL]=d=>IfcWall.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWALLELEMENTEDCASE]=d=>IfcWallElementedCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWALLSTANDARDCASE]=d=>IfcWallStandardCase.FromTape(d.ID,d.type,d.arguments);FromRawLineData[IFCWALLTYPE]=d=>IfcWallType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWASTETERMINAL]=d=>IfcWasteTerminal.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWASTETERMINALTYPE]=d=>IfcWasteTerminalType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWINDOW]=d=>IfcWindow.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWINDOWLININGPROPERTIES]=d=>IfcWindowLiningProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWINDOWPANELPROPERTIES]=d=>IfcWindowPanelProperties.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWINDOWSTANDARDCASE]=d=>IfcWindowStandardCase.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWINDOWSTYLE]=d=>IfcWindowStyle.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWINDOWTYPE]=d=>IfcWindowType.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWORKCALENDAR]=d=>IfcWorkCalendar.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWORKCONTROL]=d=>IfcWorkControl.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWORKPLAN]=d=>IfcWorkPlan.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWORKSCHEDULE]=d=>IfcWorkSchedule.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCWORKTIME]=d=>IfcWorkTime.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCZSHAPEPROFILEDEF]=d=>IfcZShapeProfileDef.FromTape(d.ID,d.type,d.arguments),FromRawLineData[IFCZONE]=d=>IfcZone.FromTape(d.ID,d.type,d.arguments);var Handle=class{constructor(id){this.value=id}toTape(args){args.push({type:5,value:this.value})}};function Value(type,value){return{t:type,v:value}}var IfcAbsorbedDoseMeasure=class{constructor(v){this.value=v}},IfcAccelerationMeasure=class{constructor(v){this.value=v}},IfcAmountOfSubstanceMeasure=class{constructor(v){this.value=v}},IfcAngularVelocityMeasure=class{constructor(v){this.value=v}},IfcAreaDensityMeasure=class{constructor(v){this.value=v}},IfcAreaMeasure=class{constructor(v){this.value=v}},IfcBinary=class{constructor(v){this.value=v}},IfcBoolean=class{constructor(v){this.value=v}},IfcBoxAlignment=class{constructor(v){this.value=v}},IfcCardinalPointReference=class{constructor(v){this.value=v}},IfcContextDependentMeasure=class{constructor(v){this.value=v}},IfcCountMeasure=class{constructor(v){this.value=v}},IfcCurvatureMeasure=class{constructor(v){this.value=v}},IfcDate=class{constructor(v){this.value=v}},IfcDateTime=class{constructor(v){this.value=v}},IfcDayInMonthNumber=class{constructor(v){this.value=v}},IfcDayInWeekNumber=class{constructor(v){this.value=v}},IfcDescriptiveMeasure=class{constructor(v){this.value=v}},IfcDimensionCount=class{constructor(v){this.value=v}},IfcDoseEquivalentMeasure=class{constructor(v){this.value=v}},IfcDuration=class{constructor(v){this.value=v}},IfcDynamicViscosityMeasure=class{constructor(v){this.value=v}},IfcElectricCapacitanceMeasure=class{constructor(v){this.value=v}},IfcElectricChargeMeasure=class{constructor(v){this.value=v}},IfcElectricConductanceMeasure=class{constructor(v){this.value=v}},IfcElectricCurrentMeasure=class{constructor(v){this.value=v}},IfcElectricResistanceMeasure=class{constructor(v){this.value=v}},IfcElectricVoltageMeasure=class{constructor(v){this.value=v}},IfcEnergyMeasure=class{constructor(v){this.value=v}},IfcFontStyle=class{constructor(v){this.value=v}},IfcFontVariant=class{constructor(v){this.value=v}},IfcFontWeight=class{constructor(v){this.value=v}},IfcForceMeasure=class{constructor(v){this.value=v}},IfcFrequencyMeasure=class{constructor(v){this.value=v}},IfcGloballyUniqueId=class{constructor(v){this.value=v}},IfcHeatFluxDensityMeasure=class{constructor(v){this.value=v}},IfcHeatingValueMeasure=class{constructor(v){this.value=v}},IfcIdentifier=class{constructor(v){this.value=v}},IfcIlluminanceMeasure=class{constructor(v){this.value=v}},IfcInductanceMeasure=class{constructor(v){this.value=v}},IfcInteger=class{constructor(v){this.value=v}},IfcIntegerCountRateMeasure=class{constructor(v){this.value=v}},IfcIonConcentrationMeasure=class{constructor(v){this.value=v}},IfcIsothermalMoistureCapacityMeasure=class{constructor(v){this.value=v}},IfcKinematicViscosityMeasure=class{constructor(v){this.value=v}},IfcLabel=class{constructor(v){this.value=v}},IfcLanguageId=class{constructor(v){this.value=v}},IfcLengthMeasure=class{constructor(v){this.value=v}},IfcLinearForceMeasure=class{constructor(v){this.value=v}},IfcLinearMomentMeasure=class{constructor(v){this.value=v}},IfcLinearStiffnessMeasure=class{constructor(v){this.value=v}},IfcLinearVelocityMeasure=class{constructor(v){this.value=v}},IfcLogical=class{constructor(v){this.value=v}},IfcLuminousFluxMeasure=class{constructor(v){this.value=v}},IfcLuminousIntensityDistributionMeasure=class{constructor(v){this.value=v}},IfcLuminousIntensityMeasure=class{constructor(v){this.value=v}},IfcMagneticFluxDensityMeasure=class{constructor(v){this.value=v}},IfcMagneticFluxMeasure=class{constructor(v){this.value=v}},IfcMassDensityMeasure=class{constructor(v){this.value=v}},IfcMassFlowRateMeasure=class{constructor(v){this.value=v}},IfcMassMeasure=class{constructor(v){this.value=v}},IfcMassPerLengthMeasure=class{constructor(v){this.value=v}},IfcModulusOfElasticityMeasure=class{constructor(v){this.value=v}},IfcModulusOfLinearSubgradeReactionMeasure=class{constructor(v){this.value=v}},IfcModulusOfRotationalSubgradeReactionMeasure=class{constructor(v){this.value=v}},IfcModulusOfSubgradeReactionMeasure=class{constructor(v){this.value=v}},IfcMoistureDiffusivityMeasure=class{constructor(v){this.value=v}},IfcMolecularWeightMeasure=class{constructor(v){this.value=v}},IfcMomentOfInertiaMeasure=class{constructor(v){this.value=v}},IfcMonetaryMeasure=class{constructor(v){this.value=v}},IfcMonthInYearNumber=class{constructor(v){this.value=v}},IfcNonNegativeLengthMeasure=class{constructor(v){this.value=v}},IfcNormalisedRatioMeasure=class{constructor(v){this.value=v}},IfcNumericMeasure=class{constructor(v){this.value=v}},IfcPHMeasure=class{constructor(v){this.value=v}},IfcParameterValue=class{constructor(v){this.value=v}},IfcPlanarForceMeasure=class{constructor(v){this.value=v}},IfcPlaneAngleMeasure=class{constructor(v){this.value=v}},IfcPositiveInteger=class{constructor(v){this.value=v}},IfcPositiveLengthMeasure=class{constructor(v){this.value=v}},IfcPositivePlaneAngleMeasure=class{constructor(v){this.value=v}},IfcPositiveRatioMeasure=class{constructor(v){this.value=v}},IfcPowerMeasure=class{constructor(v){this.value=v}},IfcPresentableText=class{constructor(v){this.value=v}},IfcPressureMeasure=class{constructor(v){this.value=v}},IfcRadioActivityMeasure=class{constructor(v){this.value=v}},IfcRatioMeasure=class{constructor(v){this.value=v}},IfcReal=class{constructor(v){this.value=v}},IfcRotationalFrequencyMeasure=class{constructor(v){this.value=v}},IfcRotationalMassMeasure=class{constructor(v){this.value=v}},IfcRotationalStiffnessMeasure=class{constructor(v){this.value=v}},IfcSectionModulusMeasure=class{constructor(v){this.value=v}},IfcSectionalAreaIntegralMeasure=class{constructor(v){this.value=v}},IfcShearModulusMeasure=class{constructor(v){this.value=v}},IfcSolidAngleMeasure=class{constructor(v){this.value=v}},IfcSoundPowerLevelMeasure=class{constructor(v){this.value=v}},IfcSoundPowerMeasure=class{constructor(v){this.value=v}},IfcSoundPressureLevelMeasure=class{constructor(v){this.value=v}},IfcSoundPressureMeasure=class{constructor(v){this.value=v}},IfcSpecificHeatCapacityMeasure=class{constructor(v){this.value=v}},IfcSpecularExponent=class{constructor(v){this.value=v}},IfcSpecularRoughness=class{constructor(v){this.value=v}},IfcTemperatureGradientMeasure=class{constructor(v){this.value=v}},IfcTemperatureRateOfChangeMeasure=class{constructor(v){this.value=v}},IfcText=class{constructor(v){this.value=v}},IfcTextAlignment=class{constructor(v){this.value=v}},IfcTextDecoration=class{constructor(v){this.value=v}},IfcTextFontName=class{constructor(v){this.value=v}},IfcTextTransformation=class{constructor(v){this.value=v}},IfcThermalAdmittanceMeasure=class{constructor(v){this.value=v}},IfcThermalConductivityMeasure=class{constructor(v){this.value=v}},IfcThermalExpansionCoefficientMeasure=class{constructor(v){this.value=v}},IfcThermalResistanceMeasure=class{constructor(v){this.value=v}},IfcThermalTransmittanceMeasure=class{constructor(v){this.value=v}},IfcThermodynamicTemperatureMeasure=class{constructor(v){this.value=v}},IfcTime=class{constructor(v){this.value=v}},IfcTimeMeasure=class{constructor(v){this.value=v}},IfcTimeStamp=class{constructor(v){this.value=v}},IfcTorqueMeasure=class{constructor(v){this.value=v}},IfcURIReference=class{constructor(v){this.value=v}},IfcVaporPermeabilityMeasure=class{constructor(v){this.value=v}},IfcVolumeMeasure=class{constructor(v){this.value=v}},IfcVolumetricFlowRateMeasure=class{constructor(v){this.value=v}},IfcWarpingConstantMeasure=class{constructor(v){this.value=v}},IfcWarpingMomentMeasure=class{constructor(v){this.value=v}},IfcActionRequestTypeEnum=class{constructor(v){this.value=v}};IfcActionRequestTypeEnum.EMAIL="EMAIL",IfcActionRequestTypeEnum.FAX="FAX",IfcActionRequestTypeEnum.PHONE="PHONE",IfcActionRequestTypeEnum.POST="POST",IfcActionRequestTypeEnum.VERBAL="VERBAL",IfcActionRequestTypeEnum.USERDEFINED="USERDEFINED",IfcActionRequestTypeEnum.NOTDEFINED="NOTDEFINED";var IfcActionSourceTypeEnum=class{constructor(v){this.value=v}};IfcActionSourceTypeEnum.DEAD_LOAD_G="DEAD_LOAD_G",IfcActionSourceTypeEnum.COMPLETION_G1="COMPLETION_G1",IfcActionSourceTypeEnum.LIVE_LOAD_Q="LIVE_LOAD_Q",IfcActionSourceTypeEnum.SNOW_S="SNOW_S",IfcActionSourceTypeEnum.WIND_W="WIND_W",IfcActionSourceTypeEnum.PRESTRESSING_P="PRESTRESSING_P",IfcActionSourceTypeEnum.SETTLEMENT_U="SETTLEMENT_U",IfcActionSourceTypeEnum.TEMPERATURE_T="TEMPERATURE_T",IfcActionSourceTypeEnum.EARTHQUAKE_E="EARTHQUAKE_E",IfcActionSourceTypeEnum.FIRE="FIRE",IfcActionSourceTypeEnum.IMPULSE="IMPULSE",IfcActionSourceTypeEnum.IMPACT="IMPACT",IfcActionSourceTypeEnum.TRANSPORT="TRANSPORT",IfcActionSourceTypeEnum.ERECTION="ERECTION",IfcActionSourceTypeEnum.PROPPING="PROPPING",IfcActionSourceTypeEnum.SYSTEM_IMPERFECTION="SYSTEM_IMPERFECTION",IfcActionSourceTypeEnum.SHRINKAGE="SHRINKAGE",IfcActionSourceTypeEnum.CREEP="CREEP",IfcActionSourceTypeEnum.LACK_OF_FIT="LACK_OF_FIT",IfcActionSourceTypeEnum.BUOYANCY="BUOYANCY",IfcActionSourceTypeEnum.ICE="ICE",IfcActionSourceTypeEnum.CURRENT="CURRENT",IfcActionSourceTypeEnum.WAVE="WAVE",IfcActionSourceTypeEnum.RAIN="RAIN",IfcActionSourceTypeEnum.BRAKES="BRAKES",IfcActionSourceTypeEnum.USERDEFINED="USERDEFINED",IfcActionSourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcActionTypeEnum=class{constructor(v){this.value=v}};IfcActionTypeEnum.PERMANENT_G="PERMANENT_G",IfcActionTypeEnum.VARIABLE_Q="VARIABLE_Q",IfcActionTypeEnum.EXTRAORDINARY_A="EXTRAORDINARY_A",IfcActionTypeEnum.USERDEFINED="USERDEFINED",IfcActionTypeEnum.NOTDEFINED="NOTDEFINED";var IfcActuatorTypeEnum=class{constructor(v){this.value=v}};IfcActuatorTypeEnum.ELECTRICACTUATOR="ELECTRICACTUATOR",IfcActuatorTypeEnum.HANDOPERATEDACTUATOR="HANDOPERATEDACTUATOR",IfcActuatorTypeEnum.HYDRAULICACTUATOR="HYDRAULICACTUATOR",IfcActuatorTypeEnum.PNEUMATICACTUATOR="PNEUMATICACTUATOR",IfcActuatorTypeEnum.THERMOSTATICACTUATOR="THERMOSTATICACTUATOR",IfcActuatorTypeEnum.USERDEFINED="USERDEFINED",IfcActuatorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAddressTypeEnum=class{constructor(v){this.value=v}};IfcAddressTypeEnum.OFFICE="OFFICE",IfcAddressTypeEnum.SITE="SITE",IfcAddressTypeEnum.HOME="HOME",IfcAddressTypeEnum.DISTRIBUTIONPOINT="DISTRIBUTIONPOINT",IfcAddressTypeEnum.USERDEFINED="USERDEFINED";var IfcAirTerminalBoxTypeEnum=class{constructor(v){this.value=v}};IfcAirTerminalBoxTypeEnum.CONSTANTFLOW="CONSTANTFLOW",IfcAirTerminalBoxTypeEnum.VARIABLEFLOWPRESSUREDEPENDANT="VARIABLEFLOWPRESSUREDEPENDANT",IfcAirTerminalBoxTypeEnum.VARIABLEFLOWPRESSUREINDEPENDANT="VARIABLEFLOWPRESSUREINDEPENDANT",IfcAirTerminalBoxTypeEnum.USERDEFINED="USERDEFINED",IfcAirTerminalBoxTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAirTerminalTypeEnum=class{constructor(v){this.value=v}};IfcAirTerminalTypeEnum.DIFFUSER="DIFFUSER",IfcAirTerminalTypeEnum.GRILLE="GRILLE",IfcAirTerminalTypeEnum.LOUVRE="LOUVRE",IfcAirTerminalTypeEnum.REGISTER="REGISTER",IfcAirTerminalTypeEnum.USERDEFINED="USERDEFINED",IfcAirTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAirToAirHeatRecoveryTypeEnum=class{constructor(v){this.value=v}};IfcAirToAirHeatRecoveryTypeEnum.FIXEDPLATECOUNTERFLOWEXCHANGER="FIXEDPLATECOUNTERFLOWEXCHANGER",IfcAirToAirHeatRecoveryTypeEnum.FIXEDPLATECROSSFLOWEXCHANGER="FIXEDPLATECROSSFLOWEXCHANGER",IfcAirToAirHeatRecoveryTypeEnum.FIXEDPLATEPARALLELFLOWEXCHANGER="FIXEDPLATEPARALLELFLOWEXCHANGER",IfcAirToAirHeatRecoveryTypeEnum.ROTARYWHEEL="ROTARYWHEEL",IfcAirToAirHeatRecoveryTypeEnum.RUNAROUNDCOILLOOP="RUNAROUNDCOILLOOP",IfcAirToAirHeatRecoveryTypeEnum.HEATPIPE="HEATPIPE",IfcAirToAirHeatRecoveryTypeEnum.TWINTOWERENTHALPYRECOVERYLOOPS="TWINTOWERENTHALPYRECOVERYLOOPS",IfcAirToAirHeatRecoveryTypeEnum.THERMOSIPHONSEALEDTUBEHEATEXCHANGERS="THERMOSIPHONSEALEDTUBEHEATEXCHANGERS",IfcAirToAirHeatRecoveryTypeEnum.THERMOSIPHONCOILTYPEHEATEXCHANGERS="THERMOSIPHONCOILTYPEHEATEXCHANGERS",IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED="USERDEFINED",IfcAirToAirHeatRecoveryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAlarmTypeEnum=class{constructor(v){this.value=v}};IfcAlarmTypeEnum.BELL="BELL",IfcAlarmTypeEnum.BREAKGLASSBUTTON="BREAKGLASSBUTTON",IfcAlarmTypeEnum.LIGHT="LIGHT",IfcAlarmTypeEnum.MANUALPULLBOX="MANUALPULLBOX",IfcAlarmTypeEnum.SIREN="SIREN",IfcAlarmTypeEnum.WHISTLE="WHISTLE",IfcAlarmTypeEnum.USERDEFINED="USERDEFINED",IfcAlarmTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAlignmentTypeEnum=class{constructor(v){this.value=v}};IfcAlignmentTypeEnum.USERDEFINED="USERDEFINED",IfcAlignmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAnalysisModelTypeEnum=class{constructor(v){this.value=v}};IfcAnalysisModelTypeEnum.IN_PLANE_LOADING_2D="IN_PLANE_LOADING_2D",IfcAnalysisModelTypeEnum.OUT_PLANE_LOADING_2D="OUT_PLANE_LOADING_2D",IfcAnalysisModelTypeEnum.LOADING_3D="LOADING_3D",IfcAnalysisModelTypeEnum.USERDEFINED="USERDEFINED",IfcAnalysisModelTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAnalysisTheoryTypeEnum=class{constructor(v){this.value=v}};IfcAnalysisTheoryTypeEnum.FIRST_ORDER_THEORY="FIRST_ORDER_THEORY",IfcAnalysisTheoryTypeEnum.SECOND_ORDER_THEORY="SECOND_ORDER_THEORY",IfcAnalysisTheoryTypeEnum.THIRD_ORDER_THEORY="THIRD_ORDER_THEORY",IfcAnalysisTheoryTypeEnum.FULL_NONLINEAR_THEORY="FULL_NONLINEAR_THEORY",IfcAnalysisTheoryTypeEnum.USERDEFINED="USERDEFINED",IfcAnalysisTheoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcArithmeticOperatorEnum=class{constructor(v){this.value=v}};IfcArithmeticOperatorEnum.ADD="ADD",IfcArithmeticOperatorEnum.DIVIDE="DIVIDE",IfcArithmeticOperatorEnum.MULTIPLY="MULTIPLY",IfcArithmeticOperatorEnum.SUBTRACT="SUBTRACT";var IfcAssemblyPlaceEnum=class{constructor(v){this.value=v}};IfcAssemblyPlaceEnum.SITE="SITE",IfcAssemblyPlaceEnum.FACTORY="FACTORY",IfcAssemblyPlaceEnum.NOTDEFINED="NOTDEFINED";var IfcAudioVisualApplianceTypeEnum=class{constructor(v){this.value=v}};IfcAudioVisualApplianceTypeEnum.AMPLIFIER="AMPLIFIER",IfcAudioVisualApplianceTypeEnum.CAMERA="CAMERA",IfcAudioVisualApplianceTypeEnum.DISPLAY="DISPLAY",IfcAudioVisualApplianceTypeEnum.MICROPHONE="MICROPHONE",IfcAudioVisualApplianceTypeEnum.PLAYER="PLAYER",IfcAudioVisualApplianceTypeEnum.PROJECTOR="PROJECTOR",IfcAudioVisualApplianceTypeEnum.RECEIVER="RECEIVER",IfcAudioVisualApplianceTypeEnum.SPEAKER="SPEAKER",IfcAudioVisualApplianceTypeEnum.SWITCHER="SWITCHER",IfcAudioVisualApplianceTypeEnum.TELEPHONE="TELEPHONE",IfcAudioVisualApplianceTypeEnum.TUNER="TUNER",IfcAudioVisualApplianceTypeEnum.USERDEFINED="USERDEFINED",IfcAudioVisualApplianceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBSplineCurveForm=class{constructor(v){this.value=v}};IfcBSplineCurveForm.POLYLINE_FORM="POLYLINE_FORM",IfcBSplineCurveForm.CIRCULAR_ARC="CIRCULAR_ARC",IfcBSplineCurveForm.ELLIPTIC_ARC="ELLIPTIC_ARC",IfcBSplineCurveForm.PARABOLIC_ARC="PARABOLIC_ARC",IfcBSplineCurveForm.HYPERBOLIC_ARC="HYPERBOLIC_ARC",IfcBSplineCurveForm.UNSPECIFIED="UNSPECIFIED";var IfcBSplineSurfaceForm=class{constructor(v){this.value=v}};IfcBSplineSurfaceForm.PLANE_SURF="PLANE_SURF",IfcBSplineSurfaceForm.CYLINDRICAL_SURF="CYLINDRICAL_SURF",IfcBSplineSurfaceForm.CONICAL_SURF="CONICAL_SURF",IfcBSplineSurfaceForm.SPHERICAL_SURF="SPHERICAL_SURF",IfcBSplineSurfaceForm.TOROIDAL_SURF="TOROIDAL_SURF",IfcBSplineSurfaceForm.SURF_OF_REVOLUTION="SURF_OF_REVOLUTION",IfcBSplineSurfaceForm.RULED_SURF="RULED_SURF",IfcBSplineSurfaceForm.GENERALISED_CONE="GENERALISED_CONE",IfcBSplineSurfaceForm.QUADRIC_SURF="QUADRIC_SURF",IfcBSplineSurfaceForm.SURF_OF_LINEAR_EXTRUSION="SURF_OF_LINEAR_EXTRUSION",IfcBSplineSurfaceForm.UNSPECIFIED="UNSPECIFIED";var IfcBeamTypeEnum=class{constructor(v){this.value=v}};IfcBeamTypeEnum.BEAM="BEAM",IfcBeamTypeEnum.JOIST="JOIST",IfcBeamTypeEnum.HOLLOWCORE="HOLLOWCORE",IfcBeamTypeEnum.LINTEL="LINTEL",IfcBeamTypeEnum.SPANDREL="SPANDREL",IfcBeamTypeEnum.T_BEAM="T_BEAM",IfcBeamTypeEnum.GIRDER_SEGMENT="GIRDER_SEGMENT",IfcBeamTypeEnum.DIAPHRAGM="DIAPHRAGM",IfcBeamTypeEnum.PIERCAP="PIERCAP",IfcBeamTypeEnum.HATSTONE="HATSTONE",IfcBeamTypeEnum.CORNICE="CORNICE",IfcBeamTypeEnum.EDGEBEAM="EDGEBEAM",IfcBeamTypeEnum.USERDEFINED="USERDEFINED",IfcBeamTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBearingTypeDisplacementEnum=class{constructor(v){this.value=v}};IfcBearingTypeDisplacementEnum.FIXED_MOVEMENT="FIXED_MOVEMENT",IfcBearingTypeDisplacementEnum.GUIDED_LONGITUDINAL="GUIDED_LONGITUDINAL",IfcBearingTypeDisplacementEnum.GUIDED_TRANSVERSAL="GUIDED_TRANSVERSAL",IfcBearingTypeDisplacementEnum.FREE_MOVEMENT="FREE_MOVEMENT",IfcBearingTypeDisplacementEnum.NOTDEFINED="NOTDEFINED";var IfcBearingTypeEnum=class{constructor(v){this.value=v}};IfcBearingTypeEnum.CYLINDRICAL="CYLINDRICAL",IfcBearingTypeEnum.SPHERICAL="SPHERICAL",IfcBearingTypeEnum.ELASTOMERIC="ELASTOMERIC",IfcBearingTypeEnum.POT="POT",IfcBearingTypeEnum.GUIDE="GUIDE",IfcBearingTypeEnum.ROCKER="ROCKER",IfcBearingTypeEnum.ROLLER="ROLLER",IfcBearingTypeEnum.DISK="DISK",IfcBearingTypeEnum.USERDEFINED="USERDEFINED",IfcBearingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBenchmarkEnum=class{constructor(v){this.value=v}};IfcBenchmarkEnum.GREATERTHAN="GREATERTHAN",IfcBenchmarkEnum.GREATERTHANOREQUALTO="GREATERTHANOREQUALTO",IfcBenchmarkEnum.LESSTHAN="LESSTHAN",IfcBenchmarkEnum.LESSTHANOREQUALTO="LESSTHANOREQUALTO",IfcBenchmarkEnum.EQUALTO="EQUALTO",IfcBenchmarkEnum.NOTEQUALTO="NOTEQUALTO",IfcBenchmarkEnum.INCLUDES="INCLUDES",IfcBenchmarkEnum.NOTINCLUDES="NOTINCLUDES",IfcBenchmarkEnum.INCLUDEDIN="INCLUDEDIN",IfcBenchmarkEnum.NOTINCLUDEDIN="NOTINCLUDEDIN";var IfcBoilerTypeEnum=class{constructor(v){this.value=v}};IfcBoilerTypeEnum.WATER="WATER",IfcBoilerTypeEnum.STEAM="STEAM",IfcBoilerTypeEnum.USERDEFINED="USERDEFINED",IfcBoilerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBooleanOperator=class{constructor(v){this.value=v}};IfcBooleanOperator.UNION="UNION",IfcBooleanOperator.INTERSECTION="INTERSECTION",IfcBooleanOperator.DIFFERENCE="DIFFERENCE";var IfcBridgePartTypeEnum=class{constructor(v){this.value=v}};IfcBridgePartTypeEnum.ABUTMENT="ABUTMENT",IfcBridgePartTypeEnum.DECK="DECK",IfcBridgePartTypeEnum.DECK_SEGMENT="DECK_SEGMENT",IfcBridgePartTypeEnum.FOUNDATION="FOUNDATION",IfcBridgePartTypeEnum.PIER="PIER",IfcBridgePartTypeEnum.PIER_SEGMENT="PIER_SEGMENT",IfcBridgePartTypeEnum.PYLON="PYLON",IfcBridgePartTypeEnum.SUBSTRUCTURE="SUBSTRUCTURE",IfcBridgePartTypeEnum.SUPERSTRUCTURE="SUPERSTRUCTURE",IfcBridgePartTypeEnum.SURFACESTRUCTURE="SURFACESTRUCTURE",IfcBridgePartTypeEnum.USERDEFINED="USERDEFINED",IfcBridgePartTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBridgeTypeEnum=class{constructor(v){this.value=v}};IfcBridgeTypeEnum.ARCHED="ARCHED",IfcBridgeTypeEnum.CABLE_STAYED="CABLE_STAYED",IfcBridgeTypeEnum.CANTILEVER="CANTILEVER",IfcBridgeTypeEnum.CULVERT="CULVERT",IfcBridgeTypeEnum.FRAMEWORK="FRAMEWORK",IfcBridgeTypeEnum.GIRDER="GIRDER",IfcBridgeTypeEnum.SUSPENSION="SUSPENSION",IfcBridgeTypeEnum.TRUSS="TRUSS",IfcBridgeTypeEnum.USERDEFINED="USERDEFINED",IfcBridgeTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBuildingElementPartTypeEnum=class{constructor(v){this.value=v}};IfcBuildingElementPartTypeEnum.INSULATION="INSULATION",IfcBuildingElementPartTypeEnum.PRECASTPANEL="PRECASTPANEL",IfcBuildingElementPartTypeEnum.APRON="APRON",IfcBuildingElementPartTypeEnum.USERDEFINED="USERDEFINED",IfcBuildingElementPartTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBuildingElementProxyTypeEnum=class{constructor(v){this.value=v}};IfcBuildingElementProxyTypeEnum.COMPLEX="COMPLEX",IfcBuildingElementProxyTypeEnum.ELEMENT="ELEMENT",IfcBuildingElementProxyTypeEnum.PARTIAL="PARTIAL",IfcBuildingElementProxyTypeEnum.PROVISIONFORVOID="PROVISIONFORVOID",IfcBuildingElementProxyTypeEnum.PROVISIONFORSPACE="PROVISIONFORSPACE",IfcBuildingElementProxyTypeEnum.USERDEFINED="USERDEFINED",IfcBuildingElementProxyTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBuildingSystemTypeEnum=class{constructor(v){this.value=v}};IfcBuildingSystemTypeEnum.FENESTRATION="FENESTRATION",IfcBuildingSystemTypeEnum.FOUNDATION="FOUNDATION",IfcBuildingSystemTypeEnum.LOADBEARING="LOADBEARING",IfcBuildingSystemTypeEnum.OUTERSHELL="OUTERSHELL",IfcBuildingSystemTypeEnum.SHADING="SHADING",IfcBuildingSystemTypeEnum.TRANSPORT="TRANSPORT",IfcBuildingSystemTypeEnum.REINFORCING="REINFORCING",IfcBuildingSystemTypeEnum.PRESTRESSING="PRESTRESSING",IfcBuildingSystemTypeEnum.USERDEFINED="USERDEFINED",IfcBuildingSystemTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBurnerTypeEnum=class{constructor(v){this.value=v}};IfcBurnerTypeEnum.USERDEFINED="USERDEFINED",IfcBurnerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableCarrierFittingTypeEnum=class{constructor(v){this.value=v}};IfcCableCarrierFittingTypeEnum.BEND="BEND",IfcCableCarrierFittingTypeEnum.CROSS="CROSS",IfcCableCarrierFittingTypeEnum.REDUCER="REDUCER",IfcCableCarrierFittingTypeEnum.TEE="TEE",IfcCableCarrierFittingTypeEnum.USERDEFINED="USERDEFINED",IfcCableCarrierFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableCarrierSegmentTypeEnum=class{constructor(v){this.value=v}};IfcCableCarrierSegmentTypeEnum.CABLELADDERSEGMENT="CABLELADDERSEGMENT",IfcCableCarrierSegmentTypeEnum.CABLETRAYSEGMENT="CABLETRAYSEGMENT",IfcCableCarrierSegmentTypeEnum.CABLETRUNKINGSEGMENT="CABLETRUNKINGSEGMENT",IfcCableCarrierSegmentTypeEnum.CONDUITSEGMENT="CONDUITSEGMENT",IfcCableCarrierSegmentTypeEnum.USERDEFINED="USERDEFINED",IfcCableCarrierSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableFittingTypeEnum=class{constructor(v){this.value=v}};IfcCableFittingTypeEnum.CONNECTOR="CONNECTOR",IfcCableFittingTypeEnum.ENTRY="ENTRY",IfcCableFittingTypeEnum.EXIT="EXIT",IfcCableFittingTypeEnum.JUNCTION="JUNCTION",IfcCableFittingTypeEnum.TRANSITION="TRANSITION",IfcCableFittingTypeEnum.USERDEFINED="USERDEFINED",IfcCableFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableSegmentTypeEnum=class{constructor(v){this.value=v}};IfcCableSegmentTypeEnum.BUSBARSEGMENT="BUSBARSEGMENT",IfcCableSegmentTypeEnum.CABLESEGMENT="CABLESEGMENT",IfcCableSegmentTypeEnum.CONDUCTORSEGMENT="CONDUCTORSEGMENT",IfcCableSegmentTypeEnum.CORESEGMENT="CORESEGMENT",IfcCableSegmentTypeEnum.USERDEFINED="USERDEFINED",IfcCableSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCaissonFoundationTypeEnum=class{constructor(v){this.value=v}};IfcCaissonFoundationTypeEnum.WELL="WELL",IfcCaissonFoundationTypeEnum.CAISSON="CAISSON",IfcCaissonFoundationTypeEnum.USERDEFINED="USERDEFINED",IfcCaissonFoundationTypeEnum.NOTDEFINED="NOTDEFINED";var IfcChangeActionEnum=class{constructor(v){this.value=v}};IfcChangeActionEnum.NOCHANGE="NOCHANGE",IfcChangeActionEnum.MODIFIED="MODIFIED",IfcChangeActionEnum.ADDED="ADDED",IfcChangeActionEnum.DELETED="DELETED",IfcChangeActionEnum.NOTDEFINED="NOTDEFINED";var IfcChillerTypeEnum=class{constructor(v){this.value=v}};IfcChillerTypeEnum.AIRCOOLED="AIRCOOLED",IfcChillerTypeEnum.WATERCOOLED="WATERCOOLED",IfcChillerTypeEnum.HEATRECOVERY="HEATRECOVERY",IfcChillerTypeEnum.USERDEFINED="USERDEFINED",IfcChillerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcChimneyTypeEnum=class{constructor(v){this.value=v}};IfcChimneyTypeEnum.USERDEFINED="USERDEFINED",IfcChimneyTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCoilTypeEnum=class{constructor(v){this.value=v}};IfcCoilTypeEnum.DXCOOLINGCOIL="DXCOOLINGCOIL",IfcCoilTypeEnum.ELECTRICHEATINGCOIL="ELECTRICHEATINGCOIL",IfcCoilTypeEnum.GASHEATINGCOIL="GASHEATINGCOIL",IfcCoilTypeEnum.HYDRONICCOIL="HYDRONICCOIL",IfcCoilTypeEnum.STEAMHEATINGCOIL="STEAMHEATINGCOIL",IfcCoilTypeEnum.WATERCOOLINGCOIL="WATERCOOLINGCOIL",IfcCoilTypeEnum.WATERHEATINGCOIL="WATERHEATINGCOIL",IfcCoilTypeEnum.USERDEFINED="USERDEFINED",IfcCoilTypeEnum.NOTDEFINED="NOTDEFINED";var IfcColumnTypeEnum=class{constructor(v){this.value=v}};IfcColumnTypeEnum.COLUMN="COLUMN",IfcColumnTypeEnum.PILASTER="PILASTER",IfcColumnTypeEnum.PIERSTEM="PIERSTEM",IfcColumnTypeEnum.PIERSTEM_SEGMENT="PIERSTEM_SEGMENT",IfcColumnTypeEnum.STANDCOLUMN="STANDCOLUMN",IfcColumnTypeEnum.USERDEFINED="USERDEFINED",IfcColumnTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCommunicationsApplianceTypeEnum=class{constructor(v){this.value=v}};IfcCommunicationsApplianceTypeEnum.ANTENNA="ANTENNA",IfcCommunicationsApplianceTypeEnum.COMPUTER="COMPUTER",IfcCommunicationsApplianceTypeEnum.FAX="FAX",IfcCommunicationsApplianceTypeEnum.GATEWAY="GATEWAY",IfcCommunicationsApplianceTypeEnum.MODEM="MODEM",IfcCommunicationsApplianceTypeEnum.NETWORKAPPLIANCE="NETWORKAPPLIANCE",IfcCommunicationsApplianceTypeEnum.NETWORKBRIDGE="NETWORKBRIDGE",IfcCommunicationsApplianceTypeEnum.NETWORKHUB="NETWORKHUB",IfcCommunicationsApplianceTypeEnum.PRINTER="PRINTER",IfcCommunicationsApplianceTypeEnum.REPEATER="REPEATER",IfcCommunicationsApplianceTypeEnum.ROUTER="ROUTER",IfcCommunicationsApplianceTypeEnum.SCANNER="SCANNER",IfcCommunicationsApplianceTypeEnum.USERDEFINED="USERDEFINED",IfcCommunicationsApplianceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcComplexPropertyTemplateTypeEnum=class{constructor(v){this.value=v}};IfcComplexPropertyTemplateTypeEnum.P_COMPLEX="P_COMPLEX",IfcComplexPropertyTemplateTypeEnum.Q_COMPLEX="Q_COMPLEX";var IfcCompressorTypeEnum=class{constructor(v){this.value=v}};IfcCompressorTypeEnum.DYNAMIC="DYNAMIC",IfcCompressorTypeEnum.RECIPROCATING="RECIPROCATING",IfcCompressorTypeEnum.ROTARY="ROTARY",IfcCompressorTypeEnum.SCROLL="SCROLL",IfcCompressorTypeEnum.TROCHOIDAL="TROCHOIDAL",IfcCompressorTypeEnum.SINGLESTAGE="SINGLESTAGE",IfcCompressorTypeEnum.BOOSTER="BOOSTER",IfcCompressorTypeEnum.OPENTYPE="OPENTYPE",IfcCompressorTypeEnum.HERMETIC="HERMETIC",IfcCompressorTypeEnum.SEMIHERMETIC="SEMIHERMETIC",IfcCompressorTypeEnum.WELDEDSHELLHERMETIC="WELDEDSHELLHERMETIC",IfcCompressorTypeEnum.ROLLINGPISTON="ROLLINGPISTON",IfcCompressorTypeEnum.ROTARYVANE="ROTARYVANE",IfcCompressorTypeEnum.SINGLESCREW="SINGLESCREW",IfcCompressorTypeEnum.TWINSCREW="TWINSCREW",IfcCompressorTypeEnum.USERDEFINED="USERDEFINED",IfcCompressorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCondenserTypeEnum=class{constructor(v){this.value=v}};IfcCondenserTypeEnum.AIRCOOLED="AIRCOOLED",IfcCondenserTypeEnum.EVAPORATIVECOOLED="EVAPORATIVECOOLED",IfcCondenserTypeEnum.WATERCOOLED="WATERCOOLED",IfcCondenserTypeEnum.WATERCOOLEDBRAZEDPLATE="WATERCOOLEDBRAZEDPLATE",IfcCondenserTypeEnum.WATERCOOLEDSHELLCOIL="WATERCOOLEDSHELLCOIL",IfcCondenserTypeEnum.WATERCOOLEDSHELLTUBE="WATERCOOLEDSHELLTUBE",IfcCondenserTypeEnum.WATERCOOLEDTUBEINTUBE="WATERCOOLEDTUBEINTUBE",IfcCondenserTypeEnum.USERDEFINED="USERDEFINED",IfcCondenserTypeEnum.NOTDEFINED="NOTDEFINED";var IfcConnectionTypeEnum=class{constructor(v){this.value=v}};IfcConnectionTypeEnum.ATPATH="ATPATH",IfcConnectionTypeEnum.ATSTART="ATSTART",IfcConnectionTypeEnum.ATEND="ATEND",IfcConnectionTypeEnum.NOTDEFINED="NOTDEFINED";var IfcConstraintEnum=class{constructor(v){this.value=v}};IfcConstraintEnum.HARD="HARD",IfcConstraintEnum.SOFT="SOFT",IfcConstraintEnum.ADVISORY="ADVISORY",IfcConstraintEnum.USERDEFINED="USERDEFINED",IfcConstraintEnum.NOTDEFINED="NOTDEFINED";var IfcConstructionEquipmentResourceTypeEnum=class{constructor(v){this.value=v}};IfcConstructionEquipmentResourceTypeEnum.DEMOLISHING="DEMOLISHING",IfcConstructionEquipmentResourceTypeEnum.EARTHMOVING="EARTHMOVING",IfcConstructionEquipmentResourceTypeEnum.ERECTING="ERECTING",IfcConstructionEquipmentResourceTypeEnum.HEATING="HEATING",IfcConstructionEquipmentResourceTypeEnum.LIGHTING="LIGHTING",IfcConstructionEquipmentResourceTypeEnum.PAVING="PAVING",IfcConstructionEquipmentResourceTypeEnum.PUMPING="PUMPING",IfcConstructionEquipmentResourceTypeEnum.TRANSPORTING="TRANSPORTING",IfcConstructionEquipmentResourceTypeEnum.USERDEFINED="USERDEFINED",IfcConstructionEquipmentResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcConstructionMaterialResourceTypeEnum=class{constructor(v){this.value=v}};IfcConstructionMaterialResourceTypeEnum.AGGREGATES="AGGREGATES",IfcConstructionMaterialResourceTypeEnum.CONCRETE="CONCRETE",IfcConstructionMaterialResourceTypeEnum.DRYWALL="DRYWALL",IfcConstructionMaterialResourceTypeEnum.FUEL="FUEL",IfcConstructionMaterialResourceTypeEnum.GYPSUM="GYPSUM",IfcConstructionMaterialResourceTypeEnum.MASONRY="MASONRY",IfcConstructionMaterialResourceTypeEnum.METAL="METAL",IfcConstructionMaterialResourceTypeEnum.PLASTIC="PLASTIC",IfcConstructionMaterialResourceTypeEnum.WOOD="WOOD",IfcConstructionMaterialResourceTypeEnum.NOTDEFINED="NOTDEFINED",IfcConstructionMaterialResourceTypeEnum.USERDEFINED="USERDEFINED";var IfcConstructionProductResourceTypeEnum=class{constructor(v){this.value=v}};IfcConstructionProductResourceTypeEnum.ASSEMBLY="ASSEMBLY",IfcConstructionProductResourceTypeEnum.FORMWORK="FORMWORK",IfcConstructionProductResourceTypeEnum.USERDEFINED="USERDEFINED",IfcConstructionProductResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcControllerTypeEnum=class{constructor(v){this.value=v}};IfcControllerTypeEnum.FLOATING="FLOATING",IfcControllerTypeEnum.PROGRAMMABLE="PROGRAMMABLE",IfcControllerTypeEnum.PROPORTIONAL="PROPORTIONAL",IfcControllerTypeEnum.MULTIPOSITION="MULTIPOSITION",IfcControllerTypeEnum.TWOPOSITION="TWOPOSITION",IfcControllerTypeEnum.USERDEFINED="USERDEFINED",IfcControllerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCooledBeamTypeEnum=class{constructor(v){this.value=v}};IfcCooledBeamTypeEnum.ACTIVE="ACTIVE",IfcCooledBeamTypeEnum.PASSIVE="PASSIVE",IfcCooledBeamTypeEnum.USERDEFINED="USERDEFINED",IfcCooledBeamTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCoolingTowerTypeEnum=class{constructor(v){this.value=v}};IfcCoolingTowerTypeEnum.NATURALDRAFT="NATURALDRAFT",IfcCoolingTowerTypeEnum.MECHANICALINDUCEDDRAFT="MECHANICALINDUCEDDRAFT",IfcCoolingTowerTypeEnum.MECHANICALFORCEDDRAFT="MECHANICALFORCEDDRAFT",IfcCoolingTowerTypeEnum.USERDEFINED="USERDEFINED",IfcCoolingTowerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCostItemTypeEnum=class{constructor(v){this.value=v}};IfcCostItemTypeEnum.USERDEFINED="USERDEFINED",IfcCostItemTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCostScheduleTypeEnum=class{constructor(v){this.value=v}};IfcCostScheduleTypeEnum.BUDGET="BUDGET",IfcCostScheduleTypeEnum.COSTPLAN="COSTPLAN",IfcCostScheduleTypeEnum.ESTIMATE="ESTIMATE",IfcCostScheduleTypeEnum.TENDER="TENDER",IfcCostScheduleTypeEnum.PRICEDBILLOFQUANTITIES="PRICEDBILLOFQUANTITIES",IfcCostScheduleTypeEnum.UNPRICEDBILLOFQUANTITIES="UNPRICEDBILLOFQUANTITIES",IfcCostScheduleTypeEnum.SCHEDULEOFRATES="SCHEDULEOFRATES",IfcCostScheduleTypeEnum.USERDEFINED="USERDEFINED",IfcCostScheduleTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCoveringTypeEnum=class{constructor(v){this.value=v}};IfcCoveringTypeEnum.CEILING="CEILING",IfcCoveringTypeEnum.FLOORING="FLOORING",IfcCoveringTypeEnum.CLADDING="CLADDING",IfcCoveringTypeEnum.ROOFING="ROOFING",IfcCoveringTypeEnum.MOLDING="MOLDING",IfcCoveringTypeEnum.SKIRTINGBOARD="SKIRTINGBOARD",IfcCoveringTypeEnum.INSULATION="INSULATION",IfcCoveringTypeEnum.MEMBRANE="MEMBRANE",IfcCoveringTypeEnum.SLEEVING="SLEEVING",IfcCoveringTypeEnum.WRAPPING="WRAPPING",IfcCoveringTypeEnum.COPING="COPING",IfcCoveringTypeEnum.USERDEFINED="USERDEFINED",IfcCoveringTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCrewResourceTypeEnum=class{constructor(v){this.value=v}};IfcCrewResourceTypeEnum.OFFICE="OFFICE",IfcCrewResourceTypeEnum.SITE="SITE",IfcCrewResourceTypeEnum.USERDEFINED="USERDEFINED",IfcCrewResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCurtainWallTypeEnum=class{constructor(v){this.value=v}};IfcCurtainWallTypeEnum.USERDEFINED="USERDEFINED",IfcCurtainWallTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCurveInterpolationEnum=class{constructor(v){this.value=v}};IfcCurveInterpolationEnum.LINEAR="LINEAR",IfcCurveInterpolationEnum.LOG_LINEAR="LOG_LINEAR",IfcCurveInterpolationEnum.LOG_LOG="LOG_LOG",IfcCurveInterpolationEnum.NOTDEFINED="NOTDEFINED";var IfcDamperTypeEnum=class{constructor(v){this.value=v}};IfcDamperTypeEnum.BACKDRAFTDAMPER="BACKDRAFTDAMPER",IfcDamperTypeEnum.BALANCINGDAMPER="BALANCINGDAMPER",IfcDamperTypeEnum.BLASTDAMPER="BLASTDAMPER",IfcDamperTypeEnum.CONTROLDAMPER="CONTROLDAMPER",IfcDamperTypeEnum.FIREDAMPER="FIREDAMPER",IfcDamperTypeEnum.FIRESMOKEDAMPER="FIRESMOKEDAMPER",IfcDamperTypeEnum.FUMEHOODEXHAUST="FUMEHOODEXHAUST",IfcDamperTypeEnum.GRAVITYDAMPER="GRAVITYDAMPER",IfcDamperTypeEnum.GRAVITYRELIEFDAMPER="GRAVITYRELIEFDAMPER",IfcDamperTypeEnum.RELIEFDAMPER="RELIEFDAMPER",IfcDamperTypeEnum.SMOKEDAMPER="SMOKEDAMPER",IfcDamperTypeEnum.USERDEFINED="USERDEFINED",IfcDamperTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDataOriginEnum=class{constructor(v){this.value=v}};IfcDataOriginEnum.MEASURED="MEASURED",IfcDataOriginEnum.PREDICTED="PREDICTED",IfcDataOriginEnum.SIMULATED="SIMULATED",IfcDataOriginEnum.USERDEFINED="USERDEFINED",IfcDataOriginEnum.NOTDEFINED="NOTDEFINED";var IfcDerivedUnitEnum=class{constructor(v){this.value=v}};IfcDerivedUnitEnum.ANGULARVELOCITYUNIT="ANGULARVELOCITYUNIT",IfcDerivedUnitEnum.AREADENSITYUNIT="AREADENSITYUNIT",IfcDerivedUnitEnum.COMPOUNDPLANEANGLEUNIT="COMPOUNDPLANEANGLEUNIT",IfcDerivedUnitEnum.DYNAMICVISCOSITYUNIT="DYNAMICVISCOSITYUNIT",IfcDerivedUnitEnum.HEATFLUXDENSITYUNIT="HEATFLUXDENSITYUNIT",IfcDerivedUnitEnum.INTEGERCOUNTRATEUNIT="INTEGERCOUNTRATEUNIT",IfcDerivedUnitEnum.ISOTHERMALMOISTURECAPACITYUNIT="ISOTHERMALMOISTURECAPACITYUNIT",IfcDerivedUnitEnum.KINEMATICVISCOSITYUNIT="KINEMATICVISCOSITYUNIT",IfcDerivedUnitEnum.LINEARVELOCITYUNIT="LINEARVELOCITYUNIT",IfcDerivedUnitEnum.MASSDENSITYUNIT="MASSDENSITYUNIT",IfcDerivedUnitEnum.MASSFLOWRATEUNIT="MASSFLOWRATEUNIT",IfcDerivedUnitEnum.MOISTUREDIFFUSIVITYUNIT="MOISTUREDIFFUSIVITYUNIT",IfcDerivedUnitEnum.MOLECULARWEIGHTUNIT="MOLECULARWEIGHTUNIT",IfcDerivedUnitEnum.SPECIFICHEATCAPACITYUNIT="SPECIFICHEATCAPACITYUNIT",IfcDerivedUnitEnum.THERMALADMITTANCEUNIT="THERMALADMITTANCEUNIT",IfcDerivedUnitEnum.THERMALCONDUCTANCEUNIT="THERMALCONDUCTANCEUNIT",IfcDerivedUnitEnum.THERMALRESISTANCEUNIT="THERMALRESISTANCEUNIT",IfcDerivedUnitEnum.THERMALTRANSMITTANCEUNIT="THERMALTRANSMITTANCEUNIT",IfcDerivedUnitEnum.VAPORPERMEABILITYUNIT="VAPORPERMEABILITYUNIT",IfcDerivedUnitEnum.VOLUMETRICFLOWRATEUNIT="VOLUMETRICFLOWRATEUNIT",IfcDerivedUnitEnum.ROTATIONALFREQUENCYUNIT="ROTATIONALFREQUENCYUNIT",IfcDerivedUnitEnum.TORQUEUNIT="TORQUEUNIT",IfcDerivedUnitEnum.MOMENTOFINERTIAUNIT="MOMENTOFINERTIAUNIT",IfcDerivedUnitEnum.LINEARMOMENTUNIT="LINEARMOMENTUNIT",IfcDerivedUnitEnum.LINEARFORCEUNIT="LINEARFORCEUNIT",IfcDerivedUnitEnum.PLANARFORCEUNIT="PLANARFORCEUNIT",IfcDerivedUnitEnum.MODULUSOFELASTICITYUNIT="MODULUSOFELASTICITYUNIT",IfcDerivedUnitEnum.SHEARMODULUSUNIT="SHEARMODULUSUNIT",IfcDerivedUnitEnum.LINEARSTIFFNESSUNIT="LINEARSTIFFNESSUNIT",IfcDerivedUnitEnum.ROTATIONALSTIFFNESSUNIT="ROTATIONALSTIFFNESSUNIT",IfcDerivedUnitEnum.MODULUSOFSUBGRADEREACTIONUNIT="MODULUSOFSUBGRADEREACTIONUNIT",IfcDerivedUnitEnum.ACCELERATIONUNIT="ACCELERATIONUNIT",IfcDerivedUnitEnum.CURVATUREUNIT="CURVATUREUNIT",IfcDerivedUnitEnum.HEATINGVALUEUNIT="HEATINGVALUEUNIT",IfcDerivedUnitEnum.IONCONCENTRATIONUNIT="IONCONCENTRATIONUNIT",IfcDerivedUnitEnum.LUMINOUSINTENSITYDISTRIBUTIONUNIT="LUMINOUSINTENSITYDISTRIBUTIONUNIT",IfcDerivedUnitEnum.MASSPERLENGTHUNIT="MASSPERLENGTHUNIT",IfcDerivedUnitEnum.MODULUSOFLINEARSUBGRADEREACTIONUNIT="MODULUSOFLINEARSUBGRADEREACTIONUNIT",IfcDerivedUnitEnum.MODULUSOFROTATIONALSUBGRADEREACTIONUNIT="MODULUSOFROTATIONALSUBGRADEREACTIONUNIT",IfcDerivedUnitEnum.PHUNIT="PHUNIT",IfcDerivedUnitEnum.ROTATIONALMASSUNIT="ROTATIONALMASSUNIT",IfcDerivedUnitEnum.SECTIONAREAINTEGRALUNIT="SECTIONAREAINTEGRALUNIT",IfcDerivedUnitEnum.SECTIONMODULUSUNIT="SECTIONMODULUSUNIT",IfcDerivedUnitEnum.SOUNDPOWERLEVELUNIT="SOUNDPOWERLEVELUNIT",IfcDerivedUnitEnum.SOUNDPOWERUNIT="SOUNDPOWERUNIT",IfcDerivedUnitEnum.SOUNDPRESSURELEVELUNIT="SOUNDPRESSURELEVELUNIT",IfcDerivedUnitEnum.SOUNDPRESSUREUNIT="SOUNDPRESSUREUNIT",IfcDerivedUnitEnum.TEMPERATUREGRADIENTUNIT="TEMPERATUREGRADIENTUNIT",IfcDerivedUnitEnum.TEMPERATURERATEOFCHANGEUNIT="TEMPERATURERATEOFCHANGEUNIT",IfcDerivedUnitEnum.THERMALEXPANSIONCOEFFICIENTUNIT="THERMALEXPANSIONCOEFFICIENTUNIT",IfcDerivedUnitEnum.WARPINGCONSTANTUNIT="WARPINGCONSTANTUNIT",IfcDerivedUnitEnum.WARPINGMOMENTUNIT="WARPINGMOMENTUNIT",IfcDerivedUnitEnum.USERDEFINED="USERDEFINED";var IfcDirectionSenseEnum=class{constructor(v){this.value=v}};IfcDirectionSenseEnum.POSITIVE="POSITIVE",IfcDirectionSenseEnum.NEGATIVE="NEGATIVE";var IfcDiscreteAccessoryTypeEnum=class{constructor(v){this.value=v}};IfcDiscreteAccessoryTypeEnum.ANCHORPLATE="ANCHORPLATE",IfcDiscreteAccessoryTypeEnum.BRACKET="BRACKET",IfcDiscreteAccessoryTypeEnum.SHOE="SHOE",IfcDiscreteAccessoryTypeEnum.EXPANSION_JOINT_DEVICE="EXPANSION_JOINT_DEVICE",IfcDiscreteAccessoryTypeEnum.USERDEFINED="USERDEFINED",IfcDiscreteAccessoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDistributionChamberElementTypeEnum=class{constructor(v){this.value=v}};IfcDistributionChamberElementTypeEnum.FORMEDDUCT="FORMEDDUCT",IfcDistributionChamberElementTypeEnum.INSPECTIONCHAMBER="INSPECTIONCHAMBER",IfcDistributionChamberElementTypeEnum.INSPECTIONPIT="INSPECTIONPIT",IfcDistributionChamberElementTypeEnum.MANHOLE="MANHOLE",IfcDistributionChamberElementTypeEnum.METERCHAMBER="METERCHAMBER",IfcDistributionChamberElementTypeEnum.SUMP="SUMP",IfcDistributionChamberElementTypeEnum.TRENCH="TRENCH",IfcDistributionChamberElementTypeEnum.VALVECHAMBER="VALVECHAMBER",IfcDistributionChamberElementTypeEnum.USERDEFINED="USERDEFINED",IfcDistributionChamberElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDistributionPortTypeEnum=class{constructor(v){this.value=v}};IfcDistributionPortTypeEnum.CABLE="CABLE",IfcDistributionPortTypeEnum.CABLECARRIER="CABLECARRIER",IfcDistributionPortTypeEnum.DUCT="DUCT",IfcDistributionPortTypeEnum.PIPE="PIPE",IfcDistributionPortTypeEnum.USERDEFINED="USERDEFINED",IfcDistributionPortTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDistributionSystemEnum=class{constructor(v){this.value=v}};IfcDistributionSystemEnum.AIRCONDITIONING="AIRCONDITIONING",IfcDistributionSystemEnum.AUDIOVISUAL="AUDIOVISUAL",IfcDistributionSystemEnum.CHEMICAL="CHEMICAL",IfcDistributionSystemEnum.CHILLEDWATER="CHILLEDWATER",IfcDistributionSystemEnum.COMMUNICATION="COMMUNICATION",IfcDistributionSystemEnum.COMPRESSEDAIR="COMPRESSEDAIR",IfcDistributionSystemEnum.CONDENSERWATER="CONDENSERWATER",IfcDistributionSystemEnum.CONTROL="CONTROL",IfcDistributionSystemEnum.CONVEYING="CONVEYING",IfcDistributionSystemEnum.DATA="DATA",IfcDistributionSystemEnum.DISPOSAL="DISPOSAL",IfcDistributionSystemEnum.DOMESTICCOLDWATER="DOMESTICCOLDWATER",IfcDistributionSystemEnum.DOMESTICHOTWATER="DOMESTICHOTWATER",IfcDistributionSystemEnum.DRAINAGE="DRAINAGE",IfcDistributionSystemEnum.EARTHING="EARTHING",IfcDistributionSystemEnum.ELECTRICAL="ELECTRICAL",IfcDistributionSystemEnum.ELECTROACOUSTIC="ELECTROACOUSTIC",IfcDistributionSystemEnum.EXHAUST="EXHAUST",IfcDistributionSystemEnum.FIREPROTECTION="FIREPROTECTION",IfcDistributionSystemEnum.FUEL="FUEL",IfcDistributionSystemEnum.GAS="GAS",IfcDistributionSystemEnum.HAZARDOUS="HAZARDOUS",IfcDistributionSystemEnum.HEATING="HEATING",IfcDistributionSystemEnum.LIGHTING="LIGHTING",IfcDistributionSystemEnum.LIGHTNINGPROTECTION="LIGHTNINGPROTECTION",IfcDistributionSystemEnum.MUNICIPALSOLIDWASTE="MUNICIPALSOLIDWASTE",IfcDistributionSystemEnum.OIL="OIL",IfcDistributionSystemEnum.OPERATIONAL="OPERATIONAL",IfcDistributionSystemEnum.POWERGENERATION="POWERGENERATION",IfcDistributionSystemEnum.RAINWATER="RAINWATER",IfcDistributionSystemEnum.REFRIGERATION="REFRIGERATION",IfcDistributionSystemEnum.SECURITY="SECURITY",IfcDistributionSystemEnum.SEWAGE="SEWAGE",IfcDistributionSystemEnum.SIGNAL="SIGNAL",IfcDistributionSystemEnum.STORMWATER="STORMWATER",IfcDistributionSystemEnum.TELEPHONE="TELEPHONE",IfcDistributionSystemEnum.TV="TV",IfcDistributionSystemEnum.VACUUM="VACUUM",IfcDistributionSystemEnum.VENT="VENT",IfcDistributionSystemEnum.VENTILATION="VENTILATION",IfcDistributionSystemEnum.WASTEWATER="WASTEWATER",IfcDistributionSystemEnum.WATERSUPPLY="WATERSUPPLY",IfcDistributionSystemEnum.USERDEFINED="USERDEFINED",IfcDistributionSystemEnum.NOTDEFINED="NOTDEFINED";var IfcDocumentConfidentialityEnum=class{constructor(v){this.value=v}};IfcDocumentConfidentialityEnum.PUBLIC="PUBLIC",IfcDocumentConfidentialityEnum.RESTRICTED="RESTRICTED",IfcDocumentConfidentialityEnum.CONFIDENTIAL="CONFIDENTIAL",IfcDocumentConfidentialityEnum.PERSONAL="PERSONAL",IfcDocumentConfidentialityEnum.USERDEFINED="USERDEFINED",IfcDocumentConfidentialityEnum.NOTDEFINED="NOTDEFINED";var IfcDocumentStatusEnum=class{constructor(v){this.value=v}};IfcDocumentStatusEnum.DRAFT="DRAFT",IfcDocumentStatusEnum.FINALDRAFT="FINALDRAFT",IfcDocumentStatusEnum.FINAL="FINAL",IfcDocumentStatusEnum.REVISION="REVISION",IfcDocumentStatusEnum.NOTDEFINED="NOTDEFINED";var IfcDoorPanelOperationEnum=class{constructor(v){this.value=v}};IfcDoorPanelOperationEnum.SWINGING="SWINGING",IfcDoorPanelOperationEnum.DOUBLE_ACTING="DOUBLE_ACTING",IfcDoorPanelOperationEnum.SLIDING="SLIDING",IfcDoorPanelOperationEnum.FOLDING="FOLDING",IfcDoorPanelOperationEnum.REVOLVING="REVOLVING",IfcDoorPanelOperationEnum.ROLLINGUP="ROLLINGUP",IfcDoorPanelOperationEnum.FIXEDPANEL="FIXEDPANEL",IfcDoorPanelOperationEnum.USERDEFINED="USERDEFINED",IfcDoorPanelOperationEnum.NOTDEFINED="NOTDEFINED";var IfcDoorPanelPositionEnum=class{constructor(v){this.value=v}};IfcDoorPanelPositionEnum.LEFT="LEFT",IfcDoorPanelPositionEnum.MIDDLE="MIDDLE",IfcDoorPanelPositionEnum.RIGHT="RIGHT",IfcDoorPanelPositionEnum.NOTDEFINED="NOTDEFINED";var IfcDoorStyleConstructionEnum=class{constructor(v){this.value=v}};IfcDoorStyleConstructionEnum.ALUMINIUM="ALUMINIUM",IfcDoorStyleConstructionEnum.HIGH_GRADE_STEEL="HIGH_GRADE_STEEL",IfcDoorStyleConstructionEnum.STEEL="STEEL",IfcDoorStyleConstructionEnum.WOOD="WOOD",IfcDoorStyleConstructionEnum.ALUMINIUM_WOOD="ALUMINIUM_WOOD",IfcDoorStyleConstructionEnum.ALUMINIUM_PLASTIC="ALUMINIUM_PLASTIC",IfcDoorStyleConstructionEnum.PLASTIC="PLASTIC",IfcDoorStyleConstructionEnum.USERDEFINED="USERDEFINED",IfcDoorStyleConstructionEnum.NOTDEFINED="NOTDEFINED";var IfcDoorStyleOperationEnum=class{constructor(v){this.value=v}};IfcDoorStyleOperationEnum.SINGLE_SWING_LEFT="SINGLE_SWING_LEFT",IfcDoorStyleOperationEnum.SINGLE_SWING_RIGHT="SINGLE_SWING_RIGHT",IfcDoorStyleOperationEnum.DOUBLE_DOOR_SINGLE_SWING="DOUBLE_DOOR_SINGLE_SWING",IfcDoorStyleOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT",IfcDoorStyleOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT",IfcDoorStyleOperationEnum.DOUBLE_SWING_LEFT="DOUBLE_SWING_LEFT",IfcDoorStyleOperationEnum.DOUBLE_SWING_RIGHT="DOUBLE_SWING_RIGHT",IfcDoorStyleOperationEnum.DOUBLE_DOOR_DOUBLE_SWING="DOUBLE_DOOR_DOUBLE_SWING",IfcDoorStyleOperationEnum.SLIDING_TO_LEFT="SLIDING_TO_LEFT",IfcDoorStyleOperationEnum.SLIDING_TO_RIGHT="SLIDING_TO_RIGHT",IfcDoorStyleOperationEnum.DOUBLE_DOOR_SLIDING="DOUBLE_DOOR_SLIDING",IfcDoorStyleOperationEnum.FOLDING_TO_LEFT="FOLDING_TO_LEFT",IfcDoorStyleOperationEnum.FOLDING_TO_RIGHT="FOLDING_TO_RIGHT",IfcDoorStyleOperationEnum.DOUBLE_DOOR_FOLDING="DOUBLE_DOOR_FOLDING",IfcDoorStyleOperationEnum.REVOLVING="REVOLVING",IfcDoorStyleOperationEnum.ROLLINGUP="ROLLINGUP",IfcDoorStyleOperationEnum.USERDEFINED="USERDEFINED",IfcDoorStyleOperationEnum.NOTDEFINED="NOTDEFINED";var IfcDoorTypeEnum=class{constructor(v){this.value=v}};IfcDoorTypeEnum.DOOR="DOOR",IfcDoorTypeEnum.GATE="GATE",IfcDoorTypeEnum.TRAPDOOR="TRAPDOOR",IfcDoorTypeEnum.USERDEFINED="USERDEFINED",IfcDoorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDoorTypeOperationEnum=class{constructor(v){this.value=v}};IfcDoorTypeOperationEnum.SINGLE_SWING_LEFT="SINGLE_SWING_LEFT",IfcDoorTypeOperationEnum.SINGLE_SWING_RIGHT="SINGLE_SWING_RIGHT",IfcDoorTypeOperationEnum.DOUBLE_DOOR_SINGLE_SWING="DOUBLE_DOOR_SINGLE_SWING",IfcDoorTypeOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT",IfcDoorTypeOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT",IfcDoorTypeOperationEnum.DOUBLE_SWING_LEFT="DOUBLE_SWING_LEFT",IfcDoorTypeOperationEnum.DOUBLE_SWING_RIGHT="DOUBLE_SWING_RIGHT",IfcDoorTypeOperationEnum.DOUBLE_DOOR_DOUBLE_SWING="DOUBLE_DOOR_DOUBLE_SWING",IfcDoorTypeOperationEnum.SLIDING_TO_LEFT="SLIDING_TO_LEFT",IfcDoorTypeOperationEnum.SLIDING_TO_RIGHT="SLIDING_TO_RIGHT",IfcDoorTypeOperationEnum.DOUBLE_DOOR_SLIDING="DOUBLE_DOOR_SLIDING",IfcDoorTypeOperationEnum.FOLDING_TO_LEFT="FOLDING_TO_LEFT",IfcDoorTypeOperationEnum.FOLDING_TO_RIGHT="FOLDING_TO_RIGHT",IfcDoorTypeOperationEnum.DOUBLE_DOOR_FOLDING="DOUBLE_DOOR_FOLDING",IfcDoorTypeOperationEnum.REVOLVING="REVOLVING",IfcDoorTypeOperationEnum.ROLLINGUP="ROLLINGUP",IfcDoorTypeOperationEnum.SWING_FIXED_LEFT="SWING_FIXED_LEFT",IfcDoorTypeOperationEnum.SWING_FIXED_RIGHT="SWING_FIXED_RIGHT",IfcDoorTypeOperationEnum.USERDEFINED="USERDEFINED",IfcDoorTypeOperationEnum.NOTDEFINED="NOTDEFINED";var IfcDuctFittingTypeEnum=class{constructor(v){this.value=v}};IfcDuctFittingTypeEnum.BEND="BEND",IfcDuctFittingTypeEnum.CONNECTOR="CONNECTOR",IfcDuctFittingTypeEnum.ENTRY="ENTRY",IfcDuctFittingTypeEnum.EXIT="EXIT",IfcDuctFittingTypeEnum.JUNCTION="JUNCTION",IfcDuctFittingTypeEnum.OBSTRUCTION="OBSTRUCTION",IfcDuctFittingTypeEnum.TRANSITION="TRANSITION",IfcDuctFittingTypeEnum.USERDEFINED="USERDEFINED",IfcDuctFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDuctSegmentTypeEnum=class{constructor(v){this.value=v}};IfcDuctSegmentTypeEnum.RIGIDSEGMENT="RIGIDSEGMENT",IfcDuctSegmentTypeEnum.FLEXIBLESEGMENT="FLEXIBLESEGMENT",IfcDuctSegmentTypeEnum.USERDEFINED="USERDEFINED",IfcDuctSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDuctSilencerTypeEnum=class{constructor(v){this.value=v}};IfcDuctSilencerTypeEnum.FLATOVAL="FLATOVAL",IfcDuctSilencerTypeEnum.RECTANGULAR="RECTANGULAR",IfcDuctSilencerTypeEnum.ROUND="ROUND",IfcDuctSilencerTypeEnum.USERDEFINED="USERDEFINED",IfcDuctSilencerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricApplianceTypeEnum=class{constructor(v){this.value=v}};IfcElectricApplianceTypeEnum.DISHWASHER="DISHWASHER",IfcElectricApplianceTypeEnum.ELECTRICCOOKER="ELECTRICCOOKER",IfcElectricApplianceTypeEnum.FREESTANDINGELECTRICHEATER="FREESTANDINGELECTRICHEATER",IfcElectricApplianceTypeEnum.FREESTANDINGFAN="FREESTANDINGFAN",IfcElectricApplianceTypeEnum.FREESTANDINGWATERHEATER="FREESTANDINGWATERHEATER",IfcElectricApplianceTypeEnum.FREESTANDINGWATERCOOLER="FREESTANDINGWATERCOOLER",IfcElectricApplianceTypeEnum.FREEZER="FREEZER",IfcElectricApplianceTypeEnum.FRIDGE_FREEZER="FRIDGE_FREEZER",IfcElectricApplianceTypeEnum.HANDDRYER="HANDDRYER",IfcElectricApplianceTypeEnum.KITCHENMACHINE="KITCHENMACHINE",IfcElectricApplianceTypeEnum.MICROWAVE="MICROWAVE",IfcElectricApplianceTypeEnum.PHOTOCOPIER="PHOTOCOPIER",IfcElectricApplianceTypeEnum.REFRIGERATOR="REFRIGERATOR",IfcElectricApplianceTypeEnum.TUMBLEDRYER="TUMBLEDRYER",IfcElectricApplianceTypeEnum.VENDINGMACHINE="VENDINGMACHINE",IfcElectricApplianceTypeEnum.WASHINGMACHINE="WASHINGMACHINE",IfcElectricApplianceTypeEnum.USERDEFINED="USERDEFINED",IfcElectricApplianceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricDistributionBoardTypeEnum=class{constructor(v){this.value=v}};IfcElectricDistributionBoardTypeEnum.CONSUMERUNIT="CONSUMERUNIT",IfcElectricDistributionBoardTypeEnum.DISTRIBUTIONBOARD="DISTRIBUTIONBOARD",IfcElectricDistributionBoardTypeEnum.MOTORCONTROLCENTRE="MOTORCONTROLCENTRE",IfcElectricDistributionBoardTypeEnum.SWITCHBOARD="SWITCHBOARD",IfcElectricDistributionBoardTypeEnum.USERDEFINED="USERDEFINED",IfcElectricDistributionBoardTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricFlowStorageDeviceTypeEnum=class{constructor(v){this.value=v}};IfcElectricFlowStorageDeviceTypeEnum.BATTERY="BATTERY",IfcElectricFlowStorageDeviceTypeEnum.CAPACITORBANK="CAPACITORBANK",IfcElectricFlowStorageDeviceTypeEnum.HARMONICFILTER="HARMONICFILTER",IfcElectricFlowStorageDeviceTypeEnum.INDUCTORBANK="INDUCTORBANK",IfcElectricFlowStorageDeviceTypeEnum.UPS="UPS",IfcElectricFlowStorageDeviceTypeEnum.USERDEFINED="USERDEFINED",IfcElectricFlowStorageDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricGeneratorTypeEnum=class{constructor(v){this.value=v}};IfcElectricGeneratorTypeEnum.CHP="CHP",IfcElectricGeneratorTypeEnum.ENGINEGENERATOR="ENGINEGENERATOR",IfcElectricGeneratorTypeEnum.STANDALONE="STANDALONE",IfcElectricGeneratorTypeEnum.USERDEFINED="USERDEFINED",IfcElectricGeneratorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricMotorTypeEnum=class{constructor(v){this.value=v}};IfcElectricMotorTypeEnum.DC="DC",IfcElectricMotorTypeEnum.INDUCTION="INDUCTION",IfcElectricMotorTypeEnum.POLYPHASE="POLYPHASE",IfcElectricMotorTypeEnum.RELUCTANCESYNCHRONOUS="RELUCTANCESYNCHRONOUS",IfcElectricMotorTypeEnum.SYNCHRONOUS="SYNCHRONOUS",IfcElectricMotorTypeEnum.USERDEFINED="USERDEFINED",IfcElectricMotorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricTimeControlTypeEnum=class{constructor(v){this.value=v}};IfcElectricTimeControlTypeEnum.TIMECLOCK="TIMECLOCK",IfcElectricTimeControlTypeEnum.TIMEDELAY="TIMEDELAY",IfcElectricTimeControlTypeEnum.RELAY="RELAY",IfcElectricTimeControlTypeEnum.USERDEFINED="USERDEFINED",IfcElectricTimeControlTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElementAssemblyTypeEnum=class{constructor(v){this.value=v}};IfcElementAssemblyTypeEnum.ACCESSORY_ASSEMBLY="ACCESSORY_ASSEMBLY",IfcElementAssemblyTypeEnum.ARCH="ARCH",IfcElementAssemblyTypeEnum.BEAM_GRID="BEAM_GRID",IfcElementAssemblyTypeEnum.BRACED_FRAME="BRACED_FRAME",IfcElementAssemblyTypeEnum.GIRDER="GIRDER",IfcElementAssemblyTypeEnum.REINFORCEMENT_UNIT="REINFORCEMENT_UNIT",IfcElementAssemblyTypeEnum.RIGID_FRAME="RIGID_FRAME",IfcElementAssemblyTypeEnum.SLAB_FIELD="SLAB_FIELD",IfcElementAssemblyTypeEnum.TRUSS="TRUSS",IfcElementAssemblyTypeEnum.ABUTMENT="ABUTMENT",IfcElementAssemblyTypeEnum.PIER="PIER",IfcElementAssemblyTypeEnum.PYLON="PYLON",IfcElementAssemblyTypeEnum.CROSS_BRACING="CROSS_BRACING",IfcElementAssemblyTypeEnum.DECK="DECK",IfcElementAssemblyTypeEnum.USERDEFINED="USERDEFINED",IfcElementAssemblyTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElementCompositionEnum=class{constructor(v){this.value=v}};IfcElementCompositionEnum.COMPLEX="COMPLEX",IfcElementCompositionEnum.ELEMENT="ELEMENT",IfcElementCompositionEnum.PARTIAL="PARTIAL";var IfcEngineTypeEnum=class{constructor(v){this.value=v}};IfcEngineTypeEnum.EXTERNALCOMBUSTION="EXTERNALCOMBUSTION",IfcEngineTypeEnum.INTERNALCOMBUSTION="INTERNALCOMBUSTION",IfcEngineTypeEnum.USERDEFINED="USERDEFINED",IfcEngineTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEvaporativeCoolerTypeEnum=class{constructor(v){this.value=v}};IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER="DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER",IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER="DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER",IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER="DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER",IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER="DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER",IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVEAIRWASHER="DIRECTEVAPORATIVEAIRWASHER",IfcEvaporativeCoolerTypeEnum.INDIRECTEVAPORATIVEPACKAGEAIRCOOLER="INDIRECTEVAPORATIVEPACKAGEAIRCOOLER",IfcEvaporativeCoolerTypeEnum.INDIRECTEVAPORATIVEWETCOIL="INDIRECTEVAPORATIVEWETCOIL",IfcEvaporativeCoolerTypeEnum.INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER="INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER",IfcEvaporativeCoolerTypeEnum.INDIRECTDIRECTCOMBINATION="INDIRECTDIRECTCOMBINATION",IfcEvaporativeCoolerTypeEnum.USERDEFINED="USERDEFINED",IfcEvaporativeCoolerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEvaporatorTypeEnum=class{constructor(v){this.value=v}};IfcEvaporatorTypeEnum.DIRECTEXPANSION="DIRECTEXPANSION",IfcEvaporatorTypeEnum.DIRECTEXPANSIONSHELLANDTUBE="DIRECTEXPANSIONSHELLANDTUBE",IfcEvaporatorTypeEnum.DIRECTEXPANSIONTUBEINTUBE="DIRECTEXPANSIONTUBEINTUBE",IfcEvaporatorTypeEnum.DIRECTEXPANSIONBRAZEDPLATE="DIRECTEXPANSIONBRAZEDPLATE",IfcEvaporatorTypeEnum.FLOODEDSHELLANDTUBE="FLOODEDSHELLANDTUBE",IfcEvaporatorTypeEnum.SHELLANDCOIL="SHELLANDCOIL",IfcEvaporatorTypeEnum.USERDEFINED="USERDEFINED",IfcEvaporatorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEventTriggerTypeEnum=class{constructor(v){this.value=v}};IfcEventTriggerTypeEnum.EVENTRULE="EVENTRULE",IfcEventTriggerTypeEnum.EVENTMESSAGE="EVENTMESSAGE",IfcEventTriggerTypeEnum.EVENTTIME="EVENTTIME",IfcEventTriggerTypeEnum.EVENTCOMPLEX="EVENTCOMPLEX",IfcEventTriggerTypeEnum.USERDEFINED="USERDEFINED",IfcEventTriggerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEventTypeEnum=class{constructor(v){this.value=v}};IfcEventTypeEnum.STARTEVENT="STARTEVENT",IfcEventTypeEnum.ENDEVENT="ENDEVENT",IfcEventTypeEnum.INTERMEDIATEEVENT="INTERMEDIATEEVENT",IfcEventTypeEnum.USERDEFINED="USERDEFINED",IfcEventTypeEnum.NOTDEFINED="NOTDEFINED";var IfcExternalSpatialElementTypeEnum=class{constructor(v){this.value=v}};IfcExternalSpatialElementTypeEnum.EXTERNAL="EXTERNAL",IfcExternalSpatialElementTypeEnum.EXTERNAL_EARTH="EXTERNAL_EARTH",IfcExternalSpatialElementTypeEnum.EXTERNAL_WATER="EXTERNAL_WATER",IfcExternalSpatialElementTypeEnum.EXTERNAL_FIRE="EXTERNAL_FIRE",IfcExternalSpatialElementTypeEnum.USERDEFINED="USERDEFINED",IfcExternalSpatialElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFanTypeEnum=class{constructor(v){this.value=v}};IfcFanTypeEnum.CENTRIFUGALFORWARDCURVED="CENTRIFUGALFORWARDCURVED",IfcFanTypeEnum.CENTRIFUGALRADIAL="CENTRIFUGALRADIAL",IfcFanTypeEnum.CENTRIFUGALBACKWARDINCLINEDCURVED="CENTRIFUGALBACKWARDINCLINEDCURVED",IfcFanTypeEnum.CENTRIFUGALAIRFOIL="CENTRIFUGALAIRFOIL",IfcFanTypeEnum.TUBEAXIAL="TUBEAXIAL",IfcFanTypeEnum.VANEAXIAL="VANEAXIAL",IfcFanTypeEnum.PROPELLORAXIAL="PROPELLORAXIAL",IfcFanTypeEnum.USERDEFINED="USERDEFINED",IfcFanTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFastenerTypeEnum=class{constructor(v){this.value=v}};IfcFastenerTypeEnum.GLUE="GLUE",IfcFastenerTypeEnum.MORTAR="MORTAR",IfcFastenerTypeEnum.WELD="WELD",IfcFastenerTypeEnum.USERDEFINED="USERDEFINED",IfcFastenerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFilterTypeEnum=class{constructor(v){this.value=v}};IfcFilterTypeEnum.AIRPARTICLEFILTER="AIRPARTICLEFILTER",IfcFilterTypeEnum.COMPRESSEDAIRFILTER="COMPRESSEDAIRFILTER",IfcFilterTypeEnum.ODORFILTER="ODORFILTER",IfcFilterTypeEnum.OILFILTER="OILFILTER",IfcFilterTypeEnum.STRAINER="STRAINER",IfcFilterTypeEnum.WATERFILTER="WATERFILTER",IfcFilterTypeEnum.USERDEFINED="USERDEFINED",IfcFilterTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFireSuppressionTerminalTypeEnum=class{constructor(v){this.value=v}};IfcFireSuppressionTerminalTypeEnum.BREECHINGINLET="BREECHINGINLET",IfcFireSuppressionTerminalTypeEnum.FIREHYDRANT="FIREHYDRANT",IfcFireSuppressionTerminalTypeEnum.HOSEREEL="HOSEREEL",IfcFireSuppressionTerminalTypeEnum.SPRINKLER="SPRINKLER",IfcFireSuppressionTerminalTypeEnum.SPRINKLERDEFLECTOR="SPRINKLERDEFLECTOR",IfcFireSuppressionTerminalTypeEnum.USERDEFINED="USERDEFINED",IfcFireSuppressionTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFlowDirectionEnum=class{constructor(v){this.value=v}};IfcFlowDirectionEnum.SOURCE="SOURCE",IfcFlowDirectionEnum.SINK="SINK",IfcFlowDirectionEnum.SOURCEANDSINK="SOURCEANDSINK",IfcFlowDirectionEnum.NOTDEFINED="NOTDEFINED";var IfcFlowInstrumentTypeEnum=class{constructor(v){this.value=v}};IfcFlowInstrumentTypeEnum.PRESSUREGAUGE="PRESSUREGAUGE",IfcFlowInstrumentTypeEnum.THERMOMETER="THERMOMETER",IfcFlowInstrumentTypeEnum.AMMETER="AMMETER",IfcFlowInstrumentTypeEnum.FREQUENCYMETER="FREQUENCYMETER",IfcFlowInstrumentTypeEnum.POWERFACTORMETER="POWERFACTORMETER",IfcFlowInstrumentTypeEnum.PHASEANGLEMETER="PHASEANGLEMETER",IfcFlowInstrumentTypeEnum.VOLTMETER_PEAK="VOLTMETER_PEAK",IfcFlowInstrumentTypeEnum.VOLTMETER_RMS="VOLTMETER_RMS",IfcFlowInstrumentTypeEnum.USERDEFINED="USERDEFINED",IfcFlowInstrumentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFlowMeterTypeEnum=class{constructor(v){this.value=v}};IfcFlowMeterTypeEnum.ENERGYMETER="ENERGYMETER",IfcFlowMeterTypeEnum.GASMETER="GASMETER",IfcFlowMeterTypeEnum.OILMETER="OILMETER",IfcFlowMeterTypeEnum.WATERMETER="WATERMETER",IfcFlowMeterTypeEnum.USERDEFINED="USERDEFINED",IfcFlowMeterTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFootingTypeEnum=class{constructor(v){this.value=v}};IfcFootingTypeEnum.CAISSON_FOUNDATION="CAISSON_FOUNDATION",IfcFootingTypeEnum.FOOTING_BEAM="FOOTING_BEAM",IfcFootingTypeEnum.PAD_FOOTING="PAD_FOOTING",IfcFootingTypeEnum.PILE_CAP="PILE_CAP",IfcFootingTypeEnum.STRIP_FOOTING="STRIP_FOOTING",IfcFootingTypeEnum.USERDEFINED="USERDEFINED",IfcFootingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFurnitureTypeEnum=class{constructor(v){this.value=v}};IfcFurnitureTypeEnum.CHAIR="CHAIR",IfcFurnitureTypeEnum.TABLE="TABLE",IfcFurnitureTypeEnum.DESK="DESK",IfcFurnitureTypeEnum.BED="BED",IfcFurnitureTypeEnum.FILECABINET="FILECABINET",IfcFurnitureTypeEnum.SHELF="SHELF",IfcFurnitureTypeEnum.SOFA="SOFA",IfcFurnitureTypeEnum.USERDEFINED="USERDEFINED",IfcFurnitureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcGeographicElementTypeEnum=class{constructor(v){this.value=v}};IfcGeographicElementTypeEnum.TERRAIN="TERRAIN",IfcGeographicElementTypeEnum.SOIL_BORING_POINT="SOIL_BORING_POINT",IfcGeographicElementTypeEnum.USERDEFINED="USERDEFINED",IfcGeographicElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcGeometricProjectionEnum=class{constructor(v){this.value=v}};IfcGeometricProjectionEnum.GRAPH_VIEW="GRAPH_VIEW",IfcGeometricProjectionEnum.SKETCH_VIEW="SKETCH_VIEW",IfcGeometricProjectionEnum.MODEL_VIEW="MODEL_VIEW",IfcGeometricProjectionEnum.PLAN_VIEW="PLAN_VIEW",IfcGeometricProjectionEnum.REFLECTED_PLAN_VIEW="REFLECTED_PLAN_VIEW",IfcGeometricProjectionEnum.SECTION_VIEW="SECTION_VIEW",IfcGeometricProjectionEnum.ELEVATION_VIEW="ELEVATION_VIEW",IfcGeometricProjectionEnum.USERDEFINED="USERDEFINED",IfcGeometricProjectionEnum.NOTDEFINED="NOTDEFINED";var IfcGlobalOrLocalEnum=class{constructor(v){this.value=v}};IfcGlobalOrLocalEnum.GLOBAL_COORDS="GLOBAL_COORDS",IfcGlobalOrLocalEnum.LOCAL_COORDS="LOCAL_COORDS";var IfcGridTypeEnum=class{constructor(v){this.value=v}};IfcGridTypeEnum.RECTANGULAR="RECTANGULAR",IfcGridTypeEnum.RADIAL="RADIAL",IfcGridTypeEnum.TRIANGULAR="TRIANGULAR",IfcGridTypeEnum.IRREGULAR="IRREGULAR",IfcGridTypeEnum.USERDEFINED="USERDEFINED",IfcGridTypeEnum.NOTDEFINED="NOTDEFINED";var IfcHeatExchangerTypeEnum=class{constructor(v){this.value=v}};IfcHeatExchangerTypeEnum.PLATE="PLATE",IfcHeatExchangerTypeEnum.SHELLANDTUBE="SHELLANDTUBE",IfcHeatExchangerTypeEnum.USERDEFINED="USERDEFINED",IfcHeatExchangerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcHumidifierTypeEnum=class{constructor(v){this.value=v}};IfcHumidifierTypeEnum.STEAMINJECTION="STEAMINJECTION",IfcHumidifierTypeEnum.ADIABATICAIRWASHER="ADIABATICAIRWASHER",IfcHumidifierTypeEnum.ADIABATICPAN="ADIABATICPAN",IfcHumidifierTypeEnum.ADIABATICWETTEDELEMENT="ADIABATICWETTEDELEMENT",IfcHumidifierTypeEnum.ADIABATICATOMIZING="ADIABATICATOMIZING",IfcHumidifierTypeEnum.ADIABATICULTRASONIC="ADIABATICULTRASONIC",IfcHumidifierTypeEnum.ADIABATICRIGIDMEDIA="ADIABATICRIGIDMEDIA",IfcHumidifierTypeEnum.ADIABATICCOMPRESSEDAIRNOZZLE="ADIABATICCOMPRESSEDAIRNOZZLE",IfcHumidifierTypeEnum.ASSISTEDELECTRIC="ASSISTEDELECTRIC",IfcHumidifierTypeEnum.ASSISTEDNATURALGAS="ASSISTEDNATURALGAS",IfcHumidifierTypeEnum.ASSISTEDPROPANE="ASSISTEDPROPANE",IfcHumidifierTypeEnum.ASSISTEDBUTANE="ASSISTEDBUTANE",IfcHumidifierTypeEnum.ASSISTEDSTEAM="ASSISTEDSTEAM",IfcHumidifierTypeEnum.USERDEFINED="USERDEFINED",IfcHumidifierTypeEnum.NOTDEFINED="NOTDEFINED";var IfcInterceptorTypeEnum=class{constructor(v){this.value=v}};IfcInterceptorTypeEnum.CYCLONIC="CYCLONIC",IfcInterceptorTypeEnum.GREASE="GREASE",IfcInterceptorTypeEnum.OIL="OIL",IfcInterceptorTypeEnum.PETROL="PETROL",IfcInterceptorTypeEnum.USERDEFINED="USERDEFINED",IfcInterceptorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcInternalOrExternalEnum=class{constructor(v){this.value=v}};IfcInternalOrExternalEnum.INTERNAL="INTERNAL",IfcInternalOrExternalEnum.EXTERNAL="EXTERNAL",IfcInternalOrExternalEnum.EXTERNAL_EARTH="EXTERNAL_EARTH",IfcInternalOrExternalEnum.EXTERNAL_WATER="EXTERNAL_WATER",IfcInternalOrExternalEnum.EXTERNAL_FIRE="EXTERNAL_FIRE",IfcInternalOrExternalEnum.NOTDEFINED="NOTDEFINED";var IfcInventoryTypeEnum=class{constructor(v){this.value=v}};IfcInventoryTypeEnum.ASSETINVENTORY="ASSETINVENTORY",IfcInventoryTypeEnum.SPACEINVENTORY="SPACEINVENTORY",IfcInventoryTypeEnum.FURNITUREINVENTORY="FURNITUREINVENTORY",IfcInventoryTypeEnum.USERDEFINED="USERDEFINED",IfcInventoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcJunctionBoxTypeEnum=class{constructor(v){this.value=v}};IfcJunctionBoxTypeEnum.DATA="DATA",IfcJunctionBoxTypeEnum.POWER="POWER",IfcJunctionBoxTypeEnum.USERDEFINED="USERDEFINED",IfcJunctionBoxTypeEnum.NOTDEFINED="NOTDEFINED";var IfcKnotType=class{constructor(v){this.value=v}};IfcKnotType.UNIFORM_KNOTS="UNIFORM_KNOTS",IfcKnotType.QUASI_UNIFORM_KNOTS="QUASI_UNIFORM_KNOTS",IfcKnotType.PIECEWISE_BEZIER_KNOTS="PIECEWISE_BEZIER_KNOTS",IfcKnotType.UNSPECIFIED="UNSPECIFIED";var IfcLaborResourceTypeEnum=class{constructor(v){this.value=v}};IfcLaborResourceTypeEnum.ADMINISTRATION="ADMINISTRATION",IfcLaborResourceTypeEnum.CARPENTRY="CARPENTRY",IfcLaborResourceTypeEnum.CLEANING="CLEANING",IfcLaborResourceTypeEnum.CONCRETE="CONCRETE",IfcLaborResourceTypeEnum.DRYWALL="DRYWALL",IfcLaborResourceTypeEnum.ELECTRIC="ELECTRIC",IfcLaborResourceTypeEnum.FINISHING="FINISHING",IfcLaborResourceTypeEnum.FLOORING="FLOORING",IfcLaborResourceTypeEnum.GENERAL="GENERAL",IfcLaborResourceTypeEnum.HVAC="HVAC",IfcLaborResourceTypeEnum.LANDSCAPING="LANDSCAPING",IfcLaborResourceTypeEnum.MASONRY="MASONRY",IfcLaborResourceTypeEnum.PAINTING="PAINTING",IfcLaborResourceTypeEnum.PAVING="PAVING",IfcLaborResourceTypeEnum.PLUMBING="PLUMBING",IfcLaborResourceTypeEnum.ROOFING="ROOFING",IfcLaborResourceTypeEnum.SITEGRADING="SITEGRADING",IfcLaborResourceTypeEnum.STEELWORK="STEELWORK",IfcLaborResourceTypeEnum.SURVEYING="SURVEYING",IfcLaborResourceTypeEnum.USERDEFINED="USERDEFINED",IfcLaborResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLampTypeEnum=class{constructor(v){this.value=v}};IfcLampTypeEnum.COMPACTFLUORESCENT="COMPACTFLUORESCENT",IfcLampTypeEnum.FLUORESCENT="FLUORESCENT",IfcLampTypeEnum.HALOGEN="HALOGEN",IfcLampTypeEnum.HIGHPRESSUREMERCURY="HIGHPRESSUREMERCURY",IfcLampTypeEnum.HIGHPRESSURESODIUM="HIGHPRESSURESODIUM",IfcLampTypeEnum.LED="LED",IfcLampTypeEnum.METALHALIDE="METALHALIDE",IfcLampTypeEnum.OLED="OLED",IfcLampTypeEnum.TUNGSTENFILAMENT="TUNGSTENFILAMENT",IfcLampTypeEnum.USERDEFINED="USERDEFINED",IfcLampTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLayerSetDirectionEnum=class{constructor(v){this.value=v}};IfcLayerSetDirectionEnum.AXIS1="AXIS1",IfcLayerSetDirectionEnum.AXIS2="AXIS2",IfcLayerSetDirectionEnum.AXIS3="AXIS3";var IfcLightDistributionCurveEnum=class{constructor(v){this.value=v}};IfcLightDistributionCurveEnum.TYPE_A="TYPE_A",IfcLightDistributionCurveEnum.TYPE_B="TYPE_B",IfcLightDistributionCurveEnum.TYPE_C="TYPE_C",IfcLightDistributionCurveEnum.NOTDEFINED="NOTDEFINED";var IfcLightEmissionSourceEnum=class{constructor(v){this.value=v}};IfcLightEmissionSourceEnum.COMPACTFLUORESCENT="COMPACTFLUORESCENT",IfcLightEmissionSourceEnum.FLUORESCENT="FLUORESCENT",IfcLightEmissionSourceEnum.HIGHPRESSUREMERCURY="HIGHPRESSUREMERCURY",IfcLightEmissionSourceEnum.HIGHPRESSURESODIUM="HIGHPRESSURESODIUM",IfcLightEmissionSourceEnum.LIGHTEMITTINGDIODE="LIGHTEMITTINGDIODE",IfcLightEmissionSourceEnum.LOWPRESSURESODIUM="LOWPRESSURESODIUM",IfcLightEmissionSourceEnum.LOWVOLTAGEHALOGEN="LOWVOLTAGEHALOGEN",IfcLightEmissionSourceEnum.MAINVOLTAGEHALOGEN="MAINVOLTAGEHALOGEN",IfcLightEmissionSourceEnum.METALHALIDE="METALHALIDE",IfcLightEmissionSourceEnum.TUNGSTENFILAMENT="TUNGSTENFILAMENT",IfcLightEmissionSourceEnum.NOTDEFINED="NOTDEFINED";var IfcLightFixtureTypeEnum=class{constructor(v){this.value=v}};IfcLightFixtureTypeEnum.POINTSOURCE="POINTSOURCE",IfcLightFixtureTypeEnum.DIRECTIONSOURCE="DIRECTIONSOURCE",IfcLightFixtureTypeEnum.SECURITYLIGHTING="SECURITYLIGHTING",IfcLightFixtureTypeEnum.USERDEFINED="USERDEFINED",IfcLightFixtureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLoadGroupTypeEnum=class{constructor(v){this.value=v}};IfcLoadGroupTypeEnum.LOAD_GROUP="LOAD_GROUP",IfcLoadGroupTypeEnum.LOAD_CASE="LOAD_CASE",IfcLoadGroupTypeEnum.LOAD_COMBINATION="LOAD_COMBINATION",IfcLoadGroupTypeEnum.USERDEFINED="USERDEFINED",IfcLoadGroupTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLogicalOperatorEnum=class{constructor(v){this.value=v}};IfcLogicalOperatorEnum.LOGICALAND="LOGICALAND",IfcLogicalOperatorEnum.LOGICALOR="LOGICALOR",IfcLogicalOperatorEnum.LOGICALXOR="LOGICALXOR",IfcLogicalOperatorEnum.LOGICALNOTAND="LOGICALNOTAND",IfcLogicalOperatorEnum.LOGICALNOTOR="LOGICALNOTOR";var IfcMechanicalFastenerTypeEnum=class{constructor(v){this.value=v}};IfcMechanicalFastenerTypeEnum.ANCHORBOLT="ANCHORBOLT",IfcMechanicalFastenerTypeEnum.BOLT="BOLT",IfcMechanicalFastenerTypeEnum.DOWEL="DOWEL",IfcMechanicalFastenerTypeEnum.NAIL="NAIL",IfcMechanicalFastenerTypeEnum.NAILPLATE="NAILPLATE",IfcMechanicalFastenerTypeEnum.RIVET="RIVET",IfcMechanicalFastenerTypeEnum.SCREW="SCREW",IfcMechanicalFastenerTypeEnum.SHEARCONNECTOR="SHEARCONNECTOR",IfcMechanicalFastenerTypeEnum.STAPLE="STAPLE",IfcMechanicalFastenerTypeEnum.STUDSHEARCONNECTOR="STUDSHEARCONNECTOR",IfcMechanicalFastenerTypeEnum.COUPLER="COUPLER",IfcMechanicalFastenerTypeEnum.USERDEFINED="USERDEFINED",IfcMechanicalFastenerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcMedicalDeviceTypeEnum=class{constructor(v){this.value=v}};IfcMedicalDeviceTypeEnum.AIRSTATION="AIRSTATION",IfcMedicalDeviceTypeEnum.FEEDAIRUNIT="FEEDAIRUNIT",IfcMedicalDeviceTypeEnum.OXYGENGENERATOR="OXYGENGENERATOR",IfcMedicalDeviceTypeEnum.OXYGENPLANT="OXYGENPLANT",IfcMedicalDeviceTypeEnum.VACUUMSTATION="VACUUMSTATION",IfcMedicalDeviceTypeEnum.USERDEFINED="USERDEFINED",IfcMedicalDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcMemberTypeEnum=class{constructor(v){this.value=v}};IfcMemberTypeEnum.BRACE="BRACE",IfcMemberTypeEnum.CHORD="CHORD",IfcMemberTypeEnum.COLLAR="COLLAR",IfcMemberTypeEnum.MEMBER="MEMBER",IfcMemberTypeEnum.MULLION="MULLION",IfcMemberTypeEnum.PLATE="PLATE",IfcMemberTypeEnum.POST="POST",IfcMemberTypeEnum.PURLIN="PURLIN",IfcMemberTypeEnum.RAFTER="RAFTER",IfcMemberTypeEnum.STRINGER="STRINGER",IfcMemberTypeEnum.STRUT="STRUT",IfcMemberTypeEnum.STUD="STUD",IfcMemberTypeEnum.STIFFENING_RIB="STIFFENING_RIB",IfcMemberTypeEnum.ARCH_SEGMENT="ARCH_SEGMENT",IfcMemberTypeEnum.SUSPENSION_CABLE="SUSPENSION_CABLE",IfcMemberTypeEnum.SUSPENDER="SUSPENDER",IfcMemberTypeEnum.STAY_CABLE="STAY_CABLE",IfcMemberTypeEnum.USERDEFINED="USERDEFINED",IfcMemberTypeEnum.NOTDEFINED="NOTDEFINED";var IfcMotorConnectionTypeEnum=class{constructor(v){this.value=v}};IfcMotorConnectionTypeEnum.BELTDRIVE="BELTDRIVE",IfcMotorConnectionTypeEnum.COUPLING="COUPLING",IfcMotorConnectionTypeEnum.DIRECTDRIVE="DIRECTDRIVE",IfcMotorConnectionTypeEnum.USERDEFINED="USERDEFINED",IfcMotorConnectionTypeEnum.NOTDEFINED="NOTDEFINED";var IfcNullStyle=class{constructor(v){this.value=v}};IfcNullStyle.NULL="NULL";var IfcObjectTypeEnum=class{constructor(v){this.value=v}};IfcObjectTypeEnum.PRODUCT="PRODUCT",IfcObjectTypeEnum.PROCESS="PROCESS",IfcObjectTypeEnum.CONTROL="CONTROL",IfcObjectTypeEnum.RESOURCE="RESOURCE",IfcObjectTypeEnum.ACTOR="ACTOR",IfcObjectTypeEnum.GROUP="GROUP",IfcObjectTypeEnum.PROJECT="PROJECT",IfcObjectTypeEnum.NOTDEFINED="NOTDEFINED";var IfcObjectiveEnum=class{constructor(v){this.value=v}};IfcObjectiveEnum.CODECOMPLIANCE="CODECOMPLIANCE",IfcObjectiveEnum.CODEWAIVER="CODEWAIVER",IfcObjectiveEnum.DESIGNINTENT="DESIGNINTENT",IfcObjectiveEnum.EXTERNAL="EXTERNAL",IfcObjectiveEnum.HEALTHANDSAFETY="HEALTHANDSAFETY",IfcObjectiveEnum.MERGECONFLICT="MERGECONFLICT",IfcObjectiveEnum.MODELVIEW="MODELVIEW",IfcObjectiveEnum.PARAMETER="PARAMETER",IfcObjectiveEnum.REQUIREMENT="REQUIREMENT",IfcObjectiveEnum.SPECIFICATION="SPECIFICATION",IfcObjectiveEnum.TRIGGERCONDITION="TRIGGERCONDITION",IfcObjectiveEnum.USERDEFINED="USERDEFINED",IfcObjectiveEnum.NOTDEFINED="NOTDEFINED";var IfcOccupantTypeEnum=class{constructor(v){this.value=v}};IfcOccupantTypeEnum.ASSIGNEE="ASSIGNEE",IfcOccupantTypeEnum.ASSIGNOR="ASSIGNOR",IfcOccupantTypeEnum.LESSEE="LESSEE",IfcOccupantTypeEnum.LESSOR="LESSOR",IfcOccupantTypeEnum.LETTINGAGENT="LETTINGAGENT",IfcOccupantTypeEnum.OWNER="OWNER",IfcOccupantTypeEnum.TENANT="TENANT",IfcOccupantTypeEnum.USERDEFINED="USERDEFINED",IfcOccupantTypeEnum.NOTDEFINED="NOTDEFINED";var IfcOpeningElementTypeEnum=class{constructor(v){this.value=v}};IfcOpeningElementTypeEnum.OPENING="OPENING",IfcOpeningElementTypeEnum.RECESS="RECESS",IfcOpeningElementTypeEnum.USERDEFINED="USERDEFINED",IfcOpeningElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcOutletTypeEnum=class{constructor(v){this.value=v}};IfcOutletTypeEnum.AUDIOVISUALOUTLET="AUDIOVISUALOUTLET",IfcOutletTypeEnum.COMMUNICATIONSOUTLET="COMMUNICATIONSOUTLET",IfcOutletTypeEnum.POWEROUTLET="POWEROUTLET",IfcOutletTypeEnum.DATAOUTLET="DATAOUTLET",IfcOutletTypeEnum.TELEPHONEOUTLET="TELEPHONEOUTLET",IfcOutletTypeEnum.USERDEFINED="USERDEFINED",IfcOutletTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPerformanceHistoryTypeEnum=class{constructor(v){this.value=v}};IfcPerformanceHistoryTypeEnum.USERDEFINED="USERDEFINED",IfcPerformanceHistoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPermeableCoveringOperationEnum=class{constructor(v){this.value=v}};IfcPermeableCoveringOperationEnum.GRILL="GRILL",IfcPermeableCoveringOperationEnum.LOUVER="LOUVER",IfcPermeableCoveringOperationEnum.SCREEN="SCREEN",IfcPermeableCoveringOperationEnum.USERDEFINED="USERDEFINED",IfcPermeableCoveringOperationEnum.NOTDEFINED="NOTDEFINED";var IfcPermitTypeEnum=class{constructor(v){this.value=v}};IfcPermitTypeEnum.ACCESS="ACCESS",IfcPermitTypeEnum.BUILDING="BUILDING",IfcPermitTypeEnum.WORK="WORK",IfcPermitTypeEnum.USERDEFINED="USERDEFINED",IfcPermitTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPhysicalOrVirtualEnum=class{constructor(v){this.value=v}};IfcPhysicalOrVirtualEnum.PHYSICAL="PHYSICAL",IfcPhysicalOrVirtualEnum.VIRTUAL="VIRTUAL",IfcPhysicalOrVirtualEnum.NOTDEFINED="NOTDEFINED";var IfcPileConstructionEnum=class{constructor(v){this.value=v}};IfcPileConstructionEnum.CAST_IN_PLACE="CAST_IN_PLACE",IfcPileConstructionEnum.COMPOSITE="COMPOSITE",IfcPileConstructionEnum.PRECAST_CONCRETE="PRECAST_CONCRETE",IfcPileConstructionEnum.PREFAB_STEEL="PREFAB_STEEL",IfcPileConstructionEnum.USERDEFINED="USERDEFINED",IfcPileConstructionEnum.NOTDEFINED="NOTDEFINED";var IfcPileTypeEnum=class{constructor(v){this.value=v}};IfcPileTypeEnum.BORED="BORED",IfcPileTypeEnum.DRIVEN="DRIVEN",IfcPileTypeEnum.JETGROUTING="JETGROUTING",IfcPileTypeEnum.COHESION="COHESION",IfcPileTypeEnum.FRICTION="FRICTION",IfcPileTypeEnum.SUPPORT="SUPPORT",IfcPileTypeEnum.USERDEFINED="USERDEFINED",IfcPileTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPipeFittingTypeEnum=class{constructor(v){this.value=v}};IfcPipeFittingTypeEnum.BEND="BEND",IfcPipeFittingTypeEnum.CONNECTOR="CONNECTOR",IfcPipeFittingTypeEnum.ENTRY="ENTRY",IfcPipeFittingTypeEnum.EXIT="EXIT",IfcPipeFittingTypeEnum.JUNCTION="JUNCTION",IfcPipeFittingTypeEnum.OBSTRUCTION="OBSTRUCTION",IfcPipeFittingTypeEnum.TRANSITION="TRANSITION",IfcPipeFittingTypeEnum.USERDEFINED="USERDEFINED",IfcPipeFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPipeSegmentTypeEnum=class{constructor(v){this.value=v}};IfcPipeSegmentTypeEnum.CULVERT="CULVERT",IfcPipeSegmentTypeEnum.FLEXIBLESEGMENT="FLEXIBLESEGMENT",IfcPipeSegmentTypeEnum.RIGIDSEGMENT="RIGIDSEGMENT",IfcPipeSegmentTypeEnum.GUTTER="GUTTER",IfcPipeSegmentTypeEnum.SPOOL="SPOOL",IfcPipeSegmentTypeEnum.USERDEFINED="USERDEFINED",IfcPipeSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPlateTypeEnum=class{constructor(v){this.value=v}};IfcPlateTypeEnum.CURTAIN_PANEL="CURTAIN_PANEL",IfcPlateTypeEnum.SHEET="SHEET",IfcPlateTypeEnum.FLANGE_PLATE="FLANGE_PLATE",IfcPlateTypeEnum.WEB_PLATE="WEB_PLATE",IfcPlateTypeEnum.STIFFENER_PLATE="STIFFENER_PLATE",IfcPlateTypeEnum.GUSSET_PLATE="GUSSET_PLATE",IfcPlateTypeEnum.COVER_PLATE="COVER_PLATE",IfcPlateTypeEnum.SPLICE_PLATE="SPLICE_PLATE",IfcPlateTypeEnum.BASE_PLATE="BASE_PLATE",IfcPlateTypeEnum.USERDEFINED="USERDEFINED",IfcPlateTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPreferredSurfaceCurveRepresentation=class{constructor(v){this.value=v}};IfcPreferredSurfaceCurveRepresentation.CURVE3D="CURVE3D",IfcPreferredSurfaceCurveRepresentation.PCURVE_S1="PCURVE_S1",IfcPreferredSurfaceCurveRepresentation.PCURVE_S2="PCURVE_S2";var IfcProcedureTypeEnum=class{constructor(v){this.value=v}};IfcProcedureTypeEnum.ADVICE_CAUTION="ADVICE_CAUTION",IfcProcedureTypeEnum.ADVICE_NOTE="ADVICE_NOTE",IfcProcedureTypeEnum.ADVICE_WARNING="ADVICE_WARNING",IfcProcedureTypeEnum.CALIBRATION="CALIBRATION",IfcProcedureTypeEnum.DIAGNOSTIC="DIAGNOSTIC",IfcProcedureTypeEnum.SHUTDOWN="SHUTDOWN",IfcProcedureTypeEnum.STARTUP="STARTUP",IfcProcedureTypeEnum.USERDEFINED="USERDEFINED",IfcProcedureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProfileTypeEnum=class{constructor(v){this.value=v}};IfcProfileTypeEnum.CURVE="CURVE",IfcProfileTypeEnum.AREA="AREA";var IfcProjectOrderTypeEnum=class{constructor(v){this.value=v}};IfcProjectOrderTypeEnum.CHANGEORDER="CHANGEORDER",IfcProjectOrderTypeEnum.MAINTENANCEWORKORDER="MAINTENANCEWORKORDER",IfcProjectOrderTypeEnum.MOVEORDER="MOVEORDER",IfcProjectOrderTypeEnum.PURCHASEORDER="PURCHASEORDER",IfcProjectOrderTypeEnum.WORKORDER="WORKORDER",IfcProjectOrderTypeEnum.USERDEFINED="USERDEFINED",IfcProjectOrderTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProjectedOrTrueLengthEnum=class{constructor(v){this.value=v}};IfcProjectedOrTrueLengthEnum.PROJECTED_LENGTH="PROJECTED_LENGTH",IfcProjectedOrTrueLengthEnum.TRUE_LENGTH="TRUE_LENGTH";var IfcProjectionElementTypeEnum=class{constructor(v){this.value=v}};IfcProjectionElementTypeEnum.BLISTER="BLISTER",IfcProjectionElementTypeEnum.DEVIATOR="DEVIATOR",IfcProjectionElementTypeEnum.USERDEFINED="USERDEFINED",IfcProjectionElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPropertySetTemplateTypeEnum=class{constructor(v){this.value=v}};IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENONLY="PSET_TYPEDRIVENONLY",IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENOVERRIDE="PSET_TYPEDRIVENOVERRIDE",IfcPropertySetTemplateTypeEnum.PSET_OCCURRENCEDRIVEN="PSET_OCCURRENCEDRIVEN",IfcPropertySetTemplateTypeEnum.PSET_PERFORMANCEDRIVEN="PSET_PERFORMANCEDRIVEN",IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENONLY="QTO_TYPEDRIVENONLY",IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENOVERRIDE="QTO_TYPEDRIVENOVERRIDE",IfcPropertySetTemplateTypeEnum.QTO_OCCURRENCEDRIVEN="QTO_OCCURRENCEDRIVEN",IfcPropertySetTemplateTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProtectiveDeviceTrippingUnitTypeEnum=class{constructor(v){this.value=v}};IfcProtectiveDeviceTrippingUnitTypeEnum.ELECTRONIC="ELECTRONIC",IfcProtectiveDeviceTrippingUnitTypeEnum.ELECTROMAGNETIC="ELECTROMAGNETIC",IfcProtectiveDeviceTrippingUnitTypeEnum.RESIDUALCURRENT="RESIDUALCURRENT",IfcProtectiveDeviceTrippingUnitTypeEnum.THERMAL="THERMAL",IfcProtectiveDeviceTrippingUnitTypeEnum.USERDEFINED="USERDEFINED",IfcProtectiveDeviceTrippingUnitTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProtectiveDeviceTypeEnum=class{constructor(v){this.value=v}};IfcProtectiveDeviceTypeEnum.CIRCUITBREAKER="CIRCUITBREAKER",IfcProtectiveDeviceTypeEnum.EARTHLEAKAGECIRCUITBREAKER="EARTHLEAKAGECIRCUITBREAKER",IfcProtectiveDeviceTypeEnum.EARTHINGSWITCH="EARTHINGSWITCH",IfcProtectiveDeviceTypeEnum.FUSEDISCONNECTOR="FUSEDISCONNECTOR",IfcProtectiveDeviceTypeEnum.RESIDUALCURRENTCIRCUITBREAKER="RESIDUALCURRENTCIRCUITBREAKER",IfcProtectiveDeviceTypeEnum.RESIDUALCURRENTSWITCH="RESIDUALCURRENTSWITCH",IfcProtectiveDeviceTypeEnum.VARISTOR="VARISTOR",IfcProtectiveDeviceTypeEnum.USERDEFINED="USERDEFINED",IfcProtectiveDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPumpTypeEnum=class{constructor(v){this.value=v}};IfcPumpTypeEnum.CIRCULATOR="CIRCULATOR",IfcPumpTypeEnum.ENDSUCTION="ENDSUCTION",IfcPumpTypeEnum.SPLITCASE="SPLITCASE",IfcPumpTypeEnum.SUBMERSIBLEPUMP="SUBMERSIBLEPUMP",IfcPumpTypeEnum.SUMPPUMP="SUMPPUMP",IfcPumpTypeEnum.VERTICALINLINE="VERTICALINLINE",IfcPumpTypeEnum.VERTICALTURBINE="VERTICALTURBINE",IfcPumpTypeEnum.USERDEFINED="USERDEFINED",IfcPumpTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRailingTypeEnum=class{constructor(v){this.value=v}};IfcRailingTypeEnum.HANDRAIL="HANDRAIL",IfcRailingTypeEnum.GUARDRAIL="GUARDRAIL",IfcRailingTypeEnum.BALUSTRADE="BALUSTRADE",IfcRailingTypeEnum.USERDEFINED="USERDEFINED",IfcRailingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRampFlightTypeEnum=class{constructor(v){this.value=v}};IfcRampFlightTypeEnum.STRAIGHT="STRAIGHT",IfcRampFlightTypeEnum.SPIRAL="SPIRAL",IfcRampFlightTypeEnum.USERDEFINED="USERDEFINED",IfcRampFlightTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRampTypeEnum=class{constructor(v){this.value=v}};IfcRampTypeEnum.STRAIGHT_RUN_RAMP="STRAIGHT_RUN_RAMP",IfcRampTypeEnum.TWO_STRAIGHT_RUN_RAMP="TWO_STRAIGHT_RUN_RAMP",IfcRampTypeEnum.QUARTER_TURN_RAMP="QUARTER_TURN_RAMP",IfcRampTypeEnum.TWO_QUARTER_TURN_RAMP="TWO_QUARTER_TURN_RAMP",IfcRampTypeEnum.HALF_TURN_RAMP="HALF_TURN_RAMP",IfcRampTypeEnum.SPIRAL_RAMP="SPIRAL_RAMP",IfcRampTypeEnum.USERDEFINED="USERDEFINED",IfcRampTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRecurrenceTypeEnum=class{constructor(v){this.value=v}};IfcRecurrenceTypeEnum.DAILY="DAILY",IfcRecurrenceTypeEnum.WEEKLY="WEEKLY",IfcRecurrenceTypeEnum.MONTHLY_BY_DAY_OF_MONTH="MONTHLY_BY_DAY_OF_MONTH",IfcRecurrenceTypeEnum.MONTHLY_BY_POSITION="MONTHLY_BY_POSITION",IfcRecurrenceTypeEnum.BY_DAY_COUNT="BY_DAY_COUNT",IfcRecurrenceTypeEnum.BY_WEEKDAY_COUNT="BY_WEEKDAY_COUNT",IfcRecurrenceTypeEnum.YEARLY_BY_DAY_OF_MONTH="YEARLY_BY_DAY_OF_MONTH",IfcRecurrenceTypeEnum.YEARLY_BY_POSITION="YEARLY_BY_POSITION";var IfcReferentTypeEnum=class{constructor(v){this.value=v}};IfcReferentTypeEnum.KILOPOINT="KILOPOINT",IfcReferentTypeEnum.MILEPOINT="MILEPOINT",IfcReferentTypeEnum.STATION="STATION",IfcReferentTypeEnum.USERDEFINED="USERDEFINED",IfcReferentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcReflectanceMethodEnum=class{constructor(v){this.value=v}};IfcReflectanceMethodEnum.BLINN="BLINN",IfcReflectanceMethodEnum.FLAT="FLAT",IfcReflectanceMethodEnum.GLASS="GLASS",IfcReflectanceMethodEnum.MATT="MATT",IfcReflectanceMethodEnum.METAL="METAL",IfcReflectanceMethodEnum.MIRROR="MIRROR",IfcReflectanceMethodEnum.PHONG="PHONG",IfcReflectanceMethodEnum.PLASTIC="PLASTIC",IfcReflectanceMethodEnum.STRAUSS="STRAUSS",IfcReflectanceMethodEnum.NOTDEFINED="NOTDEFINED";var IfcReinforcingBarRoleEnum=class{constructor(v){this.value=v}};IfcReinforcingBarRoleEnum.MAIN="MAIN",IfcReinforcingBarRoleEnum.SHEAR="SHEAR",IfcReinforcingBarRoleEnum.LIGATURE="LIGATURE",IfcReinforcingBarRoleEnum.STUD="STUD",IfcReinforcingBarRoleEnum.PUNCHING="PUNCHING",IfcReinforcingBarRoleEnum.EDGE="EDGE",IfcReinforcingBarRoleEnum.RING="RING",IfcReinforcingBarRoleEnum.ANCHORING="ANCHORING",IfcReinforcingBarRoleEnum.USERDEFINED="USERDEFINED",IfcReinforcingBarRoleEnum.NOTDEFINED="NOTDEFINED";var IfcReinforcingBarSurfaceEnum=class{constructor(v){this.value=v}};IfcReinforcingBarSurfaceEnum.PLAIN="PLAIN",IfcReinforcingBarSurfaceEnum.TEXTURED="TEXTURED";var IfcReinforcingBarTypeEnum=class{constructor(v){this.value=v}};IfcReinforcingBarTypeEnum.ANCHORING="ANCHORING",IfcReinforcingBarTypeEnum.EDGE="EDGE",IfcReinforcingBarTypeEnum.LIGATURE="LIGATURE",IfcReinforcingBarTypeEnum.MAIN="MAIN",IfcReinforcingBarTypeEnum.PUNCHING="PUNCHING",IfcReinforcingBarTypeEnum.RING="RING",IfcReinforcingBarTypeEnum.SHEAR="SHEAR",IfcReinforcingBarTypeEnum.STUD="STUD",IfcReinforcingBarTypeEnum.SPACEBAR="SPACEBAR",IfcReinforcingBarTypeEnum.USERDEFINED="USERDEFINED",IfcReinforcingBarTypeEnum.NOTDEFINED="NOTDEFINED";var IfcReinforcingMeshTypeEnum=class{constructor(v){this.value=v}};IfcReinforcingMeshTypeEnum.USERDEFINED="USERDEFINED",IfcReinforcingMeshTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRoleEnum=class{constructor(v){this.value=v}};IfcRoleEnum.SUPPLIER="SUPPLIER",IfcRoleEnum.MANUFACTURER="MANUFACTURER",IfcRoleEnum.CONTRACTOR="CONTRACTOR",IfcRoleEnum.SUBCONTRACTOR="SUBCONTRACTOR",IfcRoleEnum.ARCHITECT="ARCHITECT",IfcRoleEnum.STRUCTURALENGINEER="STRUCTURALENGINEER",IfcRoleEnum.COSTENGINEER="COSTENGINEER",IfcRoleEnum.CLIENT="CLIENT",IfcRoleEnum.BUILDINGOWNER="BUILDINGOWNER",IfcRoleEnum.BUILDINGOPERATOR="BUILDINGOPERATOR",IfcRoleEnum.MECHANICALENGINEER="MECHANICALENGINEER",IfcRoleEnum.ELECTRICALENGINEER="ELECTRICALENGINEER",IfcRoleEnum.PROJECTMANAGER="PROJECTMANAGER",IfcRoleEnum.FACILITIESMANAGER="FACILITIESMANAGER",IfcRoleEnum.CIVILENGINEER="CIVILENGINEER",IfcRoleEnum.COMMISSIONINGENGINEER="COMMISSIONINGENGINEER",IfcRoleEnum.ENGINEER="ENGINEER",IfcRoleEnum.OWNER="OWNER",IfcRoleEnum.CONSULTANT="CONSULTANT",IfcRoleEnum.CONSTRUCTIONMANAGER="CONSTRUCTIONMANAGER",IfcRoleEnum.FIELDCONSTRUCTIONMANAGER="FIELDCONSTRUCTIONMANAGER",IfcRoleEnum.RESELLER="RESELLER",IfcRoleEnum.USERDEFINED="USERDEFINED";var IfcRoofTypeEnum=class{constructor(v){this.value=v}};IfcRoofTypeEnum.FLAT_ROOF="FLAT_ROOF",IfcRoofTypeEnum.SHED_ROOF="SHED_ROOF",IfcRoofTypeEnum.GABLE_ROOF="GABLE_ROOF",IfcRoofTypeEnum.HIP_ROOF="HIP_ROOF",IfcRoofTypeEnum.HIPPED_GABLE_ROOF="HIPPED_GABLE_ROOF",IfcRoofTypeEnum.GAMBREL_ROOF="GAMBREL_ROOF",IfcRoofTypeEnum.MANSARD_ROOF="MANSARD_ROOF",IfcRoofTypeEnum.BARREL_ROOF="BARREL_ROOF",IfcRoofTypeEnum.RAINBOW_ROOF="RAINBOW_ROOF",IfcRoofTypeEnum.BUTTERFLY_ROOF="BUTTERFLY_ROOF",IfcRoofTypeEnum.PAVILION_ROOF="PAVILION_ROOF",IfcRoofTypeEnum.DOME_ROOF="DOME_ROOF",IfcRoofTypeEnum.FREEFORM="FREEFORM",IfcRoofTypeEnum.USERDEFINED="USERDEFINED",IfcRoofTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSIPrefix=class{constructor(v){this.value=v}};IfcSIPrefix.EXA="EXA",IfcSIPrefix.PETA="PETA",IfcSIPrefix.TERA="TERA",IfcSIPrefix.GIGA="GIGA",IfcSIPrefix.MEGA="MEGA",IfcSIPrefix.KILO="KILO",IfcSIPrefix.HECTO="HECTO",IfcSIPrefix.DECA="DECA",IfcSIPrefix.DECI="DECI",IfcSIPrefix.CENTI="CENTI",IfcSIPrefix.MILLI="MILLI",IfcSIPrefix.MICRO="MICRO",IfcSIPrefix.NANO="NANO",IfcSIPrefix.PICO="PICO",IfcSIPrefix.FEMTO="FEMTO",IfcSIPrefix.ATTO="ATTO";var IfcSIUnitName=class{constructor(v){this.value=v}};IfcSIUnitName.AMPERE="AMPERE",IfcSIUnitName.BECQUEREL="BECQUEREL",IfcSIUnitName.CANDELA="CANDELA",IfcSIUnitName.COULOMB="COULOMB",IfcSIUnitName.CUBIC_METRE="CUBIC_METRE",IfcSIUnitName.DEGREE_CELSIUS="DEGREE_CELSIUS",IfcSIUnitName.FARAD="FARAD",IfcSIUnitName.GRAM="GRAM",IfcSIUnitName.GRAY="GRAY",IfcSIUnitName.HENRY="HENRY",IfcSIUnitName.HERTZ="HERTZ",IfcSIUnitName.JOULE="JOULE",IfcSIUnitName.KELVIN="KELVIN",IfcSIUnitName.LUMEN="LUMEN",IfcSIUnitName.LUX="LUX",IfcSIUnitName.METRE="METRE",IfcSIUnitName.MOLE="MOLE",IfcSIUnitName.NEWTON="NEWTON",IfcSIUnitName.OHM="OHM",IfcSIUnitName.PASCAL="PASCAL",IfcSIUnitName.RADIAN="RADIAN",IfcSIUnitName.SECOND="SECOND",IfcSIUnitName.SIEMENS="SIEMENS",IfcSIUnitName.SIEVERT="SIEVERT",IfcSIUnitName.SQUARE_METRE="SQUARE_METRE",IfcSIUnitName.STERADIAN="STERADIAN",IfcSIUnitName.TESLA="TESLA",IfcSIUnitName.VOLT="VOLT",IfcSIUnitName.WATT="WATT",IfcSIUnitName.WEBER="WEBER";var IfcSanitaryTerminalTypeEnum=class{constructor(v){this.value=v}};IfcSanitaryTerminalTypeEnum.BATH="BATH",IfcSanitaryTerminalTypeEnum.BIDET="BIDET",IfcSanitaryTerminalTypeEnum.CISTERN="CISTERN",IfcSanitaryTerminalTypeEnum.SHOWER="SHOWER",IfcSanitaryTerminalTypeEnum.SINK="SINK",IfcSanitaryTerminalTypeEnum.SANITARYFOUNTAIN="SANITARYFOUNTAIN",IfcSanitaryTerminalTypeEnum.TOILETPAN="TOILETPAN",IfcSanitaryTerminalTypeEnum.URINAL="URINAL",IfcSanitaryTerminalTypeEnum.WASHHANDBASIN="WASHHANDBASIN",IfcSanitaryTerminalTypeEnum.WCSEAT="WCSEAT",IfcSanitaryTerminalTypeEnum.USERDEFINED="USERDEFINED",IfcSanitaryTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSectionTypeEnum=class{constructor(v){this.value=v}};IfcSectionTypeEnum.UNIFORM="UNIFORM",IfcSectionTypeEnum.TAPERED="TAPERED";var IfcSensorTypeEnum=class{constructor(v){this.value=v}};IfcSensorTypeEnum.COSENSOR="COSENSOR",IfcSensorTypeEnum.CO2SENSOR="CO2SENSOR",IfcSensorTypeEnum.CONDUCTANCESENSOR="CONDUCTANCESENSOR",IfcSensorTypeEnum.CONTACTSENSOR="CONTACTSENSOR",IfcSensorTypeEnum.FIRESENSOR="FIRESENSOR",IfcSensorTypeEnum.FLOWSENSOR="FLOWSENSOR",IfcSensorTypeEnum.FROSTSENSOR="FROSTSENSOR",IfcSensorTypeEnum.GASSENSOR="GASSENSOR",IfcSensorTypeEnum.HEATSENSOR="HEATSENSOR",IfcSensorTypeEnum.HUMIDITYSENSOR="HUMIDITYSENSOR",IfcSensorTypeEnum.IDENTIFIERSENSOR="IDENTIFIERSENSOR",IfcSensorTypeEnum.IONCONCENTRATIONSENSOR="IONCONCENTRATIONSENSOR",IfcSensorTypeEnum.LEVELSENSOR="LEVELSENSOR",IfcSensorTypeEnum.LIGHTSENSOR="LIGHTSENSOR",IfcSensorTypeEnum.MOISTURESENSOR="MOISTURESENSOR",IfcSensorTypeEnum.MOVEMENTSENSOR="MOVEMENTSENSOR",IfcSensorTypeEnum.PHSENSOR="PHSENSOR",IfcSensorTypeEnum.PRESSURESENSOR="PRESSURESENSOR",IfcSensorTypeEnum.RADIATIONSENSOR="RADIATIONSENSOR",IfcSensorTypeEnum.RADIOACTIVITYSENSOR="RADIOACTIVITYSENSOR",IfcSensorTypeEnum.SMOKESENSOR="SMOKESENSOR",IfcSensorTypeEnum.SOUNDSENSOR="SOUNDSENSOR",IfcSensorTypeEnum.TEMPERATURESENSOR="TEMPERATURESENSOR",IfcSensorTypeEnum.WINDSENSOR="WINDSENSOR",IfcSensorTypeEnum.USERDEFINED="USERDEFINED",IfcSensorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSequenceEnum=class{constructor(v){this.value=v}};IfcSequenceEnum.START_START="START_START",IfcSequenceEnum.START_FINISH="START_FINISH",IfcSequenceEnum.FINISH_START="FINISH_START",IfcSequenceEnum.FINISH_FINISH="FINISH_FINISH",IfcSequenceEnum.USERDEFINED="USERDEFINED",IfcSequenceEnum.NOTDEFINED="NOTDEFINED";var IfcShadingDeviceTypeEnum=class{constructor(v){this.value=v}};IfcShadingDeviceTypeEnum.JALOUSIE="JALOUSIE",IfcShadingDeviceTypeEnum.SHUTTER="SHUTTER",IfcShadingDeviceTypeEnum.AWNING="AWNING",IfcShadingDeviceTypeEnum.USERDEFINED="USERDEFINED",IfcShadingDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSimplePropertyTemplateTypeEnum=class{constructor(v){this.value=v}};IfcSimplePropertyTemplateTypeEnum.P_SINGLEVALUE="P_SINGLEVALUE",IfcSimplePropertyTemplateTypeEnum.P_ENUMERATEDVALUE="P_ENUMERATEDVALUE",IfcSimplePropertyTemplateTypeEnum.P_BOUNDEDVALUE="P_BOUNDEDVALUE",IfcSimplePropertyTemplateTypeEnum.P_LISTVALUE="P_LISTVALUE",IfcSimplePropertyTemplateTypeEnum.P_TABLEVALUE="P_TABLEVALUE",IfcSimplePropertyTemplateTypeEnum.P_REFERENCEVALUE="P_REFERENCEVALUE",IfcSimplePropertyTemplateTypeEnum.Q_LENGTH="Q_LENGTH",IfcSimplePropertyTemplateTypeEnum.Q_AREA="Q_AREA",IfcSimplePropertyTemplateTypeEnum.Q_VOLUME="Q_VOLUME",IfcSimplePropertyTemplateTypeEnum.Q_COUNT="Q_COUNT",IfcSimplePropertyTemplateTypeEnum.Q_WEIGHT="Q_WEIGHT",IfcSimplePropertyTemplateTypeEnum.Q_TIME="Q_TIME";var IfcSlabTypeEnum=class{constructor(v){this.value=v}};IfcSlabTypeEnum.FLOOR="FLOOR",IfcSlabTypeEnum.ROOF="ROOF",IfcSlabTypeEnum.LANDING="LANDING",IfcSlabTypeEnum.BASESLAB="BASESLAB",IfcSlabTypeEnum.APPROACH_SLAB="APPROACH_SLAB",IfcSlabTypeEnum.PAVING="PAVING",IfcSlabTypeEnum.WEARING="WEARING",IfcSlabTypeEnum.SIDEWALK="SIDEWALK",IfcSlabTypeEnum.USERDEFINED="USERDEFINED",IfcSlabTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSolarDeviceTypeEnum=class{constructor(v){this.value=v}};IfcSolarDeviceTypeEnum.SOLARCOLLECTOR="SOLARCOLLECTOR",IfcSolarDeviceTypeEnum.SOLARPANEL="SOLARPANEL",IfcSolarDeviceTypeEnum.USERDEFINED="USERDEFINED",IfcSolarDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSpaceHeaterTypeEnum=class{constructor(v){this.value=v}};IfcSpaceHeaterTypeEnum.CONVECTOR="CONVECTOR",IfcSpaceHeaterTypeEnum.RADIATOR="RADIATOR",IfcSpaceHeaterTypeEnum.USERDEFINED="USERDEFINED",IfcSpaceHeaterTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSpaceTypeEnum=class{constructor(v){this.value=v}};IfcSpaceTypeEnum.SPACE="SPACE",IfcSpaceTypeEnum.PARKING="PARKING",IfcSpaceTypeEnum.GFA="GFA",IfcSpaceTypeEnum.INTERNAL="INTERNAL",IfcSpaceTypeEnum.EXTERNAL="EXTERNAL",IfcSpaceTypeEnum.USERDEFINED="USERDEFINED",IfcSpaceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSpatialZoneTypeEnum=class{constructor(v){this.value=v}};IfcSpatialZoneTypeEnum.CONSTRUCTION="CONSTRUCTION",IfcSpatialZoneTypeEnum.FIRESAFETY="FIRESAFETY",IfcSpatialZoneTypeEnum.LIGHTING="LIGHTING",IfcSpatialZoneTypeEnum.OCCUPANCY="OCCUPANCY",IfcSpatialZoneTypeEnum.SECURITY="SECURITY",IfcSpatialZoneTypeEnum.THERMAL="THERMAL",IfcSpatialZoneTypeEnum.TRANSPORT="TRANSPORT",IfcSpatialZoneTypeEnum.VENTILATION="VENTILATION",IfcSpatialZoneTypeEnum.USERDEFINED="USERDEFINED",IfcSpatialZoneTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStackTerminalTypeEnum=class{constructor(v){this.value=v}};IfcStackTerminalTypeEnum.BIRDCAGE="BIRDCAGE",IfcStackTerminalTypeEnum.COWL="COWL",IfcStackTerminalTypeEnum.RAINWATERHOPPER="RAINWATERHOPPER",IfcStackTerminalTypeEnum.USERDEFINED="USERDEFINED",IfcStackTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStairFlightTypeEnum=class{constructor(v){this.value=v}};IfcStairFlightTypeEnum.STRAIGHT="STRAIGHT",IfcStairFlightTypeEnum.WINDER="WINDER",IfcStairFlightTypeEnum.SPIRAL="SPIRAL",IfcStairFlightTypeEnum.CURVED="CURVED",IfcStairFlightTypeEnum.FREEFORM="FREEFORM",IfcStairFlightTypeEnum.USERDEFINED="USERDEFINED",IfcStairFlightTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStairTypeEnum=class{constructor(v){this.value=v}};IfcStairTypeEnum.STRAIGHT_RUN_STAIR="STRAIGHT_RUN_STAIR",IfcStairTypeEnum.TWO_STRAIGHT_RUN_STAIR="TWO_STRAIGHT_RUN_STAIR",IfcStairTypeEnum.QUARTER_WINDING_STAIR="QUARTER_WINDING_STAIR",IfcStairTypeEnum.QUARTER_TURN_STAIR="QUARTER_TURN_STAIR",IfcStairTypeEnum.HALF_WINDING_STAIR="HALF_WINDING_STAIR",IfcStairTypeEnum.HALF_TURN_STAIR="HALF_TURN_STAIR",IfcStairTypeEnum.TWO_QUARTER_WINDING_STAIR="TWO_QUARTER_WINDING_STAIR",IfcStairTypeEnum.TWO_QUARTER_TURN_STAIR="TWO_QUARTER_TURN_STAIR",IfcStairTypeEnum.THREE_QUARTER_WINDING_STAIR="THREE_QUARTER_WINDING_STAIR",IfcStairTypeEnum.THREE_QUARTER_TURN_STAIR="THREE_QUARTER_TURN_STAIR",IfcStairTypeEnum.SPIRAL_STAIR="SPIRAL_STAIR",IfcStairTypeEnum.DOUBLE_RETURN_STAIR="DOUBLE_RETURN_STAIR",IfcStairTypeEnum.CURVED_RUN_STAIR="CURVED_RUN_STAIR",IfcStairTypeEnum.TWO_CURVED_RUN_STAIR="TWO_CURVED_RUN_STAIR",IfcStairTypeEnum.USERDEFINED="USERDEFINED",IfcStairTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStateEnum=class{constructor(v){this.value=v}};IfcStateEnum.READWRITE="READWRITE",IfcStateEnum.READONLY="READONLY",IfcStateEnum.LOCKED="LOCKED",IfcStateEnum.READWRITELOCKED="READWRITELOCKED",IfcStateEnum.READONLYLOCKED="READONLYLOCKED";var IfcStructuralCurveActivityTypeEnum=class{constructor(v){this.value=v}};IfcStructuralCurveActivityTypeEnum.CONST="CONST",IfcStructuralCurveActivityTypeEnum.LINEAR="LINEAR",IfcStructuralCurveActivityTypeEnum.POLYGONAL="POLYGONAL",IfcStructuralCurveActivityTypeEnum.EQUIDISTANT="EQUIDISTANT",IfcStructuralCurveActivityTypeEnum.SINUS="SINUS",IfcStructuralCurveActivityTypeEnum.PARABOLA="PARABOLA",IfcStructuralCurveActivityTypeEnum.DISCRETE="DISCRETE",IfcStructuralCurveActivityTypeEnum.USERDEFINED="USERDEFINED",IfcStructuralCurveActivityTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStructuralCurveMemberTypeEnum=class{constructor(v){this.value=v}};IfcStructuralCurveMemberTypeEnum.RIGID_JOINED_MEMBER="RIGID_JOINED_MEMBER",IfcStructuralCurveMemberTypeEnum.PIN_JOINED_MEMBER="PIN_JOINED_MEMBER",IfcStructuralCurveMemberTypeEnum.CABLE="CABLE",IfcStructuralCurveMemberTypeEnum.TENSION_MEMBER="TENSION_MEMBER",IfcStructuralCurveMemberTypeEnum.COMPRESSION_MEMBER="COMPRESSION_MEMBER",IfcStructuralCurveMemberTypeEnum.USERDEFINED="USERDEFINED",IfcStructuralCurveMemberTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStructuralSurfaceActivityTypeEnum=class{constructor(v){this.value=v}};IfcStructuralSurfaceActivityTypeEnum.CONST="CONST",IfcStructuralSurfaceActivityTypeEnum.BILINEAR="BILINEAR",IfcStructuralSurfaceActivityTypeEnum.DISCRETE="DISCRETE",IfcStructuralSurfaceActivityTypeEnum.ISOCONTOUR="ISOCONTOUR",IfcStructuralSurfaceActivityTypeEnum.USERDEFINED="USERDEFINED",IfcStructuralSurfaceActivityTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStructuralSurfaceMemberTypeEnum=class{constructor(v){this.value=v}};IfcStructuralSurfaceMemberTypeEnum.BENDING_ELEMENT="BENDING_ELEMENT",IfcStructuralSurfaceMemberTypeEnum.MEMBRANE_ELEMENT="MEMBRANE_ELEMENT",IfcStructuralSurfaceMemberTypeEnum.SHELL="SHELL",IfcStructuralSurfaceMemberTypeEnum.USERDEFINED="USERDEFINED",IfcStructuralSurfaceMemberTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSubContractResourceTypeEnum=class{constructor(v){this.value=v}};IfcSubContractResourceTypeEnum.PURCHASE="PURCHASE",IfcSubContractResourceTypeEnum.WORK="WORK",IfcSubContractResourceTypeEnum.USERDEFINED="USERDEFINED",IfcSubContractResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSurfaceFeatureTypeEnum=class{constructor(v){this.value=v}};IfcSurfaceFeatureTypeEnum.MARK="MARK",IfcSurfaceFeatureTypeEnum.TAG="TAG",IfcSurfaceFeatureTypeEnum.TREATMENT="TREATMENT",IfcSurfaceFeatureTypeEnum.DEFECT="DEFECT",IfcSurfaceFeatureTypeEnum.USERDEFINED="USERDEFINED",IfcSurfaceFeatureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSurfaceSide=class{constructor(v){this.value=v}};IfcSurfaceSide.POSITIVE="POSITIVE",IfcSurfaceSide.NEGATIVE="NEGATIVE",IfcSurfaceSide.BOTH="BOTH";var IfcSwitchingDeviceTypeEnum=class{constructor(v){this.value=v}};IfcSwitchingDeviceTypeEnum.CONTACTOR="CONTACTOR",IfcSwitchingDeviceTypeEnum.DIMMERSWITCH="DIMMERSWITCH",IfcSwitchingDeviceTypeEnum.EMERGENCYSTOP="EMERGENCYSTOP",IfcSwitchingDeviceTypeEnum.KEYPAD="KEYPAD",IfcSwitchingDeviceTypeEnum.MOMENTARYSWITCH="MOMENTARYSWITCH",IfcSwitchingDeviceTypeEnum.SELECTORSWITCH="SELECTORSWITCH",IfcSwitchingDeviceTypeEnum.STARTER="STARTER",IfcSwitchingDeviceTypeEnum.SWITCHDISCONNECTOR="SWITCHDISCONNECTOR",IfcSwitchingDeviceTypeEnum.TOGGLESWITCH="TOGGLESWITCH",IfcSwitchingDeviceTypeEnum.USERDEFINED="USERDEFINED",IfcSwitchingDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSystemFurnitureElementTypeEnum=class{constructor(v){this.value=v}};IfcSystemFurnitureElementTypeEnum.PANEL="PANEL",IfcSystemFurnitureElementTypeEnum.WORKSURFACE="WORKSURFACE",IfcSystemFurnitureElementTypeEnum.USERDEFINED="USERDEFINED",IfcSystemFurnitureElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTankTypeEnum=class{constructor(v){this.value=v}};IfcTankTypeEnum.BASIN="BASIN",IfcTankTypeEnum.BREAKPRESSURE="BREAKPRESSURE",IfcTankTypeEnum.EXPANSION="EXPANSION",IfcTankTypeEnum.FEEDANDEXPANSION="FEEDANDEXPANSION",IfcTankTypeEnum.PRESSUREVESSEL="PRESSUREVESSEL",IfcTankTypeEnum.STORAGE="STORAGE",IfcTankTypeEnum.VESSEL="VESSEL",IfcTankTypeEnum.USERDEFINED="USERDEFINED",IfcTankTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTaskDurationEnum=class{constructor(v){this.value=v}};IfcTaskDurationEnum.ELAPSEDTIME="ELAPSEDTIME",IfcTaskDurationEnum.WORKTIME="WORKTIME",IfcTaskDurationEnum.NOTDEFINED="NOTDEFINED";var IfcTaskTypeEnum=class{constructor(v){this.value=v}};IfcTaskTypeEnum.ATTENDANCE="ATTENDANCE",IfcTaskTypeEnum.CONSTRUCTION="CONSTRUCTION",IfcTaskTypeEnum.DEMOLITION="DEMOLITION",IfcTaskTypeEnum.DISMANTLE="DISMANTLE",IfcTaskTypeEnum.DISPOSAL="DISPOSAL",IfcTaskTypeEnum.INSTALLATION="INSTALLATION",IfcTaskTypeEnum.LOGISTIC="LOGISTIC",IfcTaskTypeEnum.MAINTENANCE="MAINTENANCE",IfcTaskTypeEnum.MOVE="MOVE",IfcTaskTypeEnum.OPERATION="OPERATION",IfcTaskTypeEnum.REMOVAL="REMOVAL",IfcTaskTypeEnum.RENOVATION="RENOVATION",IfcTaskTypeEnum.USERDEFINED="USERDEFINED",IfcTaskTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTendonAnchorTypeEnum=class{constructor(v){this.value=v}};IfcTendonAnchorTypeEnum.COUPLER="COUPLER",IfcTendonAnchorTypeEnum.FIXED_END="FIXED_END",IfcTendonAnchorTypeEnum.TENSIONING_END="TENSIONING_END",IfcTendonAnchorTypeEnum.USERDEFINED="USERDEFINED",IfcTendonAnchorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTendonConduitTypeEnum=class{constructor(v){this.value=v}};IfcTendonConduitTypeEnum.DUCT="DUCT",IfcTendonConduitTypeEnum.COUPLER="COUPLER",IfcTendonConduitTypeEnum.GROUTING_DUCT="GROUTING_DUCT",IfcTendonConduitTypeEnum.TRUMPET="TRUMPET",IfcTendonConduitTypeEnum.DIABOLO="DIABOLO",IfcTendonConduitTypeEnum.USERDEFINED="USERDEFINED",IfcTendonConduitTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTendonTypeEnum=class{constructor(v){this.value=v}};IfcTendonTypeEnum.BAR="BAR",IfcTendonTypeEnum.COATED="COATED",IfcTendonTypeEnum.STRAND="STRAND",IfcTendonTypeEnum.WIRE="WIRE",IfcTendonTypeEnum.USERDEFINED="USERDEFINED",IfcTendonTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTextPath=class{constructor(v){this.value=v}};IfcTextPath.LEFT="LEFT",IfcTextPath.RIGHT="RIGHT",IfcTextPath.UP="UP",IfcTextPath.DOWN="DOWN";var IfcTimeSeriesDataTypeEnum=class{constructor(v){this.value=v}};IfcTimeSeriesDataTypeEnum.CONTINUOUS="CONTINUOUS",IfcTimeSeriesDataTypeEnum.DISCRETE="DISCRETE",IfcTimeSeriesDataTypeEnum.DISCRETEBINARY="DISCRETEBINARY",IfcTimeSeriesDataTypeEnum.PIECEWISEBINARY="PIECEWISEBINARY",IfcTimeSeriesDataTypeEnum.PIECEWISECONSTANT="PIECEWISECONSTANT",IfcTimeSeriesDataTypeEnum.PIECEWISECONTINUOUS="PIECEWISECONTINUOUS",IfcTimeSeriesDataTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTransformerTypeEnum=class{constructor(v){this.value=v}};IfcTransformerTypeEnum.CURRENT="CURRENT",IfcTransformerTypeEnum.FREQUENCY="FREQUENCY",IfcTransformerTypeEnum.INVERTER="INVERTER",IfcTransformerTypeEnum.RECTIFIER="RECTIFIER",IfcTransformerTypeEnum.VOLTAGE="VOLTAGE",IfcTransformerTypeEnum.USERDEFINED="USERDEFINED",IfcTransformerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTransitionCode=class{constructor(v){this.value=v}};IfcTransitionCode.DISCONTINUOUS="DISCONTINUOUS",IfcTransitionCode.CONTINUOUS="CONTINUOUS",IfcTransitionCode.CONTSAMEGRADIENT="CONTSAMEGRADIENT",IfcTransitionCode.CONTSAMEGRADIENTSAMECURVATURE="CONTSAMEGRADIENTSAMECURVATURE";var IfcTransitionCurveType=class{constructor(v){this.value=v}};IfcTransitionCurveType.BIQUADRATICPARABOLA="BIQUADRATICPARABOLA",IfcTransitionCurveType.BLOSSCURVE="BLOSSCURVE",IfcTransitionCurveType.CLOTHOIDCURVE="CLOTHOIDCURVE",IfcTransitionCurveType.COSINECURVE="COSINECURVE",IfcTransitionCurveType.CUBICPARABOLA="CUBICPARABOLA",IfcTransitionCurveType.SINECURVE="SINECURVE";var IfcTransportElementTypeEnum=class{constructor(v){this.value=v}};IfcTransportElementTypeEnum.ELEVATOR="ELEVATOR",IfcTransportElementTypeEnum.ESCALATOR="ESCALATOR",IfcTransportElementTypeEnum.MOVINGWALKWAY="MOVINGWALKWAY",IfcTransportElementTypeEnum.CRANEWAY="CRANEWAY",IfcTransportElementTypeEnum.LIFTINGGEAR="LIFTINGGEAR",IfcTransportElementTypeEnum.USERDEFINED="USERDEFINED",IfcTransportElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTrimmingPreference=class{constructor(v){this.value=v}};IfcTrimmingPreference.CARTESIAN="CARTESIAN",IfcTrimmingPreference.PARAMETER="PARAMETER",IfcTrimmingPreference.UNSPECIFIED="UNSPECIFIED";var IfcTubeBundleTypeEnum=class{constructor(v){this.value=v}};IfcTubeBundleTypeEnum.FINNED="FINNED",IfcTubeBundleTypeEnum.USERDEFINED="USERDEFINED",IfcTubeBundleTypeEnum.NOTDEFINED="NOTDEFINED";var IfcUnitEnum=class{constructor(v){this.value=v}};IfcUnitEnum.ABSORBEDDOSEUNIT="ABSORBEDDOSEUNIT",IfcUnitEnum.AMOUNTOFSUBSTANCEUNIT="AMOUNTOFSUBSTANCEUNIT",IfcUnitEnum.AREAUNIT="AREAUNIT",IfcUnitEnum.DOSEEQUIVALENTUNIT="DOSEEQUIVALENTUNIT",IfcUnitEnum.ELECTRICCAPACITANCEUNIT="ELECTRICCAPACITANCEUNIT",IfcUnitEnum.ELECTRICCHARGEUNIT="ELECTRICCHARGEUNIT",IfcUnitEnum.ELECTRICCONDUCTANCEUNIT="ELECTRICCONDUCTANCEUNIT",IfcUnitEnum.ELECTRICCURRENTUNIT="ELECTRICCURRENTUNIT",IfcUnitEnum.ELECTRICRESISTANCEUNIT="ELECTRICRESISTANCEUNIT",IfcUnitEnum.ELECTRICVOLTAGEUNIT="ELECTRICVOLTAGEUNIT",IfcUnitEnum.ENERGYUNIT="ENERGYUNIT",IfcUnitEnum.FORCEUNIT="FORCEUNIT",IfcUnitEnum.FREQUENCYUNIT="FREQUENCYUNIT",IfcUnitEnum.ILLUMINANCEUNIT="ILLUMINANCEUNIT",IfcUnitEnum.INDUCTANCEUNIT="INDUCTANCEUNIT",IfcUnitEnum.LENGTHUNIT="LENGTHUNIT",IfcUnitEnum.LUMINOUSFLUXUNIT="LUMINOUSFLUXUNIT",IfcUnitEnum.LUMINOUSINTENSITYUNIT="LUMINOUSINTENSITYUNIT",IfcUnitEnum.MAGNETICFLUXDENSITYUNIT="MAGNETICFLUXDENSITYUNIT",IfcUnitEnum.MAGNETICFLUXUNIT="MAGNETICFLUXUNIT",IfcUnitEnum.MASSUNIT="MASSUNIT",IfcUnitEnum.PLANEANGLEUNIT="PLANEANGLEUNIT",IfcUnitEnum.POWERUNIT="POWERUNIT",IfcUnitEnum.PRESSUREUNIT="PRESSUREUNIT",IfcUnitEnum.RADIOACTIVITYUNIT="RADIOACTIVITYUNIT",IfcUnitEnum.SOLIDANGLEUNIT="SOLIDANGLEUNIT",IfcUnitEnum.THERMODYNAMICTEMPERATUREUNIT="THERMODYNAMICTEMPERATUREUNIT",IfcUnitEnum.TIMEUNIT="TIMEUNIT",IfcUnitEnum.VOLUMEUNIT="VOLUMEUNIT",IfcUnitEnum.USERDEFINED="USERDEFINED";var IfcUnitaryControlElementTypeEnum=class{constructor(v){this.value=v}};IfcUnitaryControlElementTypeEnum.ALARMPANEL="ALARMPANEL",IfcUnitaryControlElementTypeEnum.CONTROLPANEL="CONTROLPANEL",IfcUnitaryControlElementTypeEnum.GASDETECTIONPANEL="GASDETECTIONPANEL",IfcUnitaryControlElementTypeEnum.INDICATORPANEL="INDICATORPANEL",IfcUnitaryControlElementTypeEnum.MIMICPANEL="MIMICPANEL",IfcUnitaryControlElementTypeEnum.HUMIDISTAT="HUMIDISTAT",IfcUnitaryControlElementTypeEnum.THERMOSTAT="THERMOSTAT",IfcUnitaryControlElementTypeEnum.WEATHERSTATION="WEATHERSTATION",IfcUnitaryControlElementTypeEnum.USERDEFINED="USERDEFINED",IfcUnitaryControlElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcUnitaryEquipmentTypeEnum=class{constructor(v){this.value=v}};IfcUnitaryEquipmentTypeEnum.AIRHANDLER="AIRHANDLER",IfcUnitaryEquipmentTypeEnum.AIRCONDITIONINGUNIT="AIRCONDITIONINGUNIT",IfcUnitaryEquipmentTypeEnum.DEHUMIDIFIER="DEHUMIDIFIER",IfcUnitaryEquipmentTypeEnum.SPLITSYSTEM="SPLITSYSTEM",IfcUnitaryEquipmentTypeEnum.ROOFTOPUNIT="ROOFTOPUNIT",IfcUnitaryEquipmentTypeEnum.USERDEFINED="USERDEFINED",IfcUnitaryEquipmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcValveTypeEnum=class{constructor(v){this.value=v}};IfcValveTypeEnum.AIRRELEASE="AIRRELEASE",IfcValveTypeEnum.ANTIVACUUM="ANTIVACUUM",IfcValveTypeEnum.CHANGEOVER="CHANGEOVER",IfcValveTypeEnum.CHECK="CHECK",IfcValveTypeEnum.COMMISSIONING="COMMISSIONING",IfcValveTypeEnum.DIVERTING="DIVERTING",IfcValveTypeEnum.DRAWOFFCOCK="DRAWOFFCOCK",IfcValveTypeEnum.DOUBLECHECK="DOUBLECHECK",IfcValveTypeEnum.DOUBLEREGULATING="DOUBLEREGULATING",IfcValveTypeEnum.FAUCET="FAUCET",IfcValveTypeEnum.FLUSHING="FLUSHING",IfcValveTypeEnum.GASCOCK="GASCOCK",IfcValveTypeEnum.GASTAP="GASTAP",IfcValveTypeEnum.ISOLATING="ISOLATING",IfcValveTypeEnum.MIXING="MIXING",IfcValveTypeEnum.PRESSUREREDUCING="PRESSUREREDUCING",IfcValveTypeEnum.PRESSURERELIEF="PRESSURERELIEF",IfcValveTypeEnum.REGULATING="REGULATING",IfcValveTypeEnum.SAFETYCUTOFF="SAFETYCUTOFF",IfcValveTypeEnum.STEAMTRAP="STEAMTRAP",IfcValveTypeEnum.STOPCOCK="STOPCOCK",IfcValveTypeEnum.USERDEFINED="USERDEFINED",IfcValveTypeEnum.NOTDEFINED="NOTDEFINED";var IfcVibrationDamperTypeEnum=class{constructor(v){this.value=v}};IfcVibrationDamperTypeEnum.BENDING_YIELD="BENDING_YIELD",IfcVibrationDamperTypeEnum.SHEAR_YIELD="SHEAR_YIELD",IfcVibrationDamperTypeEnum.AXIAL_YIELD="AXIAL_YIELD",IfcVibrationDamperTypeEnum.FRICTION="FRICTION",IfcVibrationDamperTypeEnum.VISCOUS="VISCOUS",IfcVibrationDamperTypeEnum.RUBBER="RUBBER",IfcVibrationDamperTypeEnum.USERDEFINED="USERDEFINED",IfcVibrationDamperTypeEnum.NOTDEFINED="NOTDEFINED";var IfcVibrationIsolatorTypeEnum=class{constructor(v){this.value=v}};IfcVibrationIsolatorTypeEnum.COMPRESSION="COMPRESSION",IfcVibrationIsolatorTypeEnum.SPRING="SPRING",IfcVibrationIsolatorTypeEnum.BASE="BASE",IfcVibrationIsolatorTypeEnum.USERDEFINED="USERDEFINED",IfcVibrationIsolatorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcVoidingFeatureTypeEnum=class{constructor(v){this.value=v}};IfcVoidingFeatureTypeEnum.CUTOUT="CUTOUT",IfcVoidingFeatureTypeEnum.NOTCH="NOTCH",IfcVoidingFeatureTypeEnum.HOLE="HOLE",IfcVoidingFeatureTypeEnum.MITER="MITER",IfcVoidingFeatureTypeEnum.CHAMFER="CHAMFER",IfcVoidingFeatureTypeEnum.EDGE="EDGE",IfcVoidingFeatureTypeEnum.USERDEFINED="USERDEFINED",IfcVoidingFeatureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWallTypeEnum=class{constructor(v){this.value=v}};IfcWallTypeEnum.MOVABLE="MOVABLE",IfcWallTypeEnum.PARAPET="PARAPET",IfcWallTypeEnum.PARTITIONING="PARTITIONING",IfcWallTypeEnum.PLUMBINGWALL="PLUMBINGWALL",IfcWallTypeEnum.SHEAR="SHEAR",IfcWallTypeEnum.SOLIDWALL="SOLIDWALL",IfcWallTypeEnum.STANDARD="STANDARD",IfcWallTypeEnum.POLYGONAL="POLYGONAL",IfcWallTypeEnum.ELEMENTEDWALL="ELEMENTEDWALL",IfcWallTypeEnum.RETAININGWALL="RETAININGWALL",IfcWallTypeEnum.USERDEFINED="USERDEFINED",IfcWallTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWasteTerminalTypeEnum=class{constructor(v){this.value=v}};IfcWasteTerminalTypeEnum.FLOORTRAP="FLOORTRAP",IfcWasteTerminalTypeEnum.FLOORWASTE="FLOORWASTE",IfcWasteTerminalTypeEnum.GULLYSUMP="GULLYSUMP",IfcWasteTerminalTypeEnum.GULLYTRAP="GULLYTRAP",IfcWasteTerminalTypeEnum.ROOFDRAIN="ROOFDRAIN",IfcWasteTerminalTypeEnum.WASTEDISPOSALUNIT="WASTEDISPOSALUNIT",IfcWasteTerminalTypeEnum.WASTETRAP="WASTETRAP",IfcWasteTerminalTypeEnum.USERDEFINED="USERDEFINED",IfcWasteTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWindowPanelOperationEnum=class{constructor(v){this.value=v}};IfcWindowPanelOperationEnum.SIDEHUNGRIGHTHAND="SIDEHUNGRIGHTHAND",IfcWindowPanelOperationEnum.SIDEHUNGLEFTHAND="SIDEHUNGLEFTHAND",IfcWindowPanelOperationEnum.TILTANDTURNRIGHTHAND="TILTANDTURNRIGHTHAND",IfcWindowPanelOperationEnum.TILTANDTURNLEFTHAND="TILTANDTURNLEFTHAND",IfcWindowPanelOperationEnum.TOPHUNG="TOPHUNG",IfcWindowPanelOperationEnum.BOTTOMHUNG="BOTTOMHUNG",IfcWindowPanelOperationEnum.PIVOTHORIZONTAL="PIVOTHORIZONTAL",IfcWindowPanelOperationEnum.PIVOTVERTICAL="PIVOTVERTICAL",IfcWindowPanelOperationEnum.SLIDINGHORIZONTAL="SLIDINGHORIZONTAL",IfcWindowPanelOperationEnum.SLIDINGVERTICAL="SLIDINGVERTICAL",IfcWindowPanelOperationEnum.REMOVABLECASEMENT="REMOVABLECASEMENT",IfcWindowPanelOperationEnum.FIXEDCASEMENT="FIXEDCASEMENT",IfcWindowPanelOperationEnum.OTHEROPERATION="OTHEROPERATION",IfcWindowPanelOperationEnum.NOTDEFINED="NOTDEFINED";var IfcWindowPanelPositionEnum=class{constructor(v){this.value=v}};IfcWindowPanelPositionEnum.LEFT="LEFT",IfcWindowPanelPositionEnum.MIDDLE="MIDDLE",IfcWindowPanelPositionEnum.RIGHT="RIGHT",IfcWindowPanelPositionEnum.BOTTOM="BOTTOM",IfcWindowPanelPositionEnum.TOP="TOP",IfcWindowPanelPositionEnum.NOTDEFINED="NOTDEFINED";var IfcWindowStyleConstructionEnum=class{constructor(v){this.value=v}};IfcWindowStyleConstructionEnum.ALUMINIUM="ALUMINIUM",IfcWindowStyleConstructionEnum.HIGH_GRADE_STEEL="HIGH_GRADE_STEEL",IfcWindowStyleConstructionEnum.STEEL="STEEL",IfcWindowStyleConstructionEnum.WOOD="WOOD",IfcWindowStyleConstructionEnum.ALUMINIUM_WOOD="ALUMINIUM_WOOD",IfcWindowStyleConstructionEnum.PLASTIC="PLASTIC",IfcWindowStyleConstructionEnum.OTHER_CONSTRUCTION="OTHER_CONSTRUCTION",IfcWindowStyleConstructionEnum.NOTDEFINED="NOTDEFINED";var IfcWindowStyleOperationEnum=class{constructor(v){this.value=v}};IfcWindowStyleOperationEnum.SINGLE_PANEL="SINGLE_PANEL",IfcWindowStyleOperationEnum.DOUBLE_PANEL_VERTICAL="DOUBLE_PANEL_VERTICAL",IfcWindowStyleOperationEnum.DOUBLE_PANEL_HORIZONTAL="DOUBLE_PANEL_HORIZONTAL",IfcWindowStyleOperationEnum.TRIPLE_PANEL_VERTICAL="TRIPLE_PANEL_VERTICAL",IfcWindowStyleOperationEnum.TRIPLE_PANEL_BOTTOM="TRIPLE_PANEL_BOTTOM",IfcWindowStyleOperationEnum.TRIPLE_PANEL_TOP="TRIPLE_PANEL_TOP",IfcWindowStyleOperationEnum.TRIPLE_PANEL_LEFT="TRIPLE_PANEL_LEFT",IfcWindowStyleOperationEnum.TRIPLE_PANEL_RIGHT="TRIPLE_PANEL_RIGHT",IfcWindowStyleOperationEnum.TRIPLE_PANEL_HORIZONTAL="TRIPLE_PANEL_HORIZONTAL",IfcWindowStyleOperationEnum.USERDEFINED="USERDEFINED",IfcWindowStyleOperationEnum.NOTDEFINED="NOTDEFINED";var IfcWindowTypeEnum=class{constructor(v){this.value=v}};IfcWindowTypeEnum.WINDOW="WINDOW",IfcWindowTypeEnum.SKYLIGHT="SKYLIGHT",IfcWindowTypeEnum.LIGHTDOME="LIGHTDOME",IfcWindowTypeEnum.USERDEFINED="USERDEFINED",IfcWindowTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWindowTypePartitioningEnum=class{constructor(v){this.value=v}};IfcWindowTypePartitioningEnum.SINGLE_PANEL="SINGLE_PANEL",IfcWindowTypePartitioningEnum.DOUBLE_PANEL_VERTICAL="DOUBLE_PANEL_VERTICAL",IfcWindowTypePartitioningEnum.DOUBLE_PANEL_HORIZONTAL="DOUBLE_PANEL_HORIZONTAL",IfcWindowTypePartitioningEnum.TRIPLE_PANEL_VERTICAL="TRIPLE_PANEL_VERTICAL",IfcWindowTypePartitioningEnum.TRIPLE_PANEL_BOTTOM="TRIPLE_PANEL_BOTTOM",IfcWindowTypePartitioningEnum.TRIPLE_PANEL_TOP="TRIPLE_PANEL_TOP",IfcWindowTypePartitioningEnum.TRIPLE_PANEL_LEFT="TRIPLE_PANEL_LEFT",IfcWindowTypePartitioningEnum.TRIPLE_PANEL_RIGHT="TRIPLE_PANEL_RIGHT",IfcWindowTypePartitioningEnum.TRIPLE_PANEL_HORIZONTAL="TRIPLE_PANEL_HORIZONTAL",IfcWindowTypePartitioningEnum.USERDEFINED="USERDEFINED",IfcWindowTypePartitioningEnum.NOTDEFINED="NOTDEFINED";var IfcWorkCalendarTypeEnum=class{constructor(v){this.value=v}};IfcWorkCalendarTypeEnum.FIRSTSHIFT="FIRSTSHIFT",IfcWorkCalendarTypeEnum.SECONDSHIFT="SECONDSHIFT",IfcWorkCalendarTypeEnum.THIRDSHIFT="THIRDSHIFT",IfcWorkCalendarTypeEnum.USERDEFINED="USERDEFINED",IfcWorkCalendarTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWorkPlanTypeEnum=class{constructor(v){this.value=v}};IfcWorkPlanTypeEnum.ACTUAL="ACTUAL",IfcWorkPlanTypeEnum.BASELINE="BASELINE",IfcWorkPlanTypeEnum.PLANNED="PLANNED",IfcWorkPlanTypeEnum.USERDEFINED="USERDEFINED",IfcWorkPlanTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWorkScheduleTypeEnum=class{constructor(v){this.value=v}};IfcWorkScheduleTypeEnum.ACTUAL="ACTUAL",IfcWorkScheduleTypeEnum.BASELINE="BASELINE",IfcWorkScheduleTypeEnum.PLANNED="PLANNED",IfcWorkScheduleTypeEnum.USERDEFINED="USERDEFINED",IfcWorkScheduleTypeEnum.NOTDEFINED="NOTDEFINED";var WebIFCWasm,IfcActionRequest=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.PredefinedType=PredefinedType,this.Status=Status,this.LongDescription=LongDescription}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],PredefinedType=tape[ptr++],Status=tape[ptr++],LongDescription=tape[ptr++];return new IfcActionRequest(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.PredefinedType),args.push(this.Status),args.push(this.LongDescription),args}},IfcActor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.TheActor=TheActor}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],TheActor=tape[ptr++];return new IfcActor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.TheActor),args}},IfcActorRole=class{constructor(expressID,type,Role,UserDefinedRole,Description){this.expressID=expressID,this.type=type,this.Role=Role,this.UserDefinedRole=UserDefinedRole,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,Role=tape[ptr++],UserDefinedRole=tape[ptr++],Description=tape[ptr++];return new IfcActorRole(expressID,type,Role,UserDefinedRole,Description)}ToTape(){let args=[];return args.push(this.Role),args.push(this.UserDefinedRole),args.push(this.Description),args}},IfcActuator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcActuator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcActuatorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcActuatorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcAddress=class{constructor(expressID,type,Purpose,Description,UserDefinedPurpose){this.expressID=expressID,this.type=type,this.Purpose=Purpose,this.Description=Description,this.UserDefinedPurpose=UserDefinedPurpose}static FromTape(expressID,type,tape){let ptr=0,Purpose=tape[ptr++],Description=tape[ptr++],UserDefinedPurpose=tape[ptr++];return new IfcAddress(expressID,type,Purpose,Description,UserDefinedPurpose)}ToTape(){let args=[];return args.push(this.Purpose),args.push(this.Description),args.push(this.UserDefinedPurpose),args}},IfcAdvancedBrep=class{constructor(expressID,type,Outer){this.expressID=expressID,this.type=type,this.Outer=Outer}static FromTape(expressID,type,tape){let ptr=0,Outer=tape[ptr++];return new IfcAdvancedBrep(expressID,type,Outer)}ToTape(){let args=[];return args.push(this.Outer),args}},IfcAdvancedBrepWithVoids=class{constructor(expressID,type,Outer,Voids){this.expressID=expressID,this.type=type,this.Outer=Outer,this.Voids=Voids}static FromTape(expressID,type,tape){let ptr=0,Outer=tape[ptr++],Voids=tape[ptr++];return new IfcAdvancedBrepWithVoids(expressID,type,Outer,Voids)}ToTape(){let args=[];return args.push(this.Outer),args.push(this.Voids),args}},IfcAdvancedFace=class{constructor(expressID,type,Bounds,FaceSurface,SameSense){this.expressID=expressID,this.type=type,this.Bounds=Bounds,this.FaceSurface=FaceSurface,this.SameSense=SameSense}static FromTape(expressID,type,tape){let ptr=0,Bounds=tape[ptr++],FaceSurface=tape[ptr++],SameSense=tape[ptr++];return new IfcAdvancedFace(expressID,type,Bounds,FaceSurface,SameSense)}ToTape(){let args=[];return args.push(this.Bounds),args.push(this.FaceSurface),args.push(this.SameSense),args}},IfcAirTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAirTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcAirTerminalBox=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAirTerminalBox(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcAirTerminalBoxType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAirTerminalBoxType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcAirTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAirTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcAirToAirHeatRecovery=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAirToAirHeatRecovery(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcAirToAirHeatRecoveryType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAirToAirHeatRecoveryType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcAlarm=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAlarm(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcAlarmType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAlarmType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcAlignment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Axis=Axis,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Axis=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAlignment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Axis),args.push(this.PredefinedType),args}},IfcAlignment2DHorizontal=class{constructor(expressID,type,StartDistAlong,Segments){this.expressID=expressID,this.type=type,this.StartDistAlong=StartDistAlong,this.Segments=Segments}static FromTape(expressID,type,tape){let ptr=0,StartDistAlong=tape[ptr++],Segments=tape[ptr++];return new IfcAlignment2DHorizontal(expressID,type,StartDistAlong,Segments)}ToTape(){let args=[];return args.push(this.StartDistAlong),args.push(this.Segments),args}},IfcAlignment2DHorizontalSegment=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,CurveGeometry){this.expressID=expressID,this.type=type,this.TangentialContinuity=TangentialContinuity,this.StartTag=StartTag,this.EndTag=EndTag,this.CurveGeometry=CurveGeometry}static FromTape(expressID,type,tape){let ptr=0,TangentialContinuity=tape[ptr++],StartTag=tape[ptr++],EndTag=tape[ptr++],CurveGeometry=tape[ptr++];return new IfcAlignment2DHorizontalSegment(expressID,type,TangentialContinuity,StartTag,EndTag,CurveGeometry)}ToTape(){let args=[];return args.push(this.TangentialContinuity),args.push(this.StartTag),args.push(this.EndTag),args.push(this.CurveGeometry),args}},IfcAlignment2DSegment=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag){this.expressID=expressID,this.type=type,this.TangentialContinuity=TangentialContinuity,this.StartTag=StartTag,this.EndTag=EndTag}static FromTape(expressID,type,tape){let ptr=0,TangentialContinuity=tape[ptr++],StartTag=tape[ptr++],EndTag=tape[ptr++];return new IfcAlignment2DSegment(expressID,type,TangentialContinuity,StartTag,EndTag)}ToTape(){let args=[];return args.push(this.TangentialContinuity),args.push(this.StartTag),args.push(this.EndTag),args}},IfcAlignment2DVerSegCircularArc=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,Radius,IsConvex){this.expressID=expressID,this.type=type,this.TangentialContinuity=TangentialContinuity,this.StartTag=StartTag,this.EndTag=EndTag,this.StartDistAlong=StartDistAlong,this.HorizontalLength=HorizontalLength,this.StartHeight=StartHeight,this.StartGradient=StartGradient,this.Radius=Radius,this.IsConvex=IsConvex}static FromTape(expressID,type,tape){let ptr=0,TangentialContinuity=tape[ptr++],StartTag=tape[ptr++],EndTag=tape[ptr++],StartDistAlong=tape[ptr++],HorizontalLength=tape[ptr++],StartHeight=tape[ptr++],StartGradient=tape[ptr++],Radius=tape[ptr++],IsConvex=tape[ptr++];return new IfcAlignment2DVerSegCircularArc(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,Radius,IsConvex)}ToTape(){let args=[];return args.push(this.TangentialContinuity),args.push(this.StartTag),args.push(this.EndTag),args.push(this.StartDistAlong),args.push(this.HorizontalLength),args.push(this.StartHeight),args.push(this.StartGradient),args.push(this.Radius),args.push(this.IsConvex),args}},IfcAlignment2DVerSegLine=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient){this.expressID=expressID,this.type=type,this.TangentialContinuity=TangentialContinuity,this.StartTag=StartTag,this.EndTag=EndTag,this.StartDistAlong=StartDistAlong,this.HorizontalLength=HorizontalLength,this.StartHeight=StartHeight,this.StartGradient=StartGradient}static FromTape(expressID,type,tape){let ptr=0,TangentialContinuity=tape[ptr++],StartTag=tape[ptr++],EndTag=tape[ptr++],StartDistAlong=tape[ptr++],HorizontalLength=tape[ptr++],StartHeight=tape[ptr++],StartGradient=tape[ptr++];return new IfcAlignment2DVerSegLine(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient)}ToTape(){let args=[];return args.push(this.TangentialContinuity),args.push(this.StartTag),args.push(this.EndTag),args.push(this.StartDistAlong),args.push(this.HorizontalLength),args.push(this.StartHeight),args.push(this.StartGradient),args}},IfcAlignment2DVerSegParabolicArc=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,ParabolaConstant,IsConvex){this.expressID=expressID,this.type=type,this.TangentialContinuity=TangentialContinuity,this.StartTag=StartTag,this.EndTag=EndTag,this.StartDistAlong=StartDistAlong,this.HorizontalLength=HorizontalLength,this.StartHeight=StartHeight,this.StartGradient=StartGradient,this.ParabolaConstant=ParabolaConstant,this.IsConvex=IsConvex}static FromTape(expressID,type,tape){let ptr=0,TangentialContinuity=tape[ptr++],StartTag=tape[ptr++],EndTag=tape[ptr++],StartDistAlong=tape[ptr++],HorizontalLength=tape[ptr++],StartHeight=tape[ptr++],StartGradient=tape[ptr++],ParabolaConstant=tape[ptr++],IsConvex=tape[ptr++];return new IfcAlignment2DVerSegParabolicArc(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,ParabolaConstant,IsConvex)}ToTape(){let args=[];return args.push(this.TangentialContinuity),args.push(this.StartTag),args.push(this.EndTag),args.push(this.StartDistAlong),args.push(this.HorizontalLength),args.push(this.StartHeight),args.push(this.StartGradient),args.push(this.ParabolaConstant),args.push(this.IsConvex),args}},IfcAlignment2DVertical=class{constructor(expressID,type,Segments){this.expressID=expressID,this.type=type,this.Segments=Segments}static FromTape(expressID,type,tape){let ptr=0,Segments=tape[ptr++];return new IfcAlignment2DVertical(expressID,type,Segments)}ToTape(){let args=[];return args.push(this.Segments),args}},IfcAlignment2DVerticalSegment=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient){this.expressID=expressID,this.type=type,this.TangentialContinuity=TangentialContinuity,this.StartTag=StartTag,this.EndTag=EndTag,this.StartDistAlong=StartDistAlong,this.HorizontalLength=HorizontalLength,this.StartHeight=StartHeight,this.StartGradient=StartGradient}static FromTape(expressID,type,tape){let ptr=0,TangentialContinuity=tape[ptr++],StartTag=tape[ptr++],EndTag=tape[ptr++],StartDistAlong=tape[ptr++],HorizontalLength=tape[ptr++],StartHeight=tape[ptr++],StartGradient=tape[ptr++];return new IfcAlignment2DVerticalSegment(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient)}ToTape(){let args=[];return args.push(this.TangentialContinuity),args.push(this.StartTag),args.push(this.EndTag),args.push(this.StartDistAlong),args.push(this.HorizontalLength),args.push(this.StartHeight),args.push(this.StartGradient),args}},IfcAlignmentCurve=class{constructor(expressID,type,Horizontal,Vertical,Tag){this.expressID=expressID,this.type=type,this.Horizontal=Horizontal,this.Vertical=Vertical,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,Horizontal=tape[ptr++],Vertical=tape[ptr++],Tag=tape[ptr++];return new IfcAlignmentCurve(expressID,type,Horizontal,Vertical,Tag)}ToTape(){let args=[];return args.push(this.Horizontal),args.push(this.Vertical),args.push(this.Tag),args}},IfcAnnotation=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++];return new IfcAnnotation(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args}},IfcAnnotationFillArea=class{constructor(expressID,type,OuterBoundary,InnerBoundaries){this.expressID=expressID,this.type=type,this.OuterBoundary=OuterBoundary,this.InnerBoundaries=InnerBoundaries}static FromTape(expressID,type,tape){let ptr=0,OuterBoundary=tape[ptr++],InnerBoundaries=tape[ptr++];return new IfcAnnotationFillArea(expressID,type,OuterBoundary,InnerBoundaries)}ToTape(){let args=[];return args.push(this.OuterBoundary),args.push(this.InnerBoundaries),args}},IfcApplication=class{constructor(expressID,type,ApplicationDeveloper,Version,ApplicationFullName,ApplicationIdentifier){this.expressID=expressID,this.type=type,this.ApplicationDeveloper=ApplicationDeveloper,this.Version=Version,this.ApplicationFullName=ApplicationFullName,this.ApplicationIdentifier=ApplicationIdentifier}static FromTape(expressID,type,tape){let ptr=0,ApplicationDeveloper=tape[ptr++],Version=tape[ptr++],ApplicationFullName=tape[ptr++],ApplicationIdentifier=tape[ptr++];return new IfcApplication(expressID,type,ApplicationDeveloper,Version,ApplicationFullName,ApplicationIdentifier)}ToTape(){let args=[];return args.push(this.ApplicationDeveloper),args.push(this.Version),args.push(this.ApplicationFullName),args.push(this.ApplicationIdentifier),args}},IfcAppliedValue=class{constructor(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.AppliedValue=AppliedValue,this.UnitBasis=UnitBasis,this.ApplicableDate=ApplicableDate,this.FixedUntilDate=FixedUntilDate,this.Category=Category,this.Condition=Condition,this.ArithmeticOperator=ArithmeticOperator,this.Components=Components}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],AppliedValue=tape[ptr++],UnitBasis=tape[ptr++],ApplicableDate=tape[ptr++],FixedUntilDate=tape[ptr++],Category=tape[ptr++],Condition=tape[ptr++],ArithmeticOperator=tape[ptr++],Components=tape[ptr++];return new IfcAppliedValue(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.AppliedValue),args.push(this.UnitBasis),args.push(this.ApplicableDate),args.push(this.FixedUntilDate),args.push(this.Category),args.push(this.Condition),args.push(this.ArithmeticOperator),args.push(this.Components),args}},IfcApproval=class{constructor(expressID,type,Identifier,Name,Description,TimeOfApproval,Status,Level,Qualifier,RequestingApproval,GivingApproval){this.expressID=expressID,this.type=type,this.Identifier=Identifier,this.Name=Name,this.Description=Description,this.TimeOfApproval=TimeOfApproval,this.Status=Status,this.Level=Level,this.Qualifier=Qualifier,this.RequestingApproval=RequestingApproval,this.GivingApproval=GivingApproval}static FromTape(expressID,type,tape){let ptr=0,Identifier=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],TimeOfApproval=tape[ptr++],Status=tape[ptr++],Level=tape[ptr++],Qualifier=tape[ptr++],RequestingApproval=tape[ptr++],GivingApproval=tape[ptr++];return new IfcApproval(expressID,type,Identifier,Name,Description,TimeOfApproval,Status,Level,Qualifier,RequestingApproval,GivingApproval)}ToTape(){let args=[];return args.push(this.Identifier),args.push(this.Name),args.push(this.Description),args.push(this.TimeOfApproval),args.push(this.Status),args.push(this.Level),args.push(this.Qualifier),args.push(this.RequestingApproval),args.push(this.GivingApproval),args}},IfcApprovalRelationship=class{constructor(expressID,type,Name,Description,RelatingApproval,RelatedApprovals){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatingApproval=RelatingApproval,this.RelatedApprovals=RelatedApprovals}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatingApproval=tape[ptr++],RelatedApprovals=tape[ptr++];return new IfcApprovalRelationship(expressID,type,Name,Description,RelatingApproval,RelatedApprovals)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatingApproval),args.push(this.RelatedApprovals),args}},IfcArbitraryClosedProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,OuterCurve){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.OuterCurve=OuterCurve}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],OuterCurve=tape[ptr++];return new IfcArbitraryClosedProfileDef(expressID,type,ProfileType,ProfileName,OuterCurve)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.OuterCurve),args}},IfcArbitraryOpenProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Curve){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Curve=Curve}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Curve=tape[ptr++];return new IfcArbitraryOpenProfileDef(expressID,type,ProfileType,ProfileName,Curve)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Curve),args}},IfcArbitraryProfileDefWithVoids=class{constructor(expressID,type,ProfileType,ProfileName,OuterCurve,InnerCurves){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.OuterCurve=OuterCurve,this.InnerCurves=InnerCurves}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],OuterCurve=tape[ptr++],InnerCurves=tape[ptr++];return new IfcArbitraryProfileDefWithVoids(expressID,type,ProfileType,ProfileName,OuterCurve,InnerCurves)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.OuterCurve),args.push(this.InnerCurves),args}},IfcAsset=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,OriginalValue,CurrentValue,TotalReplacementCost,Owner,User,ResponsiblePerson,IncorporationDate,DepreciatedValue){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.OriginalValue=OriginalValue,this.CurrentValue=CurrentValue,this.TotalReplacementCost=TotalReplacementCost,this.Owner=Owner,this.User=User,this.ResponsiblePerson=ResponsiblePerson,this.IncorporationDate=IncorporationDate,this.DepreciatedValue=DepreciatedValue}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],OriginalValue=tape[ptr++],CurrentValue=tape[ptr++],TotalReplacementCost=tape[ptr++],Owner=tape[ptr++],User=tape[ptr++],ResponsiblePerson=tape[ptr++],IncorporationDate=tape[ptr++],DepreciatedValue=tape[ptr++];return new IfcAsset(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,OriginalValue,CurrentValue,TotalReplacementCost,Owner,User,ResponsiblePerson,IncorporationDate,DepreciatedValue)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.OriginalValue),args.push(this.CurrentValue),args.push(this.TotalReplacementCost),args.push(this.Owner),args.push(this.User),args.push(this.ResponsiblePerson),args.push(this.IncorporationDate),args.push(this.DepreciatedValue),args}},IfcAsymmetricIShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,BottomFlangeWidth,OverallDepth,WebThickness,BottomFlangeThickness,BottomFlangeFilletRadius,TopFlangeWidth,TopFlangeThickness,TopFlangeFilletRadius,BottomFlangeEdgeRadius,BottomFlangeSlope,TopFlangeEdgeRadius,TopFlangeSlope){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.BottomFlangeWidth=BottomFlangeWidth,this.OverallDepth=OverallDepth,this.WebThickness=WebThickness,this.BottomFlangeThickness=BottomFlangeThickness,this.BottomFlangeFilletRadius=BottomFlangeFilletRadius,this.TopFlangeWidth=TopFlangeWidth,this.TopFlangeThickness=TopFlangeThickness,this.TopFlangeFilletRadius=TopFlangeFilletRadius,this.BottomFlangeEdgeRadius=BottomFlangeEdgeRadius,this.BottomFlangeSlope=BottomFlangeSlope,this.TopFlangeEdgeRadius=TopFlangeEdgeRadius,this.TopFlangeSlope=TopFlangeSlope}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],BottomFlangeWidth=tape[ptr++],OverallDepth=tape[ptr++],WebThickness=tape[ptr++],BottomFlangeThickness=tape[ptr++],BottomFlangeFilletRadius=tape[ptr++],TopFlangeWidth=tape[ptr++],TopFlangeThickness=tape[ptr++],TopFlangeFilletRadius=tape[ptr++],BottomFlangeEdgeRadius=tape[ptr++],BottomFlangeSlope=tape[ptr++],TopFlangeEdgeRadius=tape[ptr++],TopFlangeSlope=tape[ptr++];return new IfcAsymmetricIShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,BottomFlangeWidth,OverallDepth,WebThickness,BottomFlangeThickness,BottomFlangeFilletRadius,TopFlangeWidth,TopFlangeThickness,TopFlangeFilletRadius,BottomFlangeEdgeRadius,BottomFlangeSlope,TopFlangeEdgeRadius,TopFlangeSlope)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.BottomFlangeWidth),args.push(this.OverallDepth),args.push(this.WebThickness),args.push(this.BottomFlangeThickness),args.push(this.BottomFlangeFilletRadius),args.push(this.TopFlangeWidth),args.push(this.TopFlangeThickness),args.push(this.TopFlangeFilletRadius),args.push(this.BottomFlangeEdgeRadius),args.push(this.BottomFlangeSlope),args.push(this.TopFlangeEdgeRadius),args.push(this.TopFlangeSlope),args}},IfcAudioVisualAppliance=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAudioVisualAppliance(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcAudioVisualApplianceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcAudioVisualApplianceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcAxis1Placement=class{constructor(expressID,type,Location,Axis){this.expressID=expressID,this.type=type,this.Location=Location,this.Axis=Axis}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Axis=tape[ptr++];return new IfcAxis1Placement(expressID,type,Location,Axis)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Axis),args}},IfcAxis2Placement2D=class{constructor(expressID,type,Location,RefDirection){this.expressID=expressID,this.type=type,this.Location=Location,this.RefDirection=RefDirection}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],RefDirection=tape[ptr++];return new IfcAxis2Placement2D(expressID,type,Location,RefDirection)}ToTape(){let args=[];return args.push(this.Location),args.push(this.RefDirection),args}},IfcAxis2Placement3D=class{constructor(expressID,type,Location,Axis,RefDirection){this.expressID=expressID,this.type=type,this.Location=Location,this.Axis=Axis,this.RefDirection=RefDirection}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Axis=tape[ptr++],RefDirection=tape[ptr++];return new IfcAxis2Placement3D(expressID,type,Location,Axis,RefDirection)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Axis),args.push(this.RefDirection),args}},IfcBSplineCurve=class{constructor(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect){this.expressID=expressID,this.type=type,this.Degree=Degree,this.ControlPointsList=ControlPointsList,this.CurveForm=CurveForm,this.ClosedCurve=ClosedCurve,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,Degree=tape[ptr++],ControlPointsList=tape[ptr++],CurveForm=tape[ptr++],ClosedCurve=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcBSplineCurve(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect)}ToTape(){let args=[];return args.push(this.Degree),args.push(this.ControlPointsList),args.push(this.CurveForm),args.push(this.ClosedCurve),args.push(this.SelfIntersect),args}},IfcBSplineCurveWithKnots=class{constructor(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec){this.expressID=expressID,this.type=type,this.Degree=Degree,this.ControlPointsList=ControlPointsList,this.CurveForm=CurveForm,this.ClosedCurve=ClosedCurve,this.SelfIntersect=SelfIntersect,this.KnotMultiplicities=KnotMultiplicities,this.Knots=Knots,this.KnotSpec=KnotSpec}static FromTape(expressID,type,tape){let ptr=0,Degree=tape[ptr++],ControlPointsList=tape[ptr++],CurveForm=tape[ptr++],ClosedCurve=tape[ptr++],SelfIntersect=tape[ptr++],KnotMultiplicities=tape[ptr++],Knots=tape[ptr++],KnotSpec=tape[ptr++];return new IfcBSplineCurveWithKnots(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec)}ToTape(){let args=[];return args.push(this.Degree),args.push(this.ControlPointsList),args.push(this.CurveForm),args.push(this.ClosedCurve),args.push(this.SelfIntersect),args.push(this.KnotMultiplicities),args.push(this.Knots),args.push(this.KnotSpec),args}},IfcBSplineSurface=class{constructor(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect){this.expressID=expressID,this.type=type,this.UDegree=UDegree,this.VDegree=VDegree,this.ControlPointsList=ControlPointsList,this.SurfaceForm=SurfaceForm,this.UClosed=UClosed,this.VClosed=VClosed,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,UDegree=tape[ptr++],VDegree=tape[ptr++],ControlPointsList=tape[ptr++],SurfaceForm=tape[ptr++],UClosed=tape[ptr++],VClosed=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcBSplineSurface(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect)}ToTape(){let args=[];return args.push(this.UDegree),args.push(this.VDegree),args.push(this.ControlPointsList),args.push(this.SurfaceForm),args.push(this.UClosed),args.push(this.VClosed),args.push(this.SelfIntersect),args}},IfcBSplineSurfaceWithKnots=class{constructor(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec){this.expressID=expressID,this.type=type,this.UDegree=UDegree,this.VDegree=VDegree,this.ControlPointsList=ControlPointsList,this.SurfaceForm=SurfaceForm,this.UClosed=UClosed,this.VClosed=VClosed,this.SelfIntersect=SelfIntersect,this.UMultiplicities=UMultiplicities,this.VMultiplicities=VMultiplicities,this.UKnots=UKnots,this.VKnots=VKnots,this.KnotSpec=KnotSpec}static FromTape(expressID,type,tape){let ptr=0,UDegree=tape[ptr++],VDegree=tape[ptr++],ControlPointsList=tape[ptr++],SurfaceForm=tape[ptr++],UClosed=tape[ptr++],VClosed=tape[ptr++],SelfIntersect=tape[ptr++],UMultiplicities=tape[ptr++],VMultiplicities=tape[ptr++],UKnots=tape[ptr++],VKnots=tape[ptr++],KnotSpec=tape[ptr++];return new IfcBSplineSurfaceWithKnots(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec)}ToTape(){let args=[];return args.push(this.UDegree),args.push(this.VDegree),args.push(this.ControlPointsList),args.push(this.SurfaceForm),args.push(this.UClosed),args.push(this.VClosed),args.push(this.SelfIntersect),args.push(this.UMultiplicities),args.push(this.VMultiplicities),args.push(this.UKnots),args.push(this.VKnots),args.push(this.KnotSpec),args}},IfcBeam=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBeam(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcBeamStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBeamStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcBeamType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBeamType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcBearing=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBearing(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcBearingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBearingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcBlobTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,RasterFormat,RasterCode){this.expressID=expressID,this.type=type,this.RepeatS=RepeatS,this.RepeatT=RepeatT,this.Mode=Mode,this.TextureTransform=TextureTransform,this.Parameter=Parameter,this.RasterFormat=RasterFormat,this.RasterCode=RasterCode}static FromTape(expressID,type,tape){let ptr=0,RepeatS=tape[ptr++],RepeatT=tape[ptr++],Mode=tape[ptr++],TextureTransform=tape[ptr++],Parameter=tape[ptr++],RasterFormat=tape[ptr++],RasterCode=tape[ptr++];return new IfcBlobTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,RasterFormat,RasterCode)}ToTape(){let args=[];return args.push(this.RepeatS),args.push(this.RepeatT),args.push(this.Mode),args.push(this.TextureTransform),args.push(this.Parameter),args.push(this.RasterFormat),args.push(this.RasterCode),args}},IfcBlock=class{constructor(expressID,type,Position,XLength,YLength,ZLength){this.expressID=expressID,this.type=type,this.Position=Position,this.XLength=XLength,this.YLength=YLength,this.ZLength=ZLength}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],XLength=tape[ptr++],YLength=tape[ptr++],ZLength=tape[ptr++];return new IfcBlock(expressID,type,Position,XLength,YLength,ZLength)}ToTape(){let args=[];return args.push(this.Position),args.push(this.XLength),args.push(this.YLength),args.push(this.ZLength),args}},IfcBoiler=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBoiler(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcBoilerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBoilerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcBooleanClippingResult=class{constructor(expressID,type,Operator,FirstOperand,SecondOperand){this.expressID=expressID,this.type=type,this.Operator=Operator,this.FirstOperand=FirstOperand,this.SecondOperand=SecondOperand}static FromTape(expressID,type,tape){let ptr=0,Operator=tape[ptr++],FirstOperand=tape[ptr++],SecondOperand=tape[ptr++];return new IfcBooleanClippingResult(expressID,type,Operator,FirstOperand,SecondOperand)}ToTape(){let args=[];return args.push(this.Operator),args.push(this.FirstOperand),args.push(this.SecondOperand),args}},IfcBooleanResult=class{constructor(expressID,type,Operator,FirstOperand,SecondOperand){this.expressID=expressID,this.type=type,this.Operator=Operator,this.FirstOperand=FirstOperand,this.SecondOperand=SecondOperand}static FromTape(expressID,type,tape){let ptr=0,Operator=tape[ptr++],FirstOperand=tape[ptr++],SecondOperand=tape[ptr++];return new IfcBooleanResult(expressID,type,Operator,FirstOperand,SecondOperand)}ToTape(){let args=[];return args.push(this.Operator),args.push(this.FirstOperand),args.push(this.SecondOperand),args}},IfcBoundaryCondition=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcBoundaryCondition(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcBoundaryCurve=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID,this.type=type,this.Segments=Segments,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,Segments=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcBoundaryCurve(expressID,type,Segments,SelfIntersect)}ToTape(){let args=[];return args.push(this.Segments),args.push(this.SelfIntersect),args}},IfcBoundaryEdgeCondition=class{constructor(expressID,type,Name,TranslationalStiffnessByLengthX,TranslationalStiffnessByLengthY,TranslationalStiffnessByLengthZ,RotationalStiffnessByLengthX,RotationalStiffnessByLengthY,RotationalStiffnessByLengthZ){this.expressID=expressID,this.type=type,this.Name=Name,this.TranslationalStiffnessByLengthX=TranslationalStiffnessByLengthX,this.TranslationalStiffnessByLengthY=TranslationalStiffnessByLengthY,this.TranslationalStiffnessByLengthZ=TranslationalStiffnessByLengthZ,this.RotationalStiffnessByLengthX=RotationalStiffnessByLengthX,this.RotationalStiffnessByLengthY=RotationalStiffnessByLengthY,this.RotationalStiffnessByLengthZ=RotationalStiffnessByLengthZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],TranslationalStiffnessByLengthX=tape[ptr++],TranslationalStiffnessByLengthY=tape[ptr++],TranslationalStiffnessByLengthZ=tape[ptr++],RotationalStiffnessByLengthX=tape[ptr++],RotationalStiffnessByLengthY=tape[ptr++],RotationalStiffnessByLengthZ=tape[ptr++];return new IfcBoundaryEdgeCondition(expressID,type,Name,TranslationalStiffnessByLengthX,TranslationalStiffnessByLengthY,TranslationalStiffnessByLengthZ,RotationalStiffnessByLengthX,RotationalStiffnessByLengthY,RotationalStiffnessByLengthZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.TranslationalStiffnessByLengthX),args.push(this.TranslationalStiffnessByLengthY),args.push(this.TranslationalStiffnessByLengthZ),args.push(this.RotationalStiffnessByLengthX),args.push(this.RotationalStiffnessByLengthY),args.push(this.RotationalStiffnessByLengthZ),args}},IfcBoundaryFaceCondition=class{constructor(expressID,type,Name,TranslationalStiffnessByAreaX,TranslationalStiffnessByAreaY,TranslationalStiffnessByAreaZ){this.expressID=expressID,this.type=type,this.Name=Name,this.TranslationalStiffnessByAreaX=TranslationalStiffnessByAreaX,this.TranslationalStiffnessByAreaY=TranslationalStiffnessByAreaY,this.TranslationalStiffnessByAreaZ=TranslationalStiffnessByAreaZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],TranslationalStiffnessByAreaX=tape[ptr++],TranslationalStiffnessByAreaY=tape[ptr++],TranslationalStiffnessByAreaZ=tape[ptr++];return new IfcBoundaryFaceCondition(expressID,type,Name,TranslationalStiffnessByAreaX,TranslationalStiffnessByAreaY,TranslationalStiffnessByAreaZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.TranslationalStiffnessByAreaX),args.push(this.TranslationalStiffnessByAreaY),args.push(this.TranslationalStiffnessByAreaZ),args}},IfcBoundaryNodeCondition=class{constructor(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ){this.expressID=expressID,this.type=type,this.Name=Name,this.TranslationalStiffnessX=TranslationalStiffnessX,this.TranslationalStiffnessY=TranslationalStiffnessY,this.TranslationalStiffnessZ=TranslationalStiffnessZ,this.RotationalStiffnessX=RotationalStiffnessX,this.RotationalStiffnessY=RotationalStiffnessY,this.RotationalStiffnessZ=RotationalStiffnessZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],TranslationalStiffnessX=tape[ptr++],TranslationalStiffnessY=tape[ptr++],TranslationalStiffnessZ=tape[ptr++],RotationalStiffnessX=tape[ptr++],RotationalStiffnessY=tape[ptr++],RotationalStiffnessZ=tape[ptr++];return new IfcBoundaryNodeCondition(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.TranslationalStiffnessX),args.push(this.TranslationalStiffnessY),args.push(this.TranslationalStiffnessZ),args.push(this.RotationalStiffnessX),args.push(this.RotationalStiffnessY),args.push(this.RotationalStiffnessZ),args}},IfcBoundaryNodeConditionWarping=class{constructor(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ,WarpingStiffness){this.expressID=expressID,this.type=type,this.Name=Name,this.TranslationalStiffnessX=TranslationalStiffnessX,this.TranslationalStiffnessY=TranslationalStiffnessY,this.TranslationalStiffnessZ=TranslationalStiffnessZ,this.RotationalStiffnessX=RotationalStiffnessX,this.RotationalStiffnessY=RotationalStiffnessY,this.RotationalStiffnessZ=RotationalStiffnessZ,this.WarpingStiffness=WarpingStiffness}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],TranslationalStiffnessX=tape[ptr++],TranslationalStiffnessY=tape[ptr++],TranslationalStiffnessZ=tape[ptr++],RotationalStiffnessX=tape[ptr++],RotationalStiffnessY=tape[ptr++],RotationalStiffnessZ=tape[ptr++],WarpingStiffness=tape[ptr++];return new IfcBoundaryNodeConditionWarping(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ,WarpingStiffness)}ToTape(){let args=[];return args.push(this.Name),args.push(this.TranslationalStiffnessX),args.push(this.TranslationalStiffnessY),args.push(this.TranslationalStiffnessZ),args.push(this.RotationalStiffnessX),args.push(this.RotationalStiffnessY),args.push(this.RotationalStiffnessZ),args.push(this.WarpingStiffness),args}},IfcBoundedCurve=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcBoundedCurve(expressID,type)}ToTape(){return[]}},IfcBoundedSurface=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcBoundedSurface(expressID,type)}ToTape(){return[]}},IfcBoundingBox=class{constructor(expressID,type,Corner,XDim,YDim,ZDim){this.expressID=expressID,this.type=type,this.Corner=Corner,this.XDim=XDim,this.YDim=YDim,this.ZDim=ZDim}static FromTape(expressID,type,tape){let ptr=0,Corner=tape[ptr++],XDim=tape[ptr++],YDim=tape[ptr++],ZDim=tape[ptr++];return new IfcBoundingBox(expressID,type,Corner,XDim,YDim,ZDim)}ToTape(){let args=[];return args.push(this.Corner),args.push(this.XDim),args.push(this.YDim),args.push(this.ZDim),args}},IfcBoxedHalfSpace=class{constructor(expressID,type,BaseSurface,AgreementFlag,Enclosure){this.expressID=expressID,this.type=type,this.BaseSurface=BaseSurface,this.AgreementFlag=AgreementFlag,this.Enclosure=Enclosure}static FromTape(expressID,type,tape){let ptr=0,BaseSurface=tape[ptr++],AgreementFlag=tape[ptr++],Enclosure=tape[ptr++];return new IfcBoxedHalfSpace(expressID,type,BaseSurface,AgreementFlag,Enclosure)}ToTape(){let args=[];return args.push(this.BaseSurface),args.push(this.AgreementFlag),args.push(this.Enclosure),args}},IfcBridge=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBridge(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args.push(this.PredefinedType),args}},IfcBridgePart=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBridgePart(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args.push(this.PredefinedType),args}},IfcBuilding=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,ElevationOfRefHeight,ElevationOfTerrain,BuildingAddress){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType,this.ElevationOfRefHeight=ElevationOfRefHeight,this.ElevationOfTerrain=ElevationOfTerrain,this.BuildingAddress=BuildingAddress}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++],ElevationOfRefHeight=tape[ptr++],ElevationOfTerrain=tape[ptr++],BuildingAddress=tape[ptr++];return new IfcBuilding(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,ElevationOfRefHeight,ElevationOfTerrain,BuildingAddress)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args.push(this.ElevationOfRefHeight),args.push(this.ElevationOfTerrain),args.push(this.BuildingAddress),args}},IfcBuildingElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcBuildingElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcBuildingElementPart=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBuildingElementPart(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcBuildingElementPartType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBuildingElementPartType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcBuildingElementProxy=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBuildingElementProxy(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcBuildingElementProxyType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBuildingElementProxyType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcBuildingElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcBuildingElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcBuildingStorey=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,Elevation){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType,this.Elevation=Elevation}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++],Elevation=tape[ptr++];return new IfcBuildingStorey(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,Elevation)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args.push(this.Elevation),args}},IfcBuildingSystem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,LongName){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.PredefinedType=PredefinedType,this.LongName=LongName}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],PredefinedType=tape[ptr++],LongName=tape[ptr++];return new IfcBuildingSystem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,LongName)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.PredefinedType),args.push(this.LongName),args}},IfcBurner=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBurner(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcBurnerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcBurnerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,Width,WallThickness,Girth,InternalFilletRadius){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.Depth=Depth,this.Width=Width,this.WallThickness=WallThickness,this.Girth=Girth,this.InternalFilletRadius=InternalFilletRadius}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],Depth=tape[ptr++],Width=tape[ptr++],WallThickness=tape[ptr++],Girth=tape[ptr++],InternalFilletRadius=tape[ptr++];return new IfcCShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,Width,WallThickness,Girth,InternalFilletRadius)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.Depth),args.push(this.Width),args.push(this.WallThickness),args.push(this.Girth),args.push(this.InternalFilletRadius),args}},IfcCableCarrierFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableCarrierFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCableCarrierFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableCarrierFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCableCarrierSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableCarrierSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCableCarrierSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableCarrierSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCableFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCableFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCableSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCableSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCableSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCaissonFoundation=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCaissonFoundation(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCaissonFoundationType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCaissonFoundationType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCartesianPoint=class{constructor(expressID,type,Coordinates){this.expressID=expressID,this.type=type,this.Coordinates=Coordinates}static FromTape(expressID,type,tape){let ptr=0,Coordinates=tape[ptr++];return new IfcCartesianPoint(expressID,type,Coordinates)}ToTape(){let args=[];return args.push(this.Coordinates),args}},IfcCartesianPointList=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcCartesianPointList(expressID,type)}ToTape(){return[]}},IfcCartesianPointList2D=class{constructor(expressID,type,CoordList,TagList){this.expressID=expressID,this.type=type,this.CoordList=CoordList,this.TagList=TagList}static FromTape(expressID,type,tape){let ptr=0,CoordList=tape[ptr++],TagList=tape[ptr++];return new IfcCartesianPointList2D(expressID,type,CoordList,TagList)}ToTape(){let args=[];return args.push(this.CoordList),args.push(this.TagList),args}},IfcCartesianPointList3D=class{constructor(expressID,type,CoordList,TagList){this.expressID=expressID,this.type=type,this.CoordList=CoordList,this.TagList=TagList}static FromTape(expressID,type,tape){let ptr=0,CoordList=tape[ptr++],TagList=tape[ptr++];return new IfcCartesianPointList3D(expressID,type,CoordList,TagList)}ToTape(){let args=[];return args.push(this.CoordList),args.push(this.TagList),args}},IfcCartesianTransformationOperator=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale){this.expressID=expressID,this.type=type,this.Axis1=Axis1,this.Axis2=Axis2,this.LocalOrigin=LocalOrigin,this.Scale=Scale}static FromTape(expressID,type,tape){let ptr=0,Axis1=tape[ptr++],Axis2=tape[ptr++],LocalOrigin=tape[ptr++],Scale=tape[ptr++];return new IfcCartesianTransformationOperator(expressID,type,Axis1,Axis2,LocalOrigin,Scale)}ToTape(){let args=[];return args.push(this.Axis1),args.push(this.Axis2),args.push(this.LocalOrigin),args.push(this.Scale),args}},IfcCartesianTransformationOperator2D=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale){this.expressID=expressID,this.type=type,this.Axis1=Axis1,this.Axis2=Axis2,this.LocalOrigin=LocalOrigin,this.Scale=Scale}static FromTape(expressID,type,tape){let ptr=0,Axis1=tape[ptr++],Axis2=tape[ptr++],LocalOrigin=tape[ptr++],Scale=tape[ptr++];return new IfcCartesianTransformationOperator2D(expressID,type,Axis1,Axis2,LocalOrigin,Scale)}ToTape(){let args=[];return args.push(this.Axis1),args.push(this.Axis2),args.push(this.LocalOrigin),args.push(this.Scale),args}},IfcCartesianTransformationOperator2DnonUniform=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Scale2){this.expressID=expressID,this.type=type,this.Axis1=Axis1,this.Axis2=Axis2,this.LocalOrigin=LocalOrigin,this.Scale=Scale,this.Scale2=Scale2}static FromTape(expressID,type,tape){let ptr=0,Axis1=tape[ptr++],Axis2=tape[ptr++],LocalOrigin=tape[ptr++],Scale=tape[ptr++],Scale2=tape[ptr++];return new IfcCartesianTransformationOperator2DnonUniform(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Scale2)}ToTape(){let args=[];return args.push(this.Axis1),args.push(this.Axis2),args.push(this.LocalOrigin),args.push(this.Scale),args.push(this.Scale2),args}},IfcCartesianTransformationOperator3D=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3){this.expressID=expressID,this.type=type,this.Axis1=Axis1,this.Axis2=Axis2,this.LocalOrigin=LocalOrigin,this.Scale=Scale,this.Axis3=Axis3}static FromTape(expressID,type,tape){let ptr=0,Axis1=tape[ptr++],Axis2=tape[ptr++],LocalOrigin=tape[ptr++],Scale=tape[ptr++],Axis3=tape[ptr++];return new IfcCartesianTransformationOperator3D(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3)}ToTape(){let args=[];return args.push(this.Axis1),args.push(this.Axis2),args.push(this.LocalOrigin),args.push(this.Scale),args.push(this.Axis3),args}},IfcCartesianTransformationOperator3DnonUniform=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3,Scale2,Scale3){this.expressID=expressID,this.type=type,this.Axis1=Axis1,this.Axis2=Axis2,this.LocalOrigin=LocalOrigin,this.Scale=Scale,this.Axis3=Axis3,this.Scale2=Scale2,this.Scale3=Scale3}static FromTape(expressID,type,tape){let ptr=0,Axis1=tape[ptr++],Axis2=tape[ptr++],LocalOrigin=tape[ptr++],Scale=tape[ptr++],Axis3=tape[ptr++],Scale2=tape[ptr++],Scale3=tape[ptr++];return new IfcCartesianTransformationOperator3DnonUniform(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3,Scale2,Scale3)}ToTape(){let args=[];return args.push(this.Axis1),args.push(this.Axis2),args.push(this.LocalOrigin),args.push(this.Scale),args.push(this.Axis3),args.push(this.Scale2),args.push(this.Scale3),args}},IfcCenterLineProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Curve,Thickness){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Curve=Curve,this.Thickness=Thickness}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Curve=tape[ptr++],Thickness=tape[ptr++];return new IfcCenterLineProfileDef(expressID,type,ProfileType,ProfileName,Curve,Thickness)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Curve),args.push(this.Thickness),args}},IfcChiller=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcChiller(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcChillerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcChillerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcChimney=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcChimney(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcChimneyType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcChimneyType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCircle=class{constructor(expressID,type,Position,Radius){this.expressID=expressID,this.type=type,this.Position=Position,this.Radius=Radius}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],Radius=tape[ptr++];return new IfcCircle(expressID,type,Position,Radius)}ToTape(){let args=[];return args.push(this.Position),args.push(this.Radius),args}},IfcCircleHollowProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Radius,WallThickness){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.Radius=Radius,this.WallThickness=WallThickness}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],Radius=tape[ptr++],WallThickness=tape[ptr++];return new IfcCircleHollowProfileDef(expressID,type,ProfileType,ProfileName,Position,Radius,WallThickness)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.Radius),args.push(this.WallThickness),args}},IfcCircleProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Radius){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.Radius=Radius}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],Radius=tape[ptr++];return new IfcCircleProfileDef(expressID,type,ProfileType,ProfileName,Position,Radius)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.Radius),args}},IfcCircularArcSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength,Radius,IsCCW){this.expressID=expressID,this.type=type,this.StartPoint=StartPoint,this.StartDirection=StartDirection,this.SegmentLength=SegmentLength,this.Radius=Radius,this.IsCCW=IsCCW}static FromTape(expressID,type,tape){let ptr=0,StartPoint=tape[ptr++],StartDirection=tape[ptr++],SegmentLength=tape[ptr++],Radius=tape[ptr++],IsCCW=tape[ptr++];return new IfcCircularArcSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength,Radius,IsCCW)}ToTape(){let args=[];return args.push(this.StartPoint),args.push(this.StartDirection),args.push(this.SegmentLength),args.push(this.Radius),args.push(this.IsCCW),args}},IfcCivilElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcCivilElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcCivilElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcCivilElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcClassification=class{constructor(expressID,type,Source,Edition,EditionDate,Name,Description,Location,ReferenceTokens){this.expressID=expressID,this.type=type,this.Source=Source,this.Edition=Edition,this.EditionDate=EditionDate,this.Name=Name,this.Description=Description,this.Location=Location,this.ReferenceTokens=ReferenceTokens}static FromTape(expressID,type,tape){let ptr=0,Source=tape[ptr++],Edition=tape[ptr++],EditionDate=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],Location=tape[ptr++],ReferenceTokens=tape[ptr++];return new IfcClassification(expressID,type,Source,Edition,EditionDate,Name,Description,Location,ReferenceTokens)}ToTape(){let args=[];return args.push(this.Source),args.push(this.Edition),args.push(this.EditionDate),args.push(this.Name),args.push(this.Description),args.push(this.Location),args.push(this.ReferenceTokens),args}},IfcClassificationReference=class{constructor(expressID,type,Location,Identification,Name,ReferencedSource,Description,Sort){this.expressID=expressID,this.type=type,this.Location=Location,this.Identification=Identification,this.Name=Name,this.ReferencedSource=ReferencedSource,this.Description=Description,this.Sort=Sort}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Identification=tape[ptr++],Name=tape[ptr++],ReferencedSource=tape[ptr++],Description=tape[ptr++],Sort=tape[ptr++];return new IfcClassificationReference(expressID,type,Location,Identification,Name,ReferencedSource,Description,Sort)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Identification),args.push(this.Name),args.push(this.ReferencedSource),args.push(this.Description),args.push(this.Sort),args}},IfcClosedShell=class{constructor(expressID,type,CfsFaces){this.expressID=expressID,this.type=type,this.CfsFaces=CfsFaces}static FromTape(expressID,type,tape){let ptr=0,CfsFaces=tape[ptr++];return new IfcClosedShell(expressID,type,CfsFaces)}ToTape(){let args=[];return args.push(this.CfsFaces),args}},IfcCoil=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCoil(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCoilType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCoilType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcColourRgb=class{constructor(expressID,type,Name,Red,Green,Blue){this.expressID=expressID,this.type=type,this.Name=Name,this.Red=Red,this.Green=Green,this.Blue=Blue}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Red=tape[ptr++],Green=tape[ptr++],Blue=tape[ptr++];return new IfcColourRgb(expressID,type,Name,Red,Green,Blue)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Red),args.push(this.Green),args.push(this.Blue),args}},IfcColourRgbList=class{constructor(expressID,type,ColourList){this.expressID=expressID,this.type=type,this.ColourList=ColourList}static FromTape(expressID,type,tape){let ptr=0,ColourList=tape[ptr++];return new IfcColourRgbList(expressID,type,ColourList)}ToTape(){let args=[];return args.push(this.ColourList),args}},IfcColourSpecification=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcColourSpecification(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcColumn=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcColumn(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcColumnStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcColumnStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcColumnType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcColumnType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCommunicationsAppliance=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCommunicationsAppliance(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCommunicationsApplianceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCommunicationsApplianceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcComplexProperty=class{constructor(expressID,type,Name,Description,UsageName,HasProperties){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.UsageName=UsageName,this.HasProperties=HasProperties}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],UsageName=tape[ptr++],HasProperties=tape[ptr++];return new IfcComplexProperty(expressID,type,Name,Description,UsageName,HasProperties)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.UsageName),args.push(this.HasProperties),args}},IfcComplexPropertyTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,UsageName,TemplateType,HasPropertyTemplates){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.UsageName=UsageName,this.TemplateType=TemplateType,this.HasPropertyTemplates=HasPropertyTemplates}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],UsageName=tape[ptr++],TemplateType=tape[ptr++],HasPropertyTemplates=tape[ptr++];return new IfcComplexPropertyTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,UsageName,TemplateType,HasPropertyTemplates)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.UsageName),args.push(this.TemplateType),args.push(this.HasPropertyTemplates),args}},IfcCompositeCurve=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID,this.type=type,this.Segments=Segments,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,Segments=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcCompositeCurve(expressID,type,Segments,SelfIntersect)}ToTape(){let args=[];return args.push(this.Segments),args.push(this.SelfIntersect),args}},IfcCompositeCurveOnSurface=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID,this.type=type,this.Segments=Segments,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,Segments=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcCompositeCurveOnSurface(expressID,type,Segments,SelfIntersect)}ToTape(){let args=[];return args.push(this.Segments),args.push(this.SelfIntersect),args}},IfcCompositeCurveSegment=class{constructor(expressID,type,Transition,SameSense,ParentCurve){this.expressID=expressID,this.type=type,this.Transition=Transition,this.SameSense=SameSense,this.ParentCurve=ParentCurve}static FromTape(expressID,type,tape){let ptr=0,Transition=tape[ptr++],SameSense=tape[ptr++],ParentCurve=tape[ptr++];return new IfcCompositeCurveSegment(expressID,type,Transition,SameSense,ParentCurve)}ToTape(){let args=[];return args.push(this.Transition),args.push(this.SameSense),args.push(this.ParentCurve),args}},IfcCompositeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Profiles,Label){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Profiles=Profiles,this.Label=Label}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Profiles=tape[ptr++],Label=tape[ptr++];return new IfcCompositeProfileDef(expressID,type,ProfileType,ProfileName,Profiles,Label)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Profiles),args.push(this.Label),args}},IfcCompressor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCompressor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCompressorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCompressorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCondenser=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCondenser(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCondenserType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCondenserType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcConic=class{constructor(expressID,type,Position){this.expressID=expressID,this.type=type,this.Position=Position}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++];return new IfcConic(expressID,type,Position)}ToTape(){let args=[];return args.push(this.Position),args}},IfcConnectedFaceSet=class{constructor(expressID,type,CfsFaces){this.expressID=expressID,this.type=type,this.CfsFaces=CfsFaces}static FromTape(expressID,type,tape){let ptr=0,CfsFaces=tape[ptr++];return new IfcConnectedFaceSet(expressID,type,CfsFaces)}ToTape(){let args=[];return args.push(this.CfsFaces),args}},IfcConnectionCurveGeometry=class{constructor(expressID,type,CurveOnRelatingElement,CurveOnRelatedElement){this.expressID=expressID,this.type=type,this.CurveOnRelatingElement=CurveOnRelatingElement,this.CurveOnRelatedElement=CurveOnRelatedElement}static FromTape(expressID,type,tape){let ptr=0,CurveOnRelatingElement=tape[ptr++],CurveOnRelatedElement=tape[ptr++];return new IfcConnectionCurveGeometry(expressID,type,CurveOnRelatingElement,CurveOnRelatedElement)}ToTape(){let args=[];return args.push(this.CurveOnRelatingElement),args.push(this.CurveOnRelatedElement),args}},IfcConnectionGeometry=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcConnectionGeometry(expressID,type)}ToTape(){return[]}},IfcConnectionPointEccentricity=class{constructor(expressID,type,PointOnRelatingElement,PointOnRelatedElement,EccentricityInX,EccentricityInY,EccentricityInZ){this.expressID=expressID,this.type=type,this.PointOnRelatingElement=PointOnRelatingElement,this.PointOnRelatedElement=PointOnRelatedElement,this.EccentricityInX=EccentricityInX,this.EccentricityInY=EccentricityInY,this.EccentricityInZ=EccentricityInZ}static FromTape(expressID,type,tape){let ptr=0,PointOnRelatingElement=tape[ptr++],PointOnRelatedElement=tape[ptr++],EccentricityInX=tape[ptr++],EccentricityInY=tape[ptr++],EccentricityInZ=tape[ptr++];return new IfcConnectionPointEccentricity(expressID,type,PointOnRelatingElement,PointOnRelatedElement,EccentricityInX,EccentricityInY,EccentricityInZ)}ToTape(){let args=[];return args.push(this.PointOnRelatingElement),args.push(this.PointOnRelatedElement),args.push(this.EccentricityInX),args.push(this.EccentricityInY),args.push(this.EccentricityInZ),args}},IfcConnectionPointGeometry=class{constructor(expressID,type,PointOnRelatingElement,PointOnRelatedElement){this.expressID=expressID,this.type=type,this.PointOnRelatingElement=PointOnRelatingElement,this.PointOnRelatedElement=PointOnRelatedElement}static FromTape(expressID,type,tape){let ptr=0,PointOnRelatingElement=tape[ptr++],PointOnRelatedElement=tape[ptr++];return new IfcConnectionPointGeometry(expressID,type,PointOnRelatingElement,PointOnRelatedElement)}ToTape(){let args=[];return args.push(this.PointOnRelatingElement),args.push(this.PointOnRelatedElement),args}},IfcConnectionSurfaceGeometry=class{constructor(expressID,type,SurfaceOnRelatingElement,SurfaceOnRelatedElement){this.expressID=expressID,this.type=type,this.SurfaceOnRelatingElement=SurfaceOnRelatingElement,this.SurfaceOnRelatedElement=SurfaceOnRelatedElement}static FromTape(expressID,type,tape){let ptr=0,SurfaceOnRelatingElement=tape[ptr++],SurfaceOnRelatedElement=tape[ptr++];return new IfcConnectionSurfaceGeometry(expressID,type,SurfaceOnRelatingElement,SurfaceOnRelatedElement)}ToTape(){let args=[];return args.push(this.SurfaceOnRelatingElement),args.push(this.SurfaceOnRelatedElement),args}},IfcConnectionVolumeGeometry=class{constructor(expressID,type,VolumeOnRelatingElement,VolumeOnRelatedElement){this.expressID=expressID,this.type=type,this.VolumeOnRelatingElement=VolumeOnRelatingElement,this.VolumeOnRelatedElement=VolumeOnRelatedElement}static FromTape(expressID,type,tape){let ptr=0,VolumeOnRelatingElement=tape[ptr++],VolumeOnRelatedElement=tape[ptr++];return new IfcConnectionVolumeGeometry(expressID,type,VolumeOnRelatingElement,VolumeOnRelatedElement)}ToTape(){let args=[];return args.push(this.VolumeOnRelatingElement),args.push(this.VolumeOnRelatedElement),args}},IfcConstraint=class{constructor(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.ConstraintGrade=ConstraintGrade,this.ConstraintSource=ConstraintSource,this.CreatingActor=CreatingActor,this.CreationTime=CreationTime,this.UserDefinedGrade=UserDefinedGrade}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],ConstraintGrade=tape[ptr++],ConstraintSource=tape[ptr++],CreatingActor=tape[ptr++],CreationTime=tape[ptr++],UserDefinedGrade=tape[ptr++];return new IfcConstraint(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.ConstraintGrade),args.push(this.ConstraintSource),args.push(this.CreatingActor),args.push(this.CreationTime),args.push(this.UserDefinedGrade),args}},IfcConstructionEquipmentResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Usage=Usage,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Usage=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcConstructionEquipmentResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Usage),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcConstructionEquipmentResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcConstructionEquipmentResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcConstructionMaterialResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Usage=Usage,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Usage=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcConstructionMaterialResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Usage),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcConstructionMaterialResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcConstructionMaterialResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcConstructionProductResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Usage=Usage,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Usage=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcConstructionProductResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Usage),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcConstructionProductResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcConstructionProductResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcConstructionResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Usage=Usage,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Usage=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++];return new IfcConstructionResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Usage),args.push(this.BaseCosts),args.push(this.BaseQuantity),args}},IfcConstructionResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++];return new IfcConstructionResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args.push(this.BaseCosts),args.push(this.BaseQuantity),args}},IfcContext=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.LongName=LongName,this.Phase=Phase,this.RepresentationContexts=RepresentationContexts,this.UnitsInContext=UnitsInContext}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],LongName=tape[ptr++],Phase=tape[ptr++],RepresentationContexts=tape[ptr++],UnitsInContext=tape[ptr++];return new IfcContext(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.LongName),args.push(this.Phase),args.push(this.RepresentationContexts),args.push(this.UnitsInContext),args}},IfcContextDependentUnit=class{constructor(expressID,type,Dimensions,UnitType,Name){this.expressID=expressID,this.type=type,this.Dimensions=Dimensions,this.UnitType=UnitType,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Dimensions=tape[ptr++],UnitType=tape[ptr++],Name=tape[ptr++];return new IfcContextDependentUnit(expressID,type,Dimensions,UnitType,Name)}ToTape(){let args=[];return args.push(this.Dimensions),args.push(this.UnitType),args.push(this.Name),args}},IfcControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++];return new IfcControl(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args}},IfcController=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcController(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcControllerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcControllerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcConversionBasedUnit=class{constructor(expressID,type,Dimensions,UnitType,Name,ConversionFactor){this.expressID=expressID,this.type=type,this.Dimensions=Dimensions,this.UnitType=UnitType,this.Name=Name,this.ConversionFactor=ConversionFactor}static FromTape(expressID,type,tape){let ptr=0,Dimensions=tape[ptr++],UnitType=tape[ptr++],Name=tape[ptr++],ConversionFactor=tape[ptr++];return new IfcConversionBasedUnit(expressID,type,Dimensions,UnitType,Name,ConversionFactor)}ToTape(){let args=[];return args.push(this.Dimensions),args.push(this.UnitType),args.push(this.Name),args.push(this.ConversionFactor),args}},IfcConversionBasedUnitWithOffset=class{constructor(expressID,type,Dimensions,UnitType,Name,ConversionFactor,ConversionOffset){this.expressID=expressID,this.type=type,this.Dimensions=Dimensions,this.UnitType=UnitType,this.Name=Name,this.ConversionFactor=ConversionFactor,this.ConversionOffset=ConversionOffset}static FromTape(expressID,type,tape){let ptr=0,Dimensions=tape[ptr++],UnitType=tape[ptr++],Name=tape[ptr++],ConversionFactor=tape[ptr++],ConversionOffset=tape[ptr++];return new IfcConversionBasedUnitWithOffset(expressID,type,Dimensions,UnitType,Name,ConversionFactor,ConversionOffset)}ToTape(){let args=[];return args.push(this.Dimensions),args.push(this.UnitType),args.push(this.Name),args.push(this.ConversionFactor),args.push(this.ConversionOffset),args}},IfcCooledBeam=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCooledBeam(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCooledBeamType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCooledBeamType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCoolingTower=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCoolingTower(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCoolingTowerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCoolingTowerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCoordinateOperation=class{constructor(expressID,type,SourceCRS,TargetCRS){this.expressID=expressID,this.type=type,this.SourceCRS=SourceCRS,this.TargetCRS=TargetCRS}static FromTape(expressID,type,tape){let ptr=0,SourceCRS=tape[ptr++],TargetCRS=tape[ptr++];return new IfcCoordinateOperation(expressID,type,SourceCRS,TargetCRS)}ToTape(){let args=[];return args.push(this.SourceCRS),args.push(this.TargetCRS),args}},IfcCoordinateReferenceSystem=class{constructor(expressID,type,Name,Description,GeodeticDatum,VerticalDatum){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.GeodeticDatum=GeodeticDatum,this.VerticalDatum=VerticalDatum}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],GeodeticDatum=tape[ptr++],VerticalDatum=tape[ptr++];return new IfcCoordinateReferenceSystem(expressID,type,Name,Description,GeodeticDatum,VerticalDatum)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.GeodeticDatum),args.push(this.VerticalDatum),args}},IfcCostItem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,CostValues,CostQuantities){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.PredefinedType=PredefinedType,this.CostValues=CostValues,this.CostQuantities=CostQuantities}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],PredefinedType=tape[ptr++],CostValues=tape[ptr++],CostQuantities=tape[ptr++];return new IfcCostItem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,CostValues,CostQuantities)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.PredefinedType),args.push(this.CostValues),args.push(this.CostQuantities),args}},IfcCostSchedule=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,SubmittedOn,UpdateDate){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.PredefinedType=PredefinedType,this.Status=Status,this.SubmittedOn=SubmittedOn,this.UpdateDate=UpdateDate}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],PredefinedType=tape[ptr++],Status=tape[ptr++],SubmittedOn=tape[ptr++],UpdateDate=tape[ptr++];return new IfcCostSchedule(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,SubmittedOn,UpdateDate)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.PredefinedType),args.push(this.Status),args.push(this.SubmittedOn),args.push(this.UpdateDate),args}},IfcCostValue=class{constructor(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.AppliedValue=AppliedValue,this.UnitBasis=UnitBasis,this.ApplicableDate=ApplicableDate,this.FixedUntilDate=FixedUntilDate,this.Category=Category,this.Condition=Condition,this.ArithmeticOperator=ArithmeticOperator,this.Components=Components}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],AppliedValue=tape[ptr++],UnitBasis=tape[ptr++],ApplicableDate=tape[ptr++],FixedUntilDate=tape[ptr++],Category=tape[ptr++],Condition=tape[ptr++],ArithmeticOperator=tape[ptr++],Components=tape[ptr++];return new IfcCostValue(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.AppliedValue),args.push(this.UnitBasis),args.push(this.ApplicableDate),args.push(this.FixedUntilDate),args.push(this.Category),args.push(this.Condition),args.push(this.ArithmeticOperator),args.push(this.Components),args}},IfcCovering=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCovering(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCoveringType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCoveringType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCrewResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Usage=Usage,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Usage=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCrewResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Usage),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcCrewResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCrewResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcCsgPrimitive3D=class{constructor(expressID,type,Position){this.expressID=expressID,this.type=type,this.Position=Position}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++];return new IfcCsgPrimitive3D(expressID,type,Position)}ToTape(){let args=[];return args.push(this.Position),args}},IfcCsgSolid=class{constructor(expressID,type,TreeRootExpression){this.expressID=expressID,this.type=type,this.TreeRootExpression=TreeRootExpression}static FromTape(expressID,type,tape){let ptr=0,TreeRootExpression=tape[ptr++];return new IfcCsgSolid(expressID,type,TreeRootExpression)}ToTape(){let args=[];return args.push(this.TreeRootExpression),args}},IfcCurrencyRelationship=class{constructor(expressID,type,Name,Description,RelatingMonetaryUnit,RelatedMonetaryUnit,ExchangeRate,RateDateTime,RateSource){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatingMonetaryUnit=RelatingMonetaryUnit,this.RelatedMonetaryUnit=RelatedMonetaryUnit,this.ExchangeRate=ExchangeRate,this.RateDateTime=RateDateTime,this.RateSource=RateSource}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatingMonetaryUnit=tape[ptr++],RelatedMonetaryUnit=tape[ptr++],ExchangeRate=tape[ptr++],RateDateTime=tape[ptr++],RateSource=tape[ptr++];return new IfcCurrencyRelationship(expressID,type,Name,Description,RelatingMonetaryUnit,RelatedMonetaryUnit,ExchangeRate,RateDateTime,RateSource)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatingMonetaryUnit),args.push(this.RelatedMonetaryUnit),args.push(this.ExchangeRate),args.push(this.RateDateTime),args.push(this.RateSource),args}},IfcCurtainWall=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCurtainWall(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcCurtainWallType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcCurtainWallType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcCurve=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcCurve(expressID,type)}ToTape(){return[]}},IfcCurveBoundedPlane=class{constructor(expressID,type,BasisSurface,OuterBoundary,InnerBoundaries){this.expressID=expressID,this.type=type,this.BasisSurface=BasisSurface,this.OuterBoundary=OuterBoundary,this.InnerBoundaries=InnerBoundaries}static FromTape(expressID,type,tape){let ptr=0,BasisSurface=tape[ptr++],OuterBoundary=tape[ptr++],InnerBoundaries=tape[ptr++];return new IfcCurveBoundedPlane(expressID,type,BasisSurface,OuterBoundary,InnerBoundaries)}ToTape(){let args=[];return args.push(this.BasisSurface),args.push(this.OuterBoundary),args.push(this.InnerBoundaries),args}},IfcCurveBoundedSurface=class{constructor(expressID,type,BasisSurface,Boundaries,ImplicitOuter){this.expressID=expressID,this.type=type,this.BasisSurface=BasisSurface,this.Boundaries=Boundaries,this.ImplicitOuter=ImplicitOuter}static FromTape(expressID,type,tape){let ptr=0,BasisSurface=tape[ptr++],Boundaries=tape[ptr++],ImplicitOuter=tape[ptr++];return new IfcCurveBoundedSurface(expressID,type,BasisSurface,Boundaries,ImplicitOuter)}ToTape(){let args=[];return args.push(this.BasisSurface),args.push(this.Boundaries),args.push(this.ImplicitOuter),args}},IfcCurveSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength){this.expressID=expressID,this.type=type,this.StartPoint=StartPoint,this.StartDirection=StartDirection,this.SegmentLength=SegmentLength}static FromTape(expressID,type,tape){let ptr=0,StartPoint=tape[ptr++],StartDirection=tape[ptr++],SegmentLength=tape[ptr++];return new IfcCurveSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength)}ToTape(){let args=[];return args.push(this.StartPoint),args.push(this.StartDirection),args.push(this.SegmentLength),args}},IfcCurveStyle=class{constructor(expressID,type,Name,CurveFont,CurveWidth,CurveColour,ModelOrDraughting){this.expressID=expressID,this.type=type,this.Name=Name,this.CurveFont=CurveFont,this.CurveWidth=CurveWidth,this.CurveColour=CurveColour,this.ModelOrDraughting=ModelOrDraughting}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],CurveFont=tape[ptr++],CurveWidth=tape[ptr++],CurveColour=tape[ptr++],ModelOrDraughting=tape[ptr++];return new IfcCurveStyle(expressID,type,Name,CurveFont,CurveWidth,CurveColour,ModelOrDraughting)}ToTape(){let args=[];return args.push(this.Name),args.push(this.CurveFont),args.push(this.CurveWidth),args.push(this.CurveColour),args.push(this.ModelOrDraughting),args}},IfcCurveStyleFont=class{constructor(expressID,type,Name,PatternList){this.expressID=expressID,this.type=type,this.Name=Name,this.PatternList=PatternList}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],PatternList=tape[ptr++];return new IfcCurveStyleFont(expressID,type,Name,PatternList)}ToTape(){let args=[];return args.push(this.Name),args.push(this.PatternList),args}},IfcCurveStyleFontAndScaling=class{constructor(expressID,type,Name,CurveFont,CurveFontScaling){this.expressID=expressID,this.type=type,this.Name=Name,this.CurveFont=CurveFont,this.CurveFontScaling=CurveFontScaling}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],CurveFont=tape[ptr++],CurveFontScaling=tape[ptr++];return new IfcCurveStyleFontAndScaling(expressID,type,Name,CurveFont,CurveFontScaling)}ToTape(){let args=[];return args.push(this.Name),args.push(this.CurveFont),args.push(this.CurveFontScaling),args}},IfcCurveStyleFontPattern=class{constructor(expressID,type,VisibleSegmentLength,InvisibleSegmentLength){this.expressID=expressID,this.type=type,this.VisibleSegmentLength=VisibleSegmentLength,this.InvisibleSegmentLength=InvisibleSegmentLength}static FromTape(expressID,type,tape){let ptr=0,VisibleSegmentLength=tape[ptr++],InvisibleSegmentLength=tape[ptr++];return new IfcCurveStyleFontPattern(expressID,type,VisibleSegmentLength,InvisibleSegmentLength)}ToTape(){let args=[];return args.push(this.VisibleSegmentLength),args.push(this.InvisibleSegmentLength),args}},IfcCylindricalSurface=class{constructor(expressID,type,Position,Radius){this.expressID=expressID,this.type=type,this.Position=Position,this.Radius=Radius}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],Radius=tape[ptr++];return new IfcCylindricalSurface(expressID,type,Position,Radius)}ToTape(){let args=[];return args.push(this.Position),args.push(this.Radius),args}},IfcDamper=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDamper(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcDamperType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDamperType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcDeepFoundation=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcDeepFoundation(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcDeepFoundationType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcDeepFoundationType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcDerivedProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.ParentProfile=ParentProfile,this.Operator=Operator,this.Label=Label}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],ParentProfile=tape[ptr++],Operator=tape[ptr++],Label=tape[ptr++];return new IfcDerivedProfileDef(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.ParentProfile),args.push(this.Operator),args.push(this.Label),args}},IfcDerivedUnit=class{constructor(expressID,type,Elements,UnitType,UserDefinedType){this.expressID=expressID,this.type=type,this.Elements=Elements,this.UnitType=UnitType,this.UserDefinedType=UserDefinedType}static FromTape(expressID,type,tape){let ptr=0,Elements=tape[ptr++],UnitType=tape[ptr++],UserDefinedType=tape[ptr++];return new IfcDerivedUnit(expressID,type,Elements,UnitType,UserDefinedType)}ToTape(){let args=[];return args.push(this.Elements),args.push(this.UnitType),args.push(this.UserDefinedType),args}},IfcDerivedUnitElement=class{constructor(expressID,type,Unit,Exponent){this.expressID=expressID,this.type=type,this.Unit=Unit,this.Exponent=Exponent}static FromTape(expressID,type,tape){let ptr=0,Unit=tape[ptr++],Exponent=tape[ptr++];return new IfcDerivedUnitElement(expressID,type,Unit,Exponent)}ToTape(){let args=[];return args.push(this.Unit),args.push(this.Exponent),args}},IfcDimensionalExponents=class{constructor(expressID,type,LengthExponent,MassExponent,TimeExponent,ElectricCurrentExponent,ThermodynamicTemperatureExponent,AmountOfSubstanceExponent,LuminousIntensityExponent){this.expressID=expressID,this.type=type,this.LengthExponent=LengthExponent,this.MassExponent=MassExponent,this.TimeExponent=TimeExponent,this.ElectricCurrentExponent=ElectricCurrentExponent,this.ThermodynamicTemperatureExponent=ThermodynamicTemperatureExponent,this.AmountOfSubstanceExponent=AmountOfSubstanceExponent,this.LuminousIntensityExponent=LuminousIntensityExponent}static FromTape(expressID,type,tape){let ptr=0,LengthExponent=tape[ptr++],MassExponent=tape[ptr++],TimeExponent=tape[ptr++],ElectricCurrentExponent=tape[ptr++],ThermodynamicTemperatureExponent=tape[ptr++],AmountOfSubstanceExponent=tape[ptr++],LuminousIntensityExponent=tape[ptr++];return new IfcDimensionalExponents(expressID,type,LengthExponent,MassExponent,TimeExponent,ElectricCurrentExponent,ThermodynamicTemperatureExponent,AmountOfSubstanceExponent,LuminousIntensityExponent)}ToTape(){let args=[];return args.push(this.LengthExponent),args.push(this.MassExponent),args.push(this.TimeExponent),args.push(this.ElectricCurrentExponent),args.push(this.ThermodynamicTemperatureExponent),args.push(this.AmountOfSubstanceExponent),args.push(this.LuminousIntensityExponent),args}},IfcDirection=class{constructor(expressID,type,DirectionRatios){this.expressID=expressID,this.type=type,this.DirectionRatios=DirectionRatios}static FromTape(expressID,type,tape){let ptr=0,DirectionRatios=tape[ptr++];return new IfcDirection(expressID,type,DirectionRatios)}ToTape(){let args=[];return args.push(this.DirectionRatios),args}},IfcDiscreteAccessory=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDiscreteAccessory(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcDiscreteAccessoryType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDiscreteAccessoryType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcDistanceExpression=class{constructor(expressID,type,DistanceAlong,OffsetLateral,OffsetVertical,OffsetLongitudinal,AlongHorizontal){this.expressID=expressID,this.type=type,this.DistanceAlong=DistanceAlong,this.OffsetLateral=OffsetLateral,this.OffsetVertical=OffsetVertical,this.OffsetLongitudinal=OffsetLongitudinal,this.AlongHorizontal=AlongHorizontal}static FromTape(expressID,type,tape){let ptr=0,DistanceAlong=tape[ptr++],OffsetLateral=tape[ptr++],OffsetVertical=tape[ptr++],OffsetLongitudinal=tape[ptr++],AlongHorizontal=tape[ptr++];return new IfcDistanceExpression(expressID,type,DistanceAlong,OffsetLateral,OffsetVertical,OffsetLongitudinal,AlongHorizontal)}ToTape(){let args=[];return args.push(this.DistanceAlong),args.push(this.OffsetLateral),args.push(this.OffsetVertical),args.push(this.OffsetLongitudinal),args.push(this.AlongHorizontal),args}},IfcDistributionChamberElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDistributionChamberElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcDistributionChamberElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDistributionChamberElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcDistributionCircuit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.LongName=LongName,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],LongName=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDistributionCircuit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.LongName),args.push(this.PredefinedType),args}},IfcDistributionControlElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcDistributionControlElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcDistributionControlElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcDistributionControlElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcDistributionElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcDistributionElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcDistributionElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcDistributionElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcDistributionFlowElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcDistributionFlowElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcDistributionFlowElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcDistributionFlowElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcDistributionPort=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,FlowDirection,PredefinedType,SystemType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.FlowDirection=FlowDirection,this.PredefinedType=PredefinedType,this.SystemType=SystemType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],FlowDirection=tape[ptr++],PredefinedType=tape[ptr++],SystemType=tape[ptr++];return new IfcDistributionPort(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,FlowDirection,PredefinedType,SystemType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.FlowDirection),args.push(this.PredefinedType),args.push(this.SystemType),args}},IfcDistributionSystem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.LongName=LongName,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],LongName=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDistributionSystem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.LongName),args.push(this.PredefinedType),args}},IfcDocumentInformation=class{constructor(expressID,type,Identification,Name,Description,Location,Purpose,IntendedUse,Scope,Revision,DocumentOwner,Editors,CreationTime,LastRevisionTime,ElectronicFormat,ValidFrom,ValidUntil,Confidentiality,Status){this.expressID=expressID,this.type=type,this.Identification=Identification,this.Name=Name,this.Description=Description,this.Location=Location,this.Purpose=Purpose,this.IntendedUse=IntendedUse,this.Scope=Scope,this.Revision=Revision,this.DocumentOwner=DocumentOwner,this.Editors=Editors,this.CreationTime=CreationTime,this.LastRevisionTime=LastRevisionTime,this.ElectronicFormat=ElectronicFormat,this.ValidFrom=ValidFrom,this.ValidUntil=ValidUntil,this.Confidentiality=Confidentiality,this.Status=Status}static FromTape(expressID,type,tape){let ptr=0,Identification=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],Location=tape[ptr++],Purpose=tape[ptr++],IntendedUse=tape[ptr++],Scope=tape[ptr++],Revision=tape[ptr++],DocumentOwner=tape[ptr++],Editors=tape[ptr++],CreationTime=tape[ptr++],LastRevisionTime=tape[ptr++],ElectronicFormat=tape[ptr++],ValidFrom=tape[ptr++],ValidUntil=tape[ptr++],Confidentiality=tape[ptr++],Status=tape[ptr++];return new IfcDocumentInformation(expressID,type,Identification,Name,Description,Location,Purpose,IntendedUse,Scope,Revision,DocumentOwner,Editors,CreationTime,LastRevisionTime,ElectronicFormat,ValidFrom,ValidUntil,Confidentiality,Status)}ToTape(){let args=[];return args.push(this.Identification),args.push(this.Name),args.push(this.Description),args.push(this.Location),args.push(this.Purpose),args.push(this.IntendedUse),args.push(this.Scope),args.push(this.Revision),args.push(this.DocumentOwner),args.push(this.Editors),args.push(this.CreationTime),args.push(this.LastRevisionTime),args.push(this.ElectronicFormat),args.push(this.ValidFrom),args.push(this.ValidUntil),args.push(this.Confidentiality),args.push(this.Status),args}},IfcDocumentInformationRelationship=class{constructor(expressID,type,Name,Description,RelatingDocument,RelatedDocuments,RelationshipType){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatingDocument=RelatingDocument,this.RelatedDocuments=RelatedDocuments,this.RelationshipType=RelationshipType}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatingDocument=tape[ptr++],RelatedDocuments=tape[ptr++],RelationshipType=tape[ptr++];return new IfcDocumentInformationRelationship(expressID,type,Name,Description,RelatingDocument,RelatedDocuments,RelationshipType)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatingDocument),args.push(this.RelatedDocuments),args.push(this.RelationshipType),args}},IfcDocumentReference=class{constructor(expressID,type,Location,Identification,Name,Description,ReferencedDocument){this.expressID=expressID,this.type=type,this.Location=Location,this.Identification=Identification,this.Name=Name,this.Description=Description,this.ReferencedDocument=ReferencedDocument}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Identification=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ReferencedDocument=tape[ptr++];return new IfcDocumentReference(expressID,type,Location,Identification,Name,Description,ReferencedDocument)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Identification),args.push(this.Name),args.push(this.Description),args.push(this.ReferencedDocument),args}},IfcDoor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.OverallHeight=OverallHeight,this.OverallWidth=OverallWidth,this.PredefinedType=PredefinedType,this.OperationType=OperationType,this.UserDefinedOperationType=UserDefinedOperationType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],OverallHeight=tape[ptr++],OverallWidth=tape[ptr++],PredefinedType=tape[ptr++],OperationType=tape[ptr++],UserDefinedOperationType=tape[ptr++];return new IfcDoor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.OverallHeight),args.push(this.OverallWidth),args.push(this.PredefinedType),args.push(this.OperationType),args.push(this.UserDefinedOperationType),args}},IfcDoorLiningProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,ThresholdDepth,ThresholdThickness,TransomThickness,TransomOffset,LiningOffset,ThresholdOffset,CasingThickness,CasingDepth,ShapeAspectStyle,LiningToPanelOffsetX,LiningToPanelOffsetY){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.LiningDepth=LiningDepth,this.LiningThickness=LiningThickness,this.ThresholdDepth=ThresholdDepth,this.ThresholdThickness=ThresholdThickness,this.TransomThickness=TransomThickness,this.TransomOffset=TransomOffset,this.LiningOffset=LiningOffset,this.ThresholdOffset=ThresholdOffset,this.CasingThickness=CasingThickness,this.CasingDepth=CasingDepth,this.ShapeAspectStyle=ShapeAspectStyle,this.LiningToPanelOffsetX=LiningToPanelOffsetX,this.LiningToPanelOffsetY=LiningToPanelOffsetY}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],LiningDepth=tape[ptr++],LiningThickness=tape[ptr++],ThresholdDepth=tape[ptr++],ThresholdThickness=tape[ptr++],TransomThickness=tape[ptr++],TransomOffset=tape[ptr++],LiningOffset=tape[ptr++],ThresholdOffset=tape[ptr++],CasingThickness=tape[ptr++],CasingDepth=tape[ptr++],ShapeAspectStyle=tape[ptr++],LiningToPanelOffsetX=tape[ptr++],LiningToPanelOffsetY=tape[ptr++];return new IfcDoorLiningProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,ThresholdDepth,ThresholdThickness,TransomThickness,TransomOffset,LiningOffset,ThresholdOffset,CasingThickness,CasingDepth,ShapeAspectStyle,LiningToPanelOffsetX,LiningToPanelOffsetY)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.LiningDepth),args.push(this.LiningThickness),args.push(this.ThresholdDepth),args.push(this.ThresholdThickness),args.push(this.TransomThickness),args.push(this.TransomOffset),args.push(this.LiningOffset),args.push(this.ThresholdOffset),args.push(this.CasingThickness),args.push(this.CasingDepth),args.push(this.ShapeAspectStyle),args.push(this.LiningToPanelOffsetX),args.push(this.LiningToPanelOffsetY),args}},IfcDoorPanelProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,PanelDepth,PanelOperation,PanelWidth,PanelPosition,ShapeAspectStyle){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.PanelDepth=PanelDepth,this.PanelOperation=PanelOperation,this.PanelWidth=PanelWidth,this.PanelPosition=PanelPosition,this.ShapeAspectStyle=ShapeAspectStyle}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],PanelDepth=tape[ptr++],PanelOperation=tape[ptr++],PanelWidth=tape[ptr++],PanelPosition=tape[ptr++],ShapeAspectStyle=tape[ptr++];return new IfcDoorPanelProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,PanelDepth,PanelOperation,PanelWidth,PanelPosition,ShapeAspectStyle)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.PanelDepth),args.push(this.PanelOperation),args.push(this.PanelWidth),args.push(this.PanelPosition),args.push(this.ShapeAspectStyle),args}},IfcDoorStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.OverallHeight=OverallHeight,this.OverallWidth=OverallWidth,this.PredefinedType=PredefinedType,this.OperationType=OperationType,this.UserDefinedOperationType=UserDefinedOperationType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],OverallHeight=tape[ptr++],OverallWidth=tape[ptr++],PredefinedType=tape[ptr++],OperationType=tape[ptr++],UserDefinedOperationType=tape[ptr++];return new IfcDoorStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.OverallHeight),args.push(this.OverallWidth),args.push(this.PredefinedType),args.push(this.OperationType),args.push(this.UserDefinedOperationType),args}},IfcDoorStyle=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,OperationType,ConstructionType,ParameterTakesPrecedence,Sizeable){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.OperationType=OperationType,this.ConstructionType=ConstructionType,this.ParameterTakesPrecedence=ParameterTakesPrecedence,this.Sizeable=Sizeable}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],OperationType=tape[ptr++],ConstructionType=tape[ptr++],ParameterTakesPrecedence=tape[ptr++],Sizeable=tape[ptr++];return new IfcDoorStyle(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,OperationType,ConstructionType,ParameterTakesPrecedence,Sizeable)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.OperationType),args.push(this.ConstructionType),args.push(this.ParameterTakesPrecedence),args.push(this.Sizeable),args}},IfcDoorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,OperationType,ParameterTakesPrecedence,UserDefinedOperationType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.OperationType=OperationType,this.ParameterTakesPrecedence=ParameterTakesPrecedence,this.UserDefinedOperationType=UserDefinedOperationType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],OperationType=tape[ptr++],ParameterTakesPrecedence=tape[ptr++],UserDefinedOperationType=tape[ptr++];return new IfcDoorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,OperationType,ParameterTakesPrecedence,UserDefinedOperationType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.OperationType),args.push(this.ParameterTakesPrecedence),args.push(this.UserDefinedOperationType),args}},IfcDraughtingPreDefinedColour=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcDraughtingPreDefinedColour(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcDraughtingPreDefinedCurveFont=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcDraughtingPreDefinedCurveFont(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcDuctFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDuctFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcDuctFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDuctFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcDuctSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDuctSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcDuctSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDuctSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcDuctSilencer=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDuctSilencer(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcDuctSilencerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcDuctSilencerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcEdge=class{constructor(expressID,type,EdgeStart,EdgeEnd){this.expressID=expressID,this.type=type,this.EdgeStart=EdgeStart,this.EdgeEnd=EdgeEnd}static FromTape(expressID,type,tape){let ptr=0,EdgeStart=tape[ptr++],EdgeEnd=tape[ptr++];return new IfcEdge(expressID,type,EdgeStart,EdgeEnd)}ToTape(){let args=[];return args.push(this.EdgeStart),args.push(this.EdgeEnd),args}},IfcEdgeCurve=class{constructor(expressID,type,EdgeStart,EdgeEnd,EdgeGeometry,SameSense){this.expressID=expressID,this.type=type,this.EdgeStart=EdgeStart,this.EdgeEnd=EdgeEnd,this.EdgeGeometry=EdgeGeometry,this.SameSense=SameSense}static FromTape(expressID,type,tape){let ptr=0,EdgeStart=tape[ptr++],EdgeEnd=tape[ptr++],EdgeGeometry=tape[ptr++],SameSense=tape[ptr++];return new IfcEdgeCurve(expressID,type,EdgeStart,EdgeEnd,EdgeGeometry,SameSense)}ToTape(){let args=[];return args.push(this.EdgeStart),args.push(this.EdgeEnd),args.push(this.EdgeGeometry),args.push(this.SameSense),args}},IfcEdgeLoop=class{constructor(expressID,type,EdgeList){this.expressID=expressID,this.type=type,this.EdgeList=EdgeList}static FromTape(expressID,type,tape){let ptr=0,EdgeList=tape[ptr++];return new IfcEdgeLoop(expressID,type,EdgeList)}ToTape(){let args=[];return args.push(this.EdgeList),args}},IfcElectricAppliance=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricAppliance(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcElectricApplianceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricApplianceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcElectricDistributionBoard=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricDistributionBoard(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcElectricDistributionBoardType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricDistributionBoardType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcElectricFlowStorageDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricFlowStorageDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcElectricFlowStorageDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricFlowStorageDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcElectricGenerator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricGenerator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcElectricGeneratorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricGeneratorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcElectricMotor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricMotor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcElectricMotorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricMotorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcElectricTimeControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricTimeControl(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcElectricTimeControlType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElectricTimeControlType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcElementAssembly=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,AssemblyPlace,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.AssemblyPlace=AssemblyPlace,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],AssemblyPlace=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElementAssembly(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,AssemblyPlace,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.AssemblyPlace),args.push(this.PredefinedType),args}},IfcElementAssemblyType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcElementAssemblyType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcElementComponent=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcElementComponent(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcElementComponentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcElementComponentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcElementQuantity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,MethodOfMeasurement,Quantities){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.MethodOfMeasurement=MethodOfMeasurement,this.Quantities=Quantities}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],MethodOfMeasurement=tape[ptr++],Quantities=tape[ptr++];return new IfcElementQuantity(expressID,type,GlobalId,OwnerHistory,Name,Description,MethodOfMeasurement,Quantities)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.MethodOfMeasurement),args.push(this.Quantities),args}},IfcElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcElementarySurface=class{constructor(expressID,type,Position){this.expressID=expressID,this.type=type,this.Position=Position}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++];return new IfcElementarySurface(expressID,type,Position)}ToTape(){let args=[];return args.push(this.Position),args}},IfcEllipse=class{constructor(expressID,type,Position,SemiAxis1,SemiAxis2){this.expressID=expressID,this.type=type,this.Position=Position,this.SemiAxis1=SemiAxis1,this.SemiAxis2=SemiAxis2}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],SemiAxis1=tape[ptr++],SemiAxis2=tape[ptr++];return new IfcEllipse(expressID,type,Position,SemiAxis1,SemiAxis2)}ToTape(){let args=[];return args.push(this.Position),args.push(this.SemiAxis1),args.push(this.SemiAxis2),args}},IfcEllipseProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,SemiAxis1,SemiAxis2){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.SemiAxis1=SemiAxis1,this.SemiAxis2=SemiAxis2}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],SemiAxis1=tape[ptr++],SemiAxis2=tape[ptr++];return new IfcEllipseProfileDef(expressID,type,ProfileType,ProfileName,Position,SemiAxis1,SemiAxis2)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.SemiAxis1),args.push(this.SemiAxis2),args}},IfcEnergyConversionDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcEnergyConversionDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcEnergyConversionDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcEnergyConversionDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcEngine=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcEngine(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcEngineType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcEngineType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcEvaporativeCooler=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcEvaporativeCooler(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcEvaporativeCoolerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcEvaporativeCoolerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcEvaporator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcEvaporator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcEvaporatorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcEvaporatorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcEvent=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType,EventTriggerType,UserDefinedEventTriggerType,EventOccurenceTime){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.PredefinedType=PredefinedType,this.EventTriggerType=EventTriggerType,this.UserDefinedEventTriggerType=UserDefinedEventTriggerType,this.EventOccurenceTime=EventOccurenceTime}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],PredefinedType=tape[ptr++],EventTriggerType=tape[ptr++],UserDefinedEventTriggerType=tape[ptr++],EventOccurenceTime=tape[ptr++];return new IfcEvent(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType,EventTriggerType,UserDefinedEventTriggerType,EventOccurenceTime)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.PredefinedType),args.push(this.EventTriggerType),args.push(this.UserDefinedEventTriggerType),args.push(this.EventOccurenceTime),args}},IfcEventTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ActualDate,EarlyDate,LateDate,ScheduleDate){this.expressID=expressID,this.type=type,this.Name=Name,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.ActualDate=ActualDate,this.EarlyDate=EarlyDate,this.LateDate=LateDate,this.ScheduleDate=ScheduleDate}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],ActualDate=tape[ptr++],EarlyDate=tape[ptr++],LateDate=tape[ptr++],ScheduleDate=tape[ptr++];return new IfcEventTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ActualDate,EarlyDate,LateDate,ScheduleDate)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.ActualDate),args.push(this.EarlyDate),args.push(this.LateDate),args.push(this.ScheduleDate),args}},IfcEventType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,EventTriggerType,UserDefinedEventTriggerType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ProcessType=ProcessType,this.PredefinedType=PredefinedType,this.EventTriggerType=EventTriggerType,this.UserDefinedEventTriggerType=UserDefinedEventTriggerType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ProcessType=tape[ptr++],PredefinedType=tape[ptr++],EventTriggerType=tape[ptr++],UserDefinedEventTriggerType=tape[ptr++];return new IfcEventType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,EventTriggerType,UserDefinedEventTriggerType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ProcessType),args.push(this.PredefinedType),args.push(this.EventTriggerType),args.push(this.UserDefinedEventTriggerType),args}},IfcExtendedProperties=class{constructor(expressID,type,Name,Description,Properties2){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Properties=Properties2}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Properties2=tape[ptr++];return new IfcExtendedProperties(expressID,type,Name,Description,Properties2)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Properties),args}},IfcExternalInformation=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcExternalInformation(expressID,type)}ToTape(){return[]}},IfcExternalReference=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID,this.type=type,this.Location=Location,this.Identification=Identification,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Identification=tape[ptr++],Name=tape[ptr++];return new IfcExternalReference(expressID,type,Location,Identification,Name)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Identification),args.push(this.Name),args}},IfcExternalReferenceRelationship=class{constructor(expressID,type,Name,Description,RelatingReference,RelatedResourceObjects){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatingReference=RelatingReference,this.RelatedResourceObjects=RelatedResourceObjects}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatingReference=tape[ptr++],RelatedResourceObjects=tape[ptr++];return new IfcExternalReferenceRelationship(expressID,type,Name,Description,RelatingReference,RelatedResourceObjects)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatingReference),args.push(this.RelatedResourceObjects),args}},IfcExternalSpatialElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],PredefinedType=tape[ptr++];return new IfcExternalSpatialElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.PredefinedType),args}},IfcExternalSpatialStructureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++];return new IfcExternalSpatialStructureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args}},IfcExternallyDefinedHatchStyle=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID,this.type=type,this.Location=Location,this.Identification=Identification,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Identification=tape[ptr++],Name=tape[ptr++];return new IfcExternallyDefinedHatchStyle(expressID,type,Location,Identification,Name)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Identification),args.push(this.Name),args}},IfcExternallyDefinedSurfaceStyle=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID,this.type=type,this.Location=Location,this.Identification=Identification,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Identification=tape[ptr++],Name=tape[ptr++];return new IfcExternallyDefinedSurfaceStyle(expressID,type,Location,Identification,Name)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Identification),args.push(this.Name),args}},IfcExternallyDefinedTextFont=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID,this.type=type,this.Location=Location,this.Identification=Identification,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Identification=tape[ptr++],Name=tape[ptr++];return new IfcExternallyDefinedTextFont(expressID,type,Location,Identification,Name)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Identification),args.push(this.Name),args}},IfcExtrudedAreaSolid=class{constructor(expressID,type,SweptArea,Position,ExtrudedDirection,Depth){this.expressID=expressID,this.type=type,this.SweptArea=SweptArea,this.Position=Position,this.ExtrudedDirection=ExtrudedDirection,this.Depth=Depth}static FromTape(expressID,type,tape){let ptr=0,SweptArea=tape[ptr++],Position=tape[ptr++],ExtrudedDirection=tape[ptr++],Depth=tape[ptr++];return new IfcExtrudedAreaSolid(expressID,type,SweptArea,Position,ExtrudedDirection,Depth)}ToTape(){let args=[];return args.push(this.SweptArea),args.push(this.Position),args.push(this.ExtrudedDirection),args.push(this.Depth),args}},IfcExtrudedAreaSolidTapered=class{constructor(expressID,type,SweptArea,Position,ExtrudedDirection,Depth,EndSweptArea){this.expressID=expressID,this.type=type,this.SweptArea=SweptArea,this.Position=Position,this.ExtrudedDirection=ExtrudedDirection,this.Depth=Depth,this.EndSweptArea=EndSweptArea}static FromTape(expressID,type,tape){let ptr=0,SweptArea=tape[ptr++],Position=tape[ptr++],ExtrudedDirection=tape[ptr++],Depth=tape[ptr++],EndSweptArea=tape[ptr++];return new IfcExtrudedAreaSolidTapered(expressID,type,SweptArea,Position,ExtrudedDirection,Depth,EndSweptArea)}ToTape(){let args=[];return args.push(this.SweptArea),args.push(this.Position),args.push(this.ExtrudedDirection),args.push(this.Depth),args.push(this.EndSweptArea),args}},IfcFace=class{constructor(expressID,type,Bounds){this.expressID=expressID,this.type=type,this.Bounds=Bounds}static FromTape(expressID,type,tape){let ptr=0,Bounds=tape[ptr++];return new IfcFace(expressID,type,Bounds)}ToTape(){let args=[];return args.push(this.Bounds),args}},IfcFaceBasedSurfaceModel=class{constructor(expressID,type,FbsmFaces){this.expressID=expressID,this.type=type,this.FbsmFaces=FbsmFaces}static FromTape(expressID,type,tape){let ptr=0,FbsmFaces=tape[ptr++];return new IfcFaceBasedSurfaceModel(expressID,type,FbsmFaces)}ToTape(){let args=[];return args.push(this.FbsmFaces),args}},IfcFaceBound=class{constructor(expressID,type,Bound,Orientation){this.expressID=expressID,this.type=type,this.Bound=Bound,this.Orientation=Orientation}static FromTape(expressID,type,tape){let ptr=0,Bound=tape[ptr++],Orientation=tape[ptr++];return new IfcFaceBound(expressID,type,Bound,Orientation)}ToTape(){let args=[];return args.push(this.Bound),args.push(this.Orientation),args}},IfcFaceOuterBound=class{constructor(expressID,type,Bound,Orientation){this.expressID=expressID,this.type=type,this.Bound=Bound,this.Orientation=Orientation}static FromTape(expressID,type,tape){let ptr=0,Bound=tape[ptr++],Orientation=tape[ptr++];return new IfcFaceOuterBound(expressID,type,Bound,Orientation)}ToTape(){let args=[];return args.push(this.Bound),args.push(this.Orientation),args}},IfcFaceSurface=class{constructor(expressID,type,Bounds,FaceSurface,SameSense){this.expressID=expressID,this.type=type,this.Bounds=Bounds,this.FaceSurface=FaceSurface,this.SameSense=SameSense}static FromTape(expressID,type,tape){let ptr=0,Bounds=tape[ptr++],FaceSurface=tape[ptr++],SameSense=tape[ptr++];return new IfcFaceSurface(expressID,type,Bounds,FaceSurface,SameSense)}ToTape(){let args=[];return args.push(this.Bounds),args.push(this.FaceSurface),args.push(this.SameSense),args}},IfcFacetedBrep=class{constructor(expressID,type,Outer){this.expressID=expressID,this.type=type,this.Outer=Outer}static FromTape(expressID,type,tape){let ptr=0,Outer=tape[ptr++];return new IfcFacetedBrep(expressID,type,Outer)}ToTape(){let args=[];return args.push(this.Outer),args}},IfcFacetedBrepWithVoids=class{constructor(expressID,type,Outer,Voids){this.expressID=expressID,this.type=type,this.Outer=Outer,this.Voids=Voids}static FromTape(expressID,type,tape){let ptr=0,Outer=tape[ptr++],Voids=tape[ptr++];return new IfcFacetedBrepWithVoids(expressID,type,Outer,Voids)}ToTape(){let args=[];return args.push(this.Outer),args.push(this.Voids),args}},IfcFacility=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++];return new IfcFacility(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args}},IfcFacilityPart=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++];return new IfcFacilityPart(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args}},IfcFailureConnectionCondition=class{constructor(expressID,type,Name,TensionFailureX,TensionFailureY,TensionFailureZ,CompressionFailureX,CompressionFailureY,CompressionFailureZ){this.expressID=expressID,this.type=type,this.Name=Name,this.TensionFailureX=TensionFailureX,this.TensionFailureY=TensionFailureY,this.TensionFailureZ=TensionFailureZ,this.CompressionFailureX=CompressionFailureX,this.CompressionFailureY=CompressionFailureY,this.CompressionFailureZ=CompressionFailureZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],TensionFailureX=tape[ptr++],TensionFailureY=tape[ptr++],TensionFailureZ=tape[ptr++],CompressionFailureX=tape[ptr++],CompressionFailureY=tape[ptr++],CompressionFailureZ=tape[ptr++];return new IfcFailureConnectionCondition(expressID,type,Name,TensionFailureX,TensionFailureY,TensionFailureZ,CompressionFailureX,CompressionFailureY,CompressionFailureZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.TensionFailureX),args.push(this.TensionFailureY),args.push(this.TensionFailureZ),args.push(this.CompressionFailureX),args.push(this.CompressionFailureY),args.push(this.CompressionFailureZ),args}},IfcFan=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFan(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFanType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFanType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcFastener=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFastener(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFastenerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFastenerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcFeatureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFeatureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFeatureElementAddition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFeatureElementAddition(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFeatureElementSubtraction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFeatureElementSubtraction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFillAreaStyle=class{constructor(expressID,type,Name,FillStyles,ModelorDraughting){this.expressID=expressID,this.type=type,this.Name=Name,this.FillStyles=FillStyles,this.ModelorDraughting=ModelorDraughting}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],FillStyles=tape[ptr++],ModelorDraughting=tape[ptr++];return new IfcFillAreaStyle(expressID,type,Name,FillStyles,ModelorDraughting)}ToTape(){let args=[];return args.push(this.Name),args.push(this.FillStyles),args.push(this.ModelorDraughting),args}},IfcFillAreaStyleHatching=class{constructor(expressID,type,HatchLineAppearance,StartOfNextHatchLine,PointOfReferenceHatchLine,PatternStart,HatchLineAngle){this.expressID=expressID,this.type=type,this.HatchLineAppearance=HatchLineAppearance,this.StartOfNextHatchLine=StartOfNextHatchLine,this.PointOfReferenceHatchLine=PointOfReferenceHatchLine,this.PatternStart=PatternStart,this.HatchLineAngle=HatchLineAngle}static FromTape(expressID,type,tape){let ptr=0,HatchLineAppearance=tape[ptr++],StartOfNextHatchLine=tape[ptr++],PointOfReferenceHatchLine=tape[ptr++],PatternStart=tape[ptr++],HatchLineAngle=tape[ptr++];return new IfcFillAreaStyleHatching(expressID,type,HatchLineAppearance,StartOfNextHatchLine,PointOfReferenceHatchLine,PatternStart,HatchLineAngle)}ToTape(){let args=[];return args.push(this.HatchLineAppearance),args.push(this.StartOfNextHatchLine),args.push(this.PointOfReferenceHatchLine),args.push(this.PatternStart),args.push(this.HatchLineAngle),args}},IfcFillAreaStyleTiles=class{constructor(expressID,type,TilingPattern,Tiles,TilingScale){this.expressID=expressID,this.type=type,this.TilingPattern=TilingPattern,this.Tiles=Tiles,this.TilingScale=TilingScale}static FromTape(expressID,type,tape){let ptr=0,TilingPattern=tape[ptr++],Tiles=tape[ptr++],TilingScale=tape[ptr++];return new IfcFillAreaStyleTiles(expressID,type,TilingPattern,Tiles,TilingScale)}ToTape(){let args=[];return args.push(this.TilingPattern),args.push(this.Tiles),args.push(this.TilingScale),args}},IfcFilter=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFilter(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFilterType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFilterType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcFireSuppressionTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFireSuppressionTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFireSuppressionTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFireSuppressionTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcFixedReferenceSweptAreaSolid=class{constructor(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,FixedReference){this.expressID=expressID,this.type=type,this.SweptArea=SweptArea,this.Position=Position,this.Directrix=Directrix,this.StartParam=StartParam,this.EndParam=EndParam,this.FixedReference=FixedReference}static FromTape(expressID,type,tape){let ptr=0,SweptArea=tape[ptr++],Position=tape[ptr++],Directrix=tape[ptr++],StartParam=tape[ptr++],EndParam=tape[ptr++],FixedReference=tape[ptr++];return new IfcFixedReferenceSweptAreaSolid(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,FixedReference)}ToTape(){let args=[];return args.push(this.SweptArea),args.push(this.Position),args.push(this.Directrix),args.push(this.StartParam),args.push(this.EndParam),args.push(this.FixedReference),args}},IfcFlowController=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFlowController(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFlowControllerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFlowControllerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFlowFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFlowFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFlowFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFlowFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFlowInstrument=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFlowInstrument(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFlowInstrumentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFlowInstrumentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcFlowMeter=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFlowMeter(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFlowMeterType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFlowMeterType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcFlowMovingDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFlowMovingDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFlowMovingDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFlowMovingDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFlowSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFlowSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFlowSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFlowSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFlowStorageDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFlowStorageDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFlowStorageDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFlowStorageDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFlowTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFlowTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFlowTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFlowTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFlowTreatmentDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFlowTreatmentDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFlowTreatmentDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFlowTreatmentDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFooting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFooting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFootingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFootingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcFurnishingElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcFurnishingElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcFurnishingElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcFurnishingElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcFurniture=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFurniture(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcFurnitureType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,AssemblyPlace,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.AssemblyPlace=AssemblyPlace,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],AssemblyPlace=tape[ptr++],PredefinedType=tape[ptr++];return new IfcFurnitureType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,AssemblyPlace,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.AssemblyPlace),args.push(this.PredefinedType),args}},IfcGeographicElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcGeographicElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcGeographicElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcGeographicElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcGeometricCurveSet=class{constructor(expressID,type,Elements){this.expressID=expressID,this.type=type,this.Elements=Elements}static FromTape(expressID,type,tape){let ptr=0,Elements=tape[ptr++];return new IfcGeometricCurveSet(expressID,type,Elements)}ToTape(){let args=[];return args.push(this.Elements),args}},IfcGeometricRepresentationContext=class{constructor(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth){this.expressID=expressID,this.type=type,this.ContextIdentifier=ContextIdentifier,this.ContextType=ContextType,this.CoordinateSpaceDimension=CoordinateSpaceDimension,this.Precision=Precision,this.WorldCoordinateSystem=WorldCoordinateSystem,this.TrueNorth=TrueNorth}static FromTape(expressID,type,tape){let ptr=0,ContextIdentifier=tape[ptr++],ContextType=tape[ptr++],CoordinateSpaceDimension=tape[ptr++],Precision=tape[ptr++],WorldCoordinateSystem=tape[ptr++],TrueNorth=tape[ptr++];return new IfcGeometricRepresentationContext(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth)}ToTape(){let args=[];return args.push(this.ContextIdentifier),args.push(this.ContextType),args.push(this.CoordinateSpaceDimension),args.push(this.Precision),args.push(this.WorldCoordinateSystem),args.push(this.TrueNorth),args}},IfcGeometricRepresentationItem=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcGeometricRepresentationItem(expressID,type)}ToTape(){return[]}},IfcGeometricRepresentationSubContext=class{constructor(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth,ParentContext,TargetScale,TargetView,UserDefinedTargetView){this.expressID=expressID,this.type=type,this.ContextIdentifier=ContextIdentifier,this.ContextType=ContextType,this.CoordinateSpaceDimension=CoordinateSpaceDimension,this.Precision=Precision,this.WorldCoordinateSystem=WorldCoordinateSystem,this.TrueNorth=TrueNorth,this.ParentContext=ParentContext,this.TargetScale=TargetScale,this.TargetView=TargetView,this.UserDefinedTargetView=UserDefinedTargetView}static FromTape(expressID,type,tape){let ptr=0,ContextIdentifier=tape[ptr++],ContextType=tape[ptr++],CoordinateSpaceDimension=tape[ptr++],Precision=tape[ptr++],WorldCoordinateSystem=tape[ptr++],TrueNorth=tape[ptr++],ParentContext=tape[ptr++],TargetScale=tape[ptr++],TargetView=tape[ptr++],UserDefinedTargetView=tape[ptr++];return new IfcGeometricRepresentationSubContext(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth,ParentContext,TargetScale,TargetView,UserDefinedTargetView)}ToTape(){let args=[];return args.push(this.ContextIdentifier),args.push(this.ContextType),args.push(this.CoordinateSpaceDimension),args.push(this.Precision),args.push(this.WorldCoordinateSystem),args.push(this.TrueNorth),args.push(this.ParentContext),args.push(this.TargetScale),args.push(this.TargetView),args.push(this.UserDefinedTargetView),args}},IfcGeometricSet=class{constructor(expressID,type,Elements){this.expressID=expressID,this.type=type,this.Elements=Elements}static FromTape(expressID,type,tape){let ptr=0,Elements=tape[ptr++];return new IfcGeometricSet(expressID,type,Elements)}ToTape(){let args=[];return args.push(this.Elements),args}},IfcGrid=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,UAxes,VAxes,WAxes,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.UAxes=UAxes,this.VAxes=VAxes,this.WAxes=WAxes,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],UAxes=tape[ptr++],VAxes=tape[ptr++],WAxes=tape[ptr++],PredefinedType=tape[ptr++];return new IfcGrid(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,UAxes,VAxes,WAxes,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.UAxes),args.push(this.VAxes),args.push(this.WAxes),args.push(this.PredefinedType),args}},IfcGridAxis=class{constructor(expressID,type,AxisTag,AxisCurve,SameSense){this.expressID=expressID,this.type=type,this.AxisTag=AxisTag,this.AxisCurve=AxisCurve,this.SameSense=SameSense}static FromTape(expressID,type,tape){let ptr=0,AxisTag=tape[ptr++],AxisCurve=tape[ptr++],SameSense=tape[ptr++];return new IfcGridAxis(expressID,type,AxisTag,AxisCurve,SameSense)}ToTape(){let args=[];return args.push(this.AxisTag),args.push(this.AxisCurve),args.push(this.SameSense),args}},IfcGridPlacement=class{constructor(expressID,type,PlacementRelTo,PlacementLocation,PlacementRefDirection){this.expressID=expressID,this.type=type,this.PlacementRelTo=PlacementRelTo,this.PlacementLocation=PlacementLocation,this.PlacementRefDirection=PlacementRefDirection}static FromTape(expressID,type,tape){let ptr=0,PlacementRelTo=tape[ptr++],PlacementLocation=tape[ptr++],PlacementRefDirection=tape[ptr++];return new IfcGridPlacement(expressID,type,PlacementRelTo,PlacementLocation,PlacementRefDirection)}ToTape(){let args=[];return args.push(this.PlacementRelTo),args.push(this.PlacementLocation),args.push(this.PlacementRefDirection),args}},IfcGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++];return new IfcGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args}},IfcHalfSpaceSolid=class{constructor(expressID,type,BaseSurface,AgreementFlag){this.expressID=expressID,this.type=type,this.BaseSurface=BaseSurface,this.AgreementFlag=AgreementFlag}static FromTape(expressID,type,tape){let ptr=0,BaseSurface=tape[ptr++],AgreementFlag=tape[ptr++];return new IfcHalfSpaceSolid(expressID,type,BaseSurface,AgreementFlag)}ToTape(){let args=[];return args.push(this.BaseSurface),args.push(this.AgreementFlag),args}},IfcHeatExchanger=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcHeatExchanger(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcHeatExchangerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcHeatExchangerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcHumidifier=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcHumidifier(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcHumidifierType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcHumidifierType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcIShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,OverallWidth,OverallDepth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,FlangeSlope){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.OverallWidth=OverallWidth,this.OverallDepth=OverallDepth,this.WebThickness=WebThickness,this.FlangeThickness=FlangeThickness,this.FilletRadius=FilletRadius,this.FlangeEdgeRadius=FlangeEdgeRadius,this.FlangeSlope=FlangeSlope}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],OverallWidth=tape[ptr++],OverallDepth=tape[ptr++],WebThickness=tape[ptr++],FlangeThickness=tape[ptr++],FilletRadius=tape[ptr++],FlangeEdgeRadius=tape[ptr++],FlangeSlope=tape[ptr++];return new IfcIShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,OverallWidth,OverallDepth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,FlangeSlope)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.OverallWidth),args.push(this.OverallDepth),args.push(this.WebThickness),args.push(this.FlangeThickness),args.push(this.FilletRadius),args.push(this.FlangeEdgeRadius),args.push(this.FlangeSlope),args}},IfcImageTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,URLReference){this.expressID=expressID,this.type=type,this.RepeatS=RepeatS,this.RepeatT=RepeatT,this.Mode=Mode,this.TextureTransform=TextureTransform,this.Parameter=Parameter,this.URLReference=URLReference}static FromTape(expressID,type,tape){let ptr=0,RepeatS=tape[ptr++],RepeatT=tape[ptr++],Mode=tape[ptr++],TextureTransform=tape[ptr++],Parameter=tape[ptr++],URLReference=tape[ptr++];return new IfcImageTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,URLReference)}ToTape(){let args=[];return args.push(this.RepeatS),args.push(this.RepeatT),args.push(this.Mode),args.push(this.TextureTransform),args.push(this.Parameter),args.push(this.URLReference),args}},IfcIndexedColourMap=class{constructor(expressID,type,MappedTo,Opacity,Colours,ColourIndex){this.expressID=expressID,this.type=type,this.MappedTo=MappedTo,this.Opacity=Opacity,this.Colours=Colours,this.ColourIndex=ColourIndex}static FromTape(expressID,type,tape){let ptr=0,MappedTo=tape[ptr++],Opacity=tape[ptr++],Colours=tape[ptr++],ColourIndex=tape[ptr++];return new IfcIndexedColourMap(expressID,type,MappedTo,Opacity,Colours,ColourIndex)}ToTape(){let args=[];return args.push(this.MappedTo),args.push(this.Opacity),args.push(this.Colours),args.push(this.ColourIndex),args}},IfcIndexedPolyCurve=class{constructor(expressID,type,Points,Segments,SelfIntersect){this.expressID=expressID,this.type=type,this.Points=Points,this.Segments=Segments,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,Points=tape[ptr++],Segments=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcIndexedPolyCurve(expressID,type,Points,Segments,SelfIntersect)}ToTape(){let args=[];return args.push(this.Points),args.push(this.Segments),args.push(this.SelfIntersect),args}},IfcIndexedPolygonalFace=class{constructor(expressID,type,CoordIndex){this.expressID=expressID,this.type=type,this.CoordIndex=CoordIndex}static FromTape(expressID,type,tape){let ptr=0,CoordIndex=tape[ptr++];return new IfcIndexedPolygonalFace(expressID,type,CoordIndex)}ToTape(){let args=[];return args.push(this.CoordIndex),args}},IfcIndexedPolygonalFaceWithVoids=class{constructor(expressID,type,CoordIndex,InnerCoordIndices){this.expressID=expressID,this.type=type,this.CoordIndex=CoordIndex,this.InnerCoordIndices=InnerCoordIndices}static FromTape(expressID,type,tape){let ptr=0,CoordIndex=tape[ptr++],InnerCoordIndices=tape[ptr++];return new IfcIndexedPolygonalFaceWithVoids(expressID,type,CoordIndex,InnerCoordIndices)}ToTape(){let args=[];return args.push(this.CoordIndex),args.push(this.InnerCoordIndices),args}},IfcIndexedTextureMap=class{constructor(expressID,type,Maps,MappedTo,TexCoords){this.expressID=expressID,this.type=type,this.Maps=Maps,this.MappedTo=MappedTo,this.TexCoords=TexCoords}static FromTape(expressID,type,tape){let ptr=0,Maps=tape[ptr++],MappedTo=tape[ptr++],TexCoords=tape[ptr++];return new IfcIndexedTextureMap(expressID,type,Maps,MappedTo,TexCoords)}ToTape(){let args=[];return args.push(this.Maps),args.push(this.MappedTo),args.push(this.TexCoords),args}},IfcIndexedTriangleTextureMap=class{constructor(expressID,type,Maps,MappedTo,TexCoords,TexCoordIndex){this.expressID=expressID,this.type=type,this.Maps=Maps,this.MappedTo=MappedTo,this.TexCoords=TexCoords,this.TexCoordIndex=TexCoordIndex}static FromTape(expressID,type,tape){let ptr=0,Maps=tape[ptr++],MappedTo=tape[ptr++],TexCoords=tape[ptr++],TexCoordIndex=tape[ptr++];return new IfcIndexedTriangleTextureMap(expressID,type,Maps,MappedTo,TexCoords,TexCoordIndex)}ToTape(){let args=[];return args.push(this.Maps),args.push(this.MappedTo),args.push(this.TexCoords),args.push(this.TexCoordIndex),args}},IfcInterceptor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcInterceptor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcInterceptorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcInterceptorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcIntersectionCurve=class{constructor(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation){this.expressID=expressID,this.type=type,this.Curve3D=Curve3D,this.AssociatedGeometry=AssociatedGeometry,this.MasterRepresentation=MasterRepresentation}static FromTape(expressID,type,tape){let ptr=0,Curve3D=tape[ptr++],AssociatedGeometry=tape[ptr++],MasterRepresentation=tape[ptr++];return new IfcIntersectionCurve(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation)}ToTape(){let args=[];return args.push(this.Curve3D),args.push(this.AssociatedGeometry),args.push(this.MasterRepresentation),args}},IfcInventory=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,Jurisdiction,ResponsiblePersons,LastUpdateDate,CurrentValue,OriginalValue){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.PredefinedType=PredefinedType,this.Jurisdiction=Jurisdiction,this.ResponsiblePersons=ResponsiblePersons,this.LastUpdateDate=LastUpdateDate,this.CurrentValue=CurrentValue,this.OriginalValue=OriginalValue}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],PredefinedType=tape[ptr++],Jurisdiction=tape[ptr++],ResponsiblePersons=tape[ptr++],LastUpdateDate=tape[ptr++],CurrentValue=tape[ptr++],OriginalValue=tape[ptr++];return new IfcInventory(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,Jurisdiction,ResponsiblePersons,LastUpdateDate,CurrentValue,OriginalValue)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.PredefinedType),args.push(this.Jurisdiction),args.push(this.ResponsiblePersons),args.push(this.LastUpdateDate),args.push(this.CurrentValue),args.push(this.OriginalValue),args}},IfcIrregularTimeSeries=class{constructor(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,Values){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.StartTime=StartTime,this.EndTime=EndTime,this.TimeSeriesDataType=TimeSeriesDataType,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.Unit=Unit,this.Values=Values}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],StartTime=tape[ptr++],EndTime=tape[ptr++],TimeSeriesDataType=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],Unit=tape[ptr++],Values=tape[ptr++];return new IfcIrregularTimeSeries(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,Values)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.StartTime),args.push(this.EndTime),args.push(this.TimeSeriesDataType),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.Unit),args.push(this.Values),args}},IfcIrregularTimeSeriesValue=class{constructor(expressID,type,TimeStamp,ListValues){this.expressID=expressID,this.type=type,this.TimeStamp=TimeStamp,this.ListValues=ListValues}static FromTape(expressID,type,tape){let ptr=0,TimeStamp=tape[ptr++],ListValues=tape[ptr++];return new IfcIrregularTimeSeriesValue(expressID,type,TimeStamp,ListValues)}ToTape(){let args=[];return args.push(this.TimeStamp),args.push(this.ListValues),args}},IfcJunctionBox=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcJunctionBox(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcJunctionBoxType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcJunctionBoxType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcLShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,Width,Thickness,FilletRadius,EdgeRadius,LegSlope){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.Depth=Depth,this.Width=Width,this.Thickness=Thickness,this.FilletRadius=FilletRadius,this.EdgeRadius=EdgeRadius,this.LegSlope=LegSlope}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],Depth=tape[ptr++],Width=tape[ptr++],Thickness=tape[ptr++],FilletRadius=tape[ptr++],EdgeRadius=tape[ptr++],LegSlope=tape[ptr++];return new IfcLShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,Width,Thickness,FilletRadius,EdgeRadius,LegSlope)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.Depth),args.push(this.Width),args.push(this.Thickness),args.push(this.FilletRadius),args.push(this.EdgeRadius),args.push(this.LegSlope),args}},IfcLaborResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Usage=Usage,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Usage=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcLaborResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Usage),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcLaborResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcLaborResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcLagTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,LagValue,DurationType){this.expressID=expressID,this.type=type,this.Name=Name,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.LagValue=LagValue,this.DurationType=DurationType}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],LagValue=tape[ptr++],DurationType=tape[ptr++];return new IfcLagTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,LagValue,DurationType)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.LagValue),args.push(this.DurationType),args}},IfcLamp=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcLamp(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcLampType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcLampType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcLibraryInformation=class{constructor(expressID,type,Name,Version,Publisher,VersionDate,Location,Description){this.expressID=expressID,this.type=type,this.Name=Name,this.Version=Version,this.Publisher=Publisher,this.VersionDate=VersionDate,this.Location=Location,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Version=tape[ptr++],Publisher=tape[ptr++],VersionDate=tape[ptr++],Location=tape[ptr++],Description=tape[ptr++];return new IfcLibraryInformation(expressID,type,Name,Version,Publisher,VersionDate,Location,Description)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Version),args.push(this.Publisher),args.push(this.VersionDate),args.push(this.Location),args.push(this.Description),args}},IfcLibraryReference=class{constructor(expressID,type,Location,Identification,Name,Description,Language,ReferencedLibrary){this.expressID=expressID,this.type=type,this.Location=Location,this.Identification=Identification,this.Name=Name,this.Description=Description,this.Language=Language,this.ReferencedLibrary=ReferencedLibrary}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++],Identification=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],Language=tape[ptr++],ReferencedLibrary=tape[ptr++];return new IfcLibraryReference(expressID,type,Location,Identification,Name,Description,Language,ReferencedLibrary)}ToTape(){let args=[];return args.push(this.Location),args.push(this.Identification),args.push(this.Name),args.push(this.Description),args.push(this.Language),args.push(this.ReferencedLibrary),args}},IfcLightDistributionData=class{constructor(expressID,type,MainPlaneAngle,SecondaryPlaneAngle,LuminousIntensity){this.expressID=expressID,this.type=type,this.MainPlaneAngle=MainPlaneAngle,this.SecondaryPlaneAngle=SecondaryPlaneAngle,this.LuminousIntensity=LuminousIntensity}static FromTape(expressID,type,tape){let ptr=0,MainPlaneAngle=tape[ptr++],SecondaryPlaneAngle=tape[ptr++],LuminousIntensity=tape[ptr++];return new IfcLightDistributionData(expressID,type,MainPlaneAngle,SecondaryPlaneAngle,LuminousIntensity)}ToTape(){let args=[];return args.push(this.MainPlaneAngle),args.push(this.SecondaryPlaneAngle),args.push(this.LuminousIntensity),args}},IfcLightFixture=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcLightFixture(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcLightFixtureType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcLightFixtureType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcLightIntensityDistribution=class{constructor(expressID,type,LightDistributionCurve,DistributionData){this.expressID=expressID,this.type=type,this.LightDistributionCurve=LightDistributionCurve,this.DistributionData=DistributionData}static FromTape(expressID,type,tape){let ptr=0,LightDistributionCurve=tape[ptr++],DistributionData=tape[ptr++];return new IfcLightIntensityDistribution(expressID,type,LightDistributionCurve,DistributionData)}ToTape(){let args=[];return args.push(this.LightDistributionCurve),args.push(this.DistributionData),args}},IfcLightSource=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity){this.expressID=expressID,this.type=type,this.Name=Name,this.LightColour=LightColour,this.AmbientIntensity=AmbientIntensity,this.Intensity=Intensity}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],LightColour=tape[ptr++],AmbientIntensity=tape[ptr++],Intensity=tape[ptr++];return new IfcLightSource(expressID,type,Name,LightColour,AmbientIntensity,Intensity)}ToTape(){let args=[];return args.push(this.Name),args.push(this.LightColour),args.push(this.AmbientIntensity),args.push(this.Intensity),args}},IfcLightSourceAmbient=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity){this.expressID=expressID,this.type=type,this.Name=Name,this.LightColour=LightColour,this.AmbientIntensity=AmbientIntensity,this.Intensity=Intensity}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],LightColour=tape[ptr++],AmbientIntensity=tape[ptr++],Intensity=tape[ptr++];return new IfcLightSourceAmbient(expressID,type,Name,LightColour,AmbientIntensity,Intensity)}ToTape(){let args=[];return args.push(this.Name),args.push(this.LightColour),args.push(this.AmbientIntensity),args.push(this.Intensity),args}},IfcLightSourceDirectional=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Orientation){this.expressID=expressID,this.type=type,this.Name=Name,this.LightColour=LightColour,this.AmbientIntensity=AmbientIntensity,this.Intensity=Intensity,this.Orientation=Orientation}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],LightColour=tape[ptr++],AmbientIntensity=tape[ptr++],Intensity=tape[ptr++],Orientation=tape[ptr++];return new IfcLightSourceDirectional(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Orientation)}ToTape(){let args=[];return args.push(this.Name),args.push(this.LightColour),args.push(this.AmbientIntensity),args.push(this.Intensity),args.push(this.Orientation),args}},IfcLightSourceGoniometric=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,ColourAppearance,ColourTemperature,LuminousFlux,LightEmissionSource,LightDistributionDataSource){this.expressID=expressID,this.type=type,this.Name=Name,this.LightColour=LightColour,this.AmbientIntensity=AmbientIntensity,this.Intensity=Intensity,this.Position=Position,this.ColourAppearance=ColourAppearance,this.ColourTemperature=ColourTemperature,this.LuminousFlux=LuminousFlux,this.LightEmissionSource=LightEmissionSource,this.LightDistributionDataSource=LightDistributionDataSource}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],LightColour=tape[ptr++],AmbientIntensity=tape[ptr++],Intensity=tape[ptr++],Position=tape[ptr++],ColourAppearance=tape[ptr++],ColourTemperature=tape[ptr++],LuminousFlux=tape[ptr++],LightEmissionSource=tape[ptr++],LightDistributionDataSource=tape[ptr++];return new IfcLightSourceGoniometric(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,ColourAppearance,ColourTemperature,LuminousFlux,LightEmissionSource,LightDistributionDataSource)}ToTape(){let args=[];return args.push(this.Name),args.push(this.LightColour),args.push(this.AmbientIntensity),args.push(this.Intensity),args.push(this.Position),args.push(this.ColourAppearance),args.push(this.ColourTemperature),args.push(this.LuminousFlux),args.push(this.LightEmissionSource),args.push(this.LightDistributionDataSource),args}},IfcLightSourcePositional=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation){this.expressID=expressID,this.type=type,this.Name=Name,this.LightColour=LightColour,this.AmbientIntensity=AmbientIntensity,this.Intensity=Intensity,this.Position=Position,this.Radius=Radius,this.ConstantAttenuation=ConstantAttenuation,this.DistanceAttenuation=DistanceAttenuation,this.QuadricAttenuation=QuadricAttenuation}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],LightColour=tape[ptr++],AmbientIntensity=tape[ptr++],Intensity=tape[ptr++],Position=tape[ptr++],Radius=tape[ptr++],ConstantAttenuation=tape[ptr++],DistanceAttenuation=tape[ptr++],QuadricAttenuation=tape[ptr++];return new IfcLightSourcePositional(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation)}ToTape(){let args=[];return args.push(this.Name),args.push(this.LightColour),args.push(this.AmbientIntensity),args.push(this.Intensity),args.push(this.Position),args.push(this.Radius),args.push(this.ConstantAttenuation),args.push(this.DistanceAttenuation),args.push(this.QuadricAttenuation),args}},IfcLightSourceSpot=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation,Orientation,ConcentrationExponent,SpreadAngle,BeamWidthAngle){this.expressID=expressID,this.type=type,this.Name=Name,this.LightColour=LightColour,this.AmbientIntensity=AmbientIntensity,this.Intensity=Intensity,this.Position=Position,this.Radius=Radius,this.ConstantAttenuation=ConstantAttenuation,this.DistanceAttenuation=DistanceAttenuation,this.QuadricAttenuation=QuadricAttenuation,this.Orientation=Orientation,this.ConcentrationExponent=ConcentrationExponent,this.SpreadAngle=SpreadAngle,this.BeamWidthAngle=BeamWidthAngle}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],LightColour=tape[ptr++],AmbientIntensity=tape[ptr++],Intensity=tape[ptr++],Position=tape[ptr++],Radius=tape[ptr++],ConstantAttenuation=tape[ptr++],DistanceAttenuation=tape[ptr++],QuadricAttenuation=tape[ptr++],Orientation=tape[ptr++],ConcentrationExponent=tape[ptr++],SpreadAngle=tape[ptr++],BeamWidthAngle=tape[ptr++];return new IfcLightSourceSpot(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation,Orientation,ConcentrationExponent,SpreadAngle,BeamWidthAngle)}ToTape(){let args=[];return args.push(this.Name),args.push(this.LightColour),args.push(this.AmbientIntensity),args.push(this.Intensity),args.push(this.Position),args.push(this.Radius),args.push(this.ConstantAttenuation),args.push(this.DistanceAttenuation),args.push(this.QuadricAttenuation),args.push(this.Orientation),args.push(this.ConcentrationExponent),args.push(this.SpreadAngle),args.push(this.BeamWidthAngle),args}},IfcLine=class{constructor(expressID,type,Pnt,Dir){this.expressID=expressID,this.type=type,this.Pnt=Pnt,this.Dir=Dir}static FromTape(expressID,type,tape){let ptr=0,Pnt=tape[ptr++],Dir=tape[ptr++];return new IfcLine(expressID,type,Pnt,Dir)}ToTape(){let args=[];return args.push(this.Pnt),args.push(this.Dir),args}},IfcLineSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength){this.expressID=expressID,this.type=type,this.StartPoint=StartPoint,this.StartDirection=StartDirection,this.SegmentLength=SegmentLength}static FromTape(expressID,type,tape){let ptr=0,StartPoint=tape[ptr++],StartDirection=tape[ptr++],SegmentLength=tape[ptr++];return new IfcLineSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength)}ToTape(){let args=[];return args.push(this.StartPoint),args.push(this.StartDirection),args.push(this.SegmentLength),args}},IfcLinearPlacement=class{constructor(expressID,type,PlacementRelTo,PlacementMeasuredAlong,Distance,Orientation,CartesianPosition){this.expressID=expressID,this.type=type,this.PlacementRelTo=PlacementRelTo,this.PlacementMeasuredAlong=PlacementMeasuredAlong,this.Distance=Distance,this.Orientation=Orientation,this.CartesianPosition=CartesianPosition}static FromTape(expressID,type,tape){let ptr=0,PlacementRelTo=tape[ptr++],PlacementMeasuredAlong=tape[ptr++],Distance=tape[ptr++],Orientation=tape[ptr++],CartesianPosition=tape[ptr++];return new IfcLinearPlacement(expressID,type,PlacementRelTo,PlacementMeasuredAlong,Distance,Orientation,CartesianPosition)}ToTape(){let args=[];return args.push(this.PlacementRelTo),args.push(this.PlacementMeasuredAlong),args.push(this.Distance),args.push(this.Orientation),args.push(this.CartesianPosition),args}},IfcLinearPositioningElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Axis=Axis}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Axis=tape[ptr++];return new IfcLinearPositioningElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Axis),args}},IfcLocalPlacement=class{constructor(expressID,type,PlacementRelTo,RelativePlacement){this.expressID=expressID,this.type=type,this.PlacementRelTo=PlacementRelTo,this.RelativePlacement=RelativePlacement}static FromTape(expressID,type,tape){let ptr=0,PlacementRelTo=tape[ptr++],RelativePlacement=tape[ptr++];return new IfcLocalPlacement(expressID,type,PlacementRelTo,RelativePlacement)}ToTape(){let args=[];return args.push(this.PlacementRelTo),args.push(this.RelativePlacement),args}},IfcLoop=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcLoop(expressID,type)}ToTape(){return[]}},IfcManifoldSolidBrep=class{constructor(expressID,type,Outer){this.expressID=expressID,this.type=type,this.Outer=Outer}static FromTape(expressID,type,tape){let ptr=0,Outer=tape[ptr++];return new IfcManifoldSolidBrep(expressID,type,Outer)}ToTape(){let args=[];return args.push(this.Outer),args}},IfcMapConversion=class{constructor(expressID,type,SourceCRS,TargetCRS,Eastings,Northings,OrthogonalHeight,XAxisAbscissa,XAxisOrdinate,Scale){this.expressID=expressID,this.type=type,this.SourceCRS=SourceCRS,this.TargetCRS=TargetCRS,this.Eastings=Eastings,this.Northings=Northings,this.OrthogonalHeight=OrthogonalHeight,this.XAxisAbscissa=XAxisAbscissa,this.XAxisOrdinate=XAxisOrdinate,this.Scale=Scale}static FromTape(expressID,type,tape){let ptr=0,SourceCRS=tape[ptr++],TargetCRS=tape[ptr++],Eastings=tape[ptr++],Northings=tape[ptr++],OrthogonalHeight=tape[ptr++],XAxisAbscissa=tape[ptr++],XAxisOrdinate=tape[ptr++],Scale=tape[ptr++];return new IfcMapConversion(expressID,type,SourceCRS,TargetCRS,Eastings,Northings,OrthogonalHeight,XAxisAbscissa,XAxisOrdinate,Scale)}ToTape(){let args=[];return args.push(this.SourceCRS),args.push(this.TargetCRS),args.push(this.Eastings),args.push(this.Northings),args.push(this.OrthogonalHeight),args.push(this.XAxisAbscissa),args.push(this.XAxisOrdinate),args.push(this.Scale),args}},IfcMappedItem=class{constructor(expressID,type,MappingSource,MappingTarget){this.expressID=expressID,this.type=type,this.MappingSource=MappingSource,this.MappingTarget=MappingTarget}static FromTape(expressID,type,tape){let ptr=0,MappingSource=tape[ptr++],MappingTarget=tape[ptr++];return new IfcMappedItem(expressID,type,MappingSource,MappingTarget)}ToTape(){let args=[];return args.push(this.MappingSource),args.push(this.MappingTarget),args}},IfcMaterial=class{constructor(expressID,type,Name,Description,Category){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Category=Category}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Category=tape[ptr++];return new IfcMaterial(expressID,type,Name,Description,Category)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Category),args}},IfcMaterialClassificationRelationship=class{constructor(expressID,type,MaterialClassifications,ClassifiedMaterial){this.expressID=expressID,this.type=type,this.MaterialClassifications=MaterialClassifications,this.ClassifiedMaterial=ClassifiedMaterial}static FromTape(expressID,type,tape){let ptr=0,MaterialClassifications=tape[ptr++],ClassifiedMaterial=tape[ptr++];return new IfcMaterialClassificationRelationship(expressID,type,MaterialClassifications,ClassifiedMaterial)}ToTape(){let args=[];return args.push(this.MaterialClassifications),args.push(this.ClassifiedMaterial),args}},IfcMaterialConstituent=class{constructor(expressID,type,Name,Description,Material,Fraction,Category){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Material=Material,this.Fraction=Fraction,this.Category=Category}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Material=tape[ptr++],Fraction=tape[ptr++],Category=tape[ptr++];return new IfcMaterialConstituent(expressID,type,Name,Description,Material,Fraction,Category)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Material),args.push(this.Fraction),args.push(this.Category),args}},IfcMaterialConstituentSet=class{constructor(expressID,type,Name,Description,MaterialConstituents){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.MaterialConstituents=MaterialConstituents}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],MaterialConstituents=tape[ptr++];return new IfcMaterialConstituentSet(expressID,type,Name,Description,MaterialConstituents)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.MaterialConstituents),args}},IfcMaterialDefinition=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcMaterialDefinition(expressID,type)}ToTape(){return[]}},IfcMaterialDefinitionRepresentation=class{constructor(expressID,type,Name,Description,Representations,RepresentedMaterial){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Representations=Representations,this.RepresentedMaterial=RepresentedMaterial}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Representations=tape[ptr++],RepresentedMaterial=tape[ptr++];return new IfcMaterialDefinitionRepresentation(expressID,type,Name,Description,Representations,RepresentedMaterial)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Representations),args.push(this.RepresentedMaterial),args}},IfcMaterialLayer=class{constructor(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority){this.expressID=expressID,this.type=type,this.Material=Material,this.LayerThickness=LayerThickness,this.IsVentilated=IsVentilated,this.Name=Name,this.Description=Description,this.Category=Category,this.Priority=Priority}static FromTape(expressID,type,tape){let ptr=0,Material=tape[ptr++],LayerThickness=tape[ptr++],IsVentilated=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],Category=tape[ptr++],Priority=tape[ptr++];return new IfcMaterialLayer(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority)}ToTape(){let args=[];return args.push(this.Material),args.push(this.LayerThickness),args.push(this.IsVentilated),args.push(this.Name),args.push(this.Description),args.push(this.Category),args.push(this.Priority),args}},IfcMaterialLayerSet=class{constructor(expressID,type,MaterialLayers,LayerSetName,Description){this.expressID=expressID,this.type=type,this.MaterialLayers=MaterialLayers,this.LayerSetName=LayerSetName,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,MaterialLayers=tape[ptr++],LayerSetName=tape[ptr++],Description=tape[ptr++];return new IfcMaterialLayerSet(expressID,type,MaterialLayers,LayerSetName,Description)}ToTape(){let args=[];return args.push(this.MaterialLayers),args.push(this.LayerSetName),args.push(this.Description),args}},IfcMaterialLayerSetUsage=class{constructor(expressID,type,ForLayerSet,LayerSetDirection,DirectionSense,OffsetFromReferenceLine,ReferenceExtent){this.expressID=expressID,this.type=type,this.ForLayerSet=ForLayerSet,this.LayerSetDirection=LayerSetDirection,this.DirectionSense=DirectionSense,this.OffsetFromReferenceLine=OffsetFromReferenceLine,this.ReferenceExtent=ReferenceExtent}static FromTape(expressID,type,tape){let ptr=0,ForLayerSet=tape[ptr++],LayerSetDirection=tape[ptr++],DirectionSense=tape[ptr++],OffsetFromReferenceLine=tape[ptr++],ReferenceExtent=tape[ptr++];return new IfcMaterialLayerSetUsage(expressID,type,ForLayerSet,LayerSetDirection,DirectionSense,OffsetFromReferenceLine,ReferenceExtent)}ToTape(){let args=[];return args.push(this.ForLayerSet),args.push(this.LayerSetDirection),args.push(this.DirectionSense),args.push(this.OffsetFromReferenceLine),args.push(this.ReferenceExtent),args}},IfcMaterialLayerWithOffsets=class{constructor(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority,OffsetDirection,OffsetValues){this.expressID=expressID,this.type=type,this.Material=Material,this.LayerThickness=LayerThickness,this.IsVentilated=IsVentilated,this.Name=Name,this.Description=Description,this.Category=Category,this.Priority=Priority,this.OffsetDirection=OffsetDirection,this.OffsetValues=OffsetValues}static FromTape(expressID,type,tape){let ptr=0,Material=tape[ptr++],LayerThickness=tape[ptr++],IsVentilated=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],Category=tape[ptr++],Priority=tape[ptr++],OffsetDirection=tape[ptr++],OffsetValues=tape[ptr++];return new IfcMaterialLayerWithOffsets(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority,OffsetDirection,OffsetValues)}ToTape(){let args=[];return args.push(this.Material),args.push(this.LayerThickness),args.push(this.IsVentilated),args.push(this.Name),args.push(this.Description),args.push(this.Category),args.push(this.Priority),args.push(this.OffsetDirection),args.push(this.OffsetValues),args}},IfcMaterialList=class{constructor(expressID,type,Materials){this.expressID=expressID,this.type=type,this.Materials=Materials}static FromTape(expressID,type,tape){let ptr=0,Materials=tape[ptr++];return new IfcMaterialList(expressID,type,Materials)}ToTape(){let args=[];return args.push(this.Materials),args}},IfcMaterialProfile=class{constructor(expressID,type,Name,Description,Material,Profile,Priority,Category){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Material=Material,this.Profile=Profile,this.Priority=Priority,this.Category=Category}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Material=tape[ptr++],Profile=tape[ptr++],Priority=tape[ptr++],Category=tape[ptr++];return new IfcMaterialProfile(expressID,type,Name,Description,Material,Profile,Priority,Category)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Material),args.push(this.Profile),args.push(this.Priority),args.push(this.Category),args}},IfcMaterialProfileSet=class{constructor(expressID,type,Name,Description,MaterialProfiles,CompositeProfile){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.MaterialProfiles=MaterialProfiles,this.CompositeProfile=CompositeProfile}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],MaterialProfiles=tape[ptr++],CompositeProfile=tape[ptr++];return new IfcMaterialProfileSet(expressID,type,Name,Description,MaterialProfiles,CompositeProfile)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.MaterialProfiles),args.push(this.CompositeProfile),args}},IfcMaterialProfileSetUsage=class{constructor(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent){this.expressID=expressID,this.type=type,this.ForProfileSet=ForProfileSet,this.CardinalPoint=CardinalPoint,this.ReferenceExtent=ReferenceExtent}static FromTape(expressID,type,tape){let ptr=0,ForProfileSet=tape[ptr++],CardinalPoint=tape[ptr++],ReferenceExtent=tape[ptr++];return new IfcMaterialProfileSetUsage(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent)}ToTape(){let args=[];return args.push(this.ForProfileSet),args.push(this.CardinalPoint),args.push(this.ReferenceExtent),args}},IfcMaterialProfileSetUsageTapering=class{constructor(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent,ForProfileEndSet,CardinalEndPoint){this.expressID=expressID,this.type=type,this.ForProfileSet=ForProfileSet,this.CardinalPoint=CardinalPoint,this.ReferenceExtent=ReferenceExtent,this.ForProfileEndSet=ForProfileEndSet,this.CardinalEndPoint=CardinalEndPoint}static FromTape(expressID,type,tape){let ptr=0,ForProfileSet=tape[ptr++],CardinalPoint=tape[ptr++],ReferenceExtent=tape[ptr++],ForProfileEndSet=tape[ptr++],CardinalEndPoint=tape[ptr++];return new IfcMaterialProfileSetUsageTapering(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent,ForProfileEndSet,CardinalEndPoint)}ToTape(){let args=[];return args.push(this.ForProfileSet),args.push(this.CardinalPoint),args.push(this.ReferenceExtent),args.push(this.ForProfileEndSet),args.push(this.CardinalEndPoint),args}},IfcMaterialProfileWithOffsets=class{constructor(expressID,type,Name,Description,Material,Profile,Priority,Category,OffsetValues){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Material=Material,this.Profile=Profile,this.Priority=Priority,this.Category=Category,this.OffsetValues=OffsetValues}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Material=tape[ptr++],Profile=tape[ptr++],Priority=tape[ptr++],Category=tape[ptr++],OffsetValues=tape[ptr++];return new IfcMaterialProfileWithOffsets(expressID,type,Name,Description,Material,Profile,Priority,Category,OffsetValues)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Material),args.push(this.Profile),args.push(this.Priority),args.push(this.Category),args.push(this.OffsetValues),args}},IfcMaterialProperties=class{constructor(expressID,type,Name,Description,Properties2,Material){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Properties=Properties2,this.Material=Material}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Properties2=tape[ptr++],Material=tape[ptr++];return new IfcMaterialProperties(expressID,type,Name,Description,Properties2,Material)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Properties),args.push(this.Material),args}},IfcMaterialRelationship=class{constructor(expressID,type,Name,Description,RelatingMaterial,RelatedMaterials,Expression){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatingMaterial=RelatingMaterial,this.RelatedMaterials=RelatedMaterials,this.Expression=Expression}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatingMaterial=tape[ptr++],RelatedMaterials=tape[ptr++],Expression=tape[ptr++];return new IfcMaterialRelationship(expressID,type,Name,Description,RelatingMaterial,RelatedMaterials,Expression)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatingMaterial),args.push(this.RelatedMaterials),args.push(this.Expression),args}},IfcMaterialUsageDefinition=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcMaterialUsageDefinition(expressID,type)}ToTape(){return[]}},IfcMeasureWithUnit=class{constructor(expressID,type,ValueComponent,UnitComponent){this.expressID=expressID,this.type=type,this.ValueComponent=ValueComponent,this.UnitComponent=UnitComponent}static FromTape(expressID,type,tape){let ptr=0,ValueComponent=tape[ptr++],UnitComponent=tape[ptr++];return new IfcMeasureWithUnit(expressID,type,ValueComponent,UnitComponent)}ToTape(){let args=[];return args.push(this.ValueComponent),args.push(this.UnitComponent),args}},IfcMechanicalFastener=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NominalDiameter,NominalLength,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.NominalDiameter=NominalDiameter,this.NominalLength=NominalLength,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],NominalDiameter=tape[ptr++],NominalLength=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMechanicalFastener(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NominalDiameter,NominalLength,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.NominalDiameter),args.push(this.NominalLength),args.push(this.PredefinedType),args}},IfcMechanicalFastenerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,NominalLength){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.NominalDiameter=NominalDiameter,this.NominalLength=NominalLength}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],NominalDiameter=tape[ptr++],NominalLength=tape[ptr++];return new IfcMechanicalFastenerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,NominalLength)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.NominalDiameter),args.push(this.NominalLength),args}},IfcMedicalDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMedicalDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcMedicalDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMedicalDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcMemberStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMemberStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcMemberType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMemberType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcMetric=class{constructor(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,Benchmark,ValueSource,DataValue,ReferencePath){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.ConstraintGrade=ConstraintGrade,this.ConstraintSource=ConstraintSource,this.CreatingActor=CreatingActor,this.CreationTime=CreationTime,this.UserDefinedGrade=UserDefinedGrade,this.Benchmark=Benchmark,this.ValueSource=ValueSource,this.DataValue=DataValue,this.ReferencePath=ReferencePath}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],ConstraintGrade=tape[ptr++],ConstraintSource=tape[ptr++],CreatingActor=tape[ptr++],CreationTime=tape[ptr++],UserDefinedGrade=tape[ptr++],Benchmark=tape[ptr++],ValueSource=tape[ptr++],DataValue=tape[ptr++],ReferencePath=tape[ptr++];return new IfcMetric(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,Benchmark,ValueSource,DataValue,ReferencePath)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.ConstraintGrade),args.push(this.ConstraintSource),args.push(this.CreatingActor),args.push(this.CreationTime),args.push(this.UserDefinedGrade),args.push(this.Benchmark),args.push(this.ValueSource),args.push(this.DataValue),args.push(this.ReferencePath),args}},IfcMirroredProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.ParentProfile=ParentProfile,this.Operator=Operator,this.Label=Label}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],ParentProfile=tape[ptr++],Operator=tape[ptr++],Label=tape[ptr++];return new IfcMirroredProfileDef(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.ParentProfile),args.push(this.Operator),args.push(this.Label),args}},IfcMonetaryUnit=class{constructor(expressID,type,Currency){this.expressID=expressID,this.type=type,this.Currency=Currency}static FromTape(expressID,type,tape){let ptr=0,Currency=tape[ptr++];return new IfcMonetaryUnit(expressID,type,Currency)}ToTape(){let args=[];return args.push(this.Currency),args}},IfcMotorConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMotorConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcMotorConnectionType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcMotorConnectionType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcNamedUnit=class{constructor(expressID,type,Dimensions,UnitType){this.expressID=expressID,this.type=type,this.Dimensions=Dimensions,this.UnitType=UnitType}static FromTape(expressID,type,tape){let ptr=0,Dimensions=tape[ptr++],UnitType=tape[ptr++];return new IfcNamedUnit(expressID,type,Dimensions,UnitType)}ToTape(){let args=[];return args.push(this.Dimensions),args.push(this.UnitType),args}},IfcObject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++];return new IfcObject(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args}},IfcObjectDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcObjectDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcObjectPlacement=class{constructor(expressID,type,PlacementRelTo){this.expressID=expressID,this.type=type,this.PlacementRelTo=PlacementRelTo}static FromTape(expressID,type,tape){let ptr=0,PlacementRelTo=tape[ptr++];return new IfcObjectPlacement(expressID,type,PlacementRelTo)}ToTape(){let args=[];return args.push(this.PlacementRelTo),args}},IfcObjective=class{constructor(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,BenchmarkValues,LogicalAggregator,ObjectiveQualifier,UserDefinedQualifier){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.ConstraintGrade=ConstraintGrade,this.ConstraintSource=ConstraintSource,this.CreatingActor=CreatingActor,this.CreationTime=CreationTime,this.UserDefinedGrade=UserDefinedGrade,this.BenchmarkValues=BenchmarkValues,this.LogicalAggregator=LogicalAggregator,this.ObjectiveQualifier=ObjectiveQualifier,this.UserDefinedQualifier=UserDefinedQualifier}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],ConstraintGrade=tape[ptr++],ConstraintSource=tape[ptr++],CreatingActor=tape[ptr++],CreationTime=tape[ptr++],UserDefinedGrade=tape[ptr++],BenchmarkValues=tape[ptr++],LogicalAggregator=tape[ptr++],ObjectiveQualifier=tape[ptr++],UserDefinedQualifier=tape[ptr++];return new IfcObjective(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,BenchmarkValues,LogicalAggregator,ObjectiveQualifier,UserDefinedQualifier)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.ConstraintGrade),args.push(this.ConstraintSource),args.push(this.CreatingActor),args.push(this.CreationTime),args.push(this.UserDefinedGrade),args.push(this.BenchmarkValues),args.push(this.LogicalAggregator),args.push(this.ObjectiveQualifier),args.push(this.UserDefinedQualifier),args}},IfcOccupant=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.TheActor=TheActor,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],TheActor=tape[ptr++],PredefinedType=tape[ptr++];return new IfcOccupant(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.TheActor),args.push(this.PredefinedType),args}},IfcOffsetCurve=class{constructor(expressID,type,BasisCurve){this.expressID=expressID,this.type=type,this.BasisCurve=BasisCurve}static FromTape(expressID,type,tape){let ptr=0,BasisCurve=tape[ptr++];return new IfcOffsetCurve(expressID,type,BasisCurve)}ToTape(){let args=[];return args.push(this.BasisCurve),args}},IfcOffsetCurve2D=class{constructor(expressID,type,BasisCurve,Distance,SelfIntersect){this.expressID=expressID,this.type=type,this.BasisCurve=BasisCurve,this.Distance=Distance,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,BasisCurve=tape[ptr++],Distance=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcOffsetCurve2D(expressID,type,BasisCurve,Distance,SelfIntersect)}ToTape(){let args=[];return args.push(this.BasisCurve),args.push(this.Distance),args.push(this.SelfIntersect),args}},IfcOffsetCurve3D=class{constructor(expressID,type,BasisCurve,Distance,SelfIntersect,RefDirection){this.expressID=expressID,this.type=type,this.BasisCurve=BasisCurve,this.Distance=Distance,this.SelfIntersect=SelfIntersect,this.RefDirection=RefDirection}static FromTape(expressID,type,tape){let ptr=0,BasisCurve=tape[ptr++],Distance=tape[ptr++],SelfIntersect=tape[ptr++],RefDirection=tape[ptr++];return new IfcOffsetCurve3D(expressID,type,BasisCurve,Distance,SelfIntersect,RefDirection)}ToTape(){let args=[];return args.push(this.BasisCurve),args.push(this.Distance),args.push(this.SelfIntersect),args.push(this.RefDirection),args}},IfcOffsetCurveByDistances=class{constructor(expressID,type,BasisCurve,OffsetValues,Tag){this.expressID=expressID,this.type=type,this.BasisCurve=BasisCurve,this.OffsetValues=OffsetValues,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,BasisCurve=tape[ptr++],OffsetValues=tape[ptr++],Tag=tape[ptr++];return new IfcOffsetCurveByDistances(expressID,type,BasisCurve,OffsetValues,Tag)}ToTape(){let args=[];return args.push(this.BasisCurve),args.push(this.OffsetValues),args.push(this.Tag),args}},IfcOpenShell=class{constructor(expressID,type,CfsFaces){this.expressID=expressID,this.type=type,this.CfsFaces=CfsFaces}static FromTape(expressID,type,tape){let ptr=0,CfsFaces=tape[ptr++];return new IfcOpenShell(expressID,type,CfsFaces)}ToTape(){let args=[];return args.push(this.CfsFaces),args}},IfcOpeningElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcOpeningElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcOpeningStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcOpeningStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcOrganization=class{constructor(expressID,type,Identification,Name,Description,Roles,Addresses){this.expressID=expressID,this.type=type,this.Identification=Identification,this.Name=Name,this.Description=Description,this.Roles=Roles,this.Addresses=Addresses}static FromTape(expressID,type,tape){let ptr=0,Identification=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],Roles=tape[ptr++],Addresses=tape[ptr++];return new IfcOrganization(expressID,type,Identification,Name,Description,Roles,Addresses)}ToTape(){let args=[];return args.push(this.Identification),args.push(this.Name),args.push(this.Description),args.push(this.Roles),args.push(this.Addresses),args}},IfcOrganizationRelationship=class{constructor(expressID,type,Name,Description,RelatingOrganization,RelatedOrganizations){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatingOrganization=RelatingOrganization,this.RelatedOrganizations=RelatedOrganizations}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatingOrganization=tape[ptr++],RelatedOrganizations=tape[ptr++];return new IfcOrganizationRelationship(expressID,type,Name,Description,RelatingOrganization,RelatedOrganizations)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatingOrganization),args.push(this.RelatedOrganizations),args}},IfcOrientationExpression=class{constructor(expressID,type,LateralAxisDirection,VerticalAxisDirection){this.expressID=expressID,this.type=type,this.LateralAxisDirection=LateralAxisDirection,this.VerticalAxisDirection=VerticalAxisDirection}static FromTape(expressID,type,tape){let ptr=0,LateralAxisDirection=tape[ptr++],VerticalAxisDirection=tape[ptr++];return new IfcOrientationExpression(expressID,type,LateralAxisDirection,VerticalAxisDirection)}ToTape(){let args=[];return args.push(this.LateralAxisDirection),args.push(this.VerticalAxisDirection),args}},IfcOrientedEdge=class{constructor(expressID,type,EdgeStart,EdgeEnd,EdgeElement,Orientation){this.expressID=expressID,this.type=type,this.EdgeStart=EdgeStart,this.EdgeEnd=EdgeEnd,this.EdgeElement=EdgeElement,this.Orientation=Orientation}static FromTape(expressID,type,tape){let ptr=0,EdgeStart=tape[ptr++],EdgeEnd=tape[ptr++],EdgeElement=tape[ptr++],Orientation=tape[ptr++];return new IfcOrientedEdge(expressID,type,EdgeStart,EdgeEnd,EdgeElement,Orientation)}ToTape(){let args=[];return args.push(this.EdgeStart),args.push(this.EdgeEnd),args.push(this.EdgeElement),args.push(this.Orientation),args}},IfcOuterBoundaryCurve=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID,this.type=type,this.Segments=Segments,this.SelfIntersect=SelfIntersect}static FromTape(expressID,type,tape){let ptr=0,Segments=tape[ptr++],SelfIntersect=tape[ptr++];return new IfcOuterBoundaryCurve(expressID,type,Segments,SelfIntersect)}ToTape(){let args=[];return args.push(this.Segments),args.push(this.SelfIntersect),args}},IfcOutlet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcOutlet(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcOutletType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcOutletType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcOwnerHistory=class{constructor(expressID,type,OwningUser,OwningApplication,State,ChangeAction,LastModifiedDate,LastModifyingUser,LastModifyingApplication,CreationDate){this.expressID=expressID,this.type=type,this.OwningUser=OwningUser,this.OwningApplication=OwningApplication,this.State=State,this.ChangeAction=ChangeAction,this.LastModifiedDate=LastModifiedDate,this.LastModifyingUser=LastModifyingUser,this.LastModifyingApplication=LastModifyingApplication,this.CreationDate=CreationDate}static FromTape(expressID,type,tape){let ptr=0,OwningUser=tape[ptr++],OwningApplication=tape[ptr++],State=tape[ptr++],ChangeAction=tape[ptr++],LastModifiedDate=tape[ptr++],LastModifyingUser=tape[ptr++],LastModifyingApplication=tape[ptr++],CreationDate=tape[ptr++];return new IfcOwnerHistory(expressID,type,OwningUser,OwningApplication,State,ChangeAction,LastModifiedDate,LastModifyingUser,LastModifyingApplication,CreationDate)}ToTape(){let args=[];return args.push(this.OwningUser),args.push(this.OwningApplication),args.push(this.State),args.push(this.ChangeAction),args.push(this.LastModifiedDate),args.push(this.LastModifyingUser),args.push(this.LastModifyingApplication),args.push(this.CreationDate),args}},IfcParameterizedProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++];return new IfcParameterizedProfileDef(expressID,type,ProfileType,ProfileName,Position)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args}},IfcPath=class{constructor(expressID,type,EdgeList){this.expressID=expressID,this.type=type,this.EdgeList=EdgeList}static FromTape(expressID,type,tape){let ptr=0,EdgeList=tape[ptr++];return new IfcPath(expressID,type,EdgeList)}ToTape(){let args=[];return args.push(this.EdgeList),args}},IfcPcurve=class{constructor(expressID,type,BasisSurface,ReferenceCurve){this.expressID=expressID,this.type=type,this.BasisSurface=BasisSurface,this.ReferenceCurve=ReferenceCurve}static FromTape(expressID,type,tape){let ptr=0,BasisSurface=tape[ptr++],ReferenceCurve=tape[ptr++];return new IfcPcurve(expressID,type,BasisSurface,ReferenceCurve)}ToTape(){let args=[];return args.push(this.BasisSurface),args.push(this.ReferenceCurve),args}},IfcPerformanceHistory=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LifeCyclePhase,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LifeCyclePhase=LifeCyclePhase,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LifeCyclePhase=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPerformanceHistory(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LifeCyclePhase,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LifeCyclePhase),args.push(this.PredefinedType),args}},IfcPermeableCoveringProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.OperationType=OperationType,this.PanelPosition=PanelPosition,this.FrameDepth=FrameDepth,this.FrameThickness=FrameThickness,this.ShapeAspectStyle=ShapeAspectStyle}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],OperationType=tape[ptr++],PanelPosition=tape[ptr++],FrameDepth=tape[ptr++],FrameThickness=tape[ptr++],ShapeAspectStyle=tape[ptr++];return new IfcPermeableCoveringProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.OperationType),args.push(this.PanelPosition),args.push(this.FrameDepth),args.push(this.FrameThickness),args.push(this.ShapeAspectStyle),args}},IfcPermit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.PredefinedType=PredefinedType,this.Status=Status,this.LongDescription=LongDescription}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],PredefinedType=tape[ptr++],Status=tape[ptr++],LongDescription=tape[ptr++];return new IfcPermit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.PredefinedType),args.push(this.Status),args.push(this.LongDescription),args}},IfcPerson=class{constructor(expressID,type,Identification,FamilyName,GivenName,MiddleNames,PrefixTitles,SuffixTitles,Roles,Addresses){this.expressID=expressID,this.type=type,this.Identification=Identification,this.FamilyName=FamilyName,this.GivenName=GivenName,this.MiddleNames=MiddleNames,this.PrefixTitles=PrefixTitles,this.SuffixTitles=SuffixTitles,this.Roles=Roles,this.Addresses=Addresses}static FromTape(expressID,type,tape){let ptr=0,Identification=tape[ptr++],FamilyName=tape[ptr++],GivenName=tape[ptr++],MiddleNames=tape[ptr++],PrefixTitles=tape[ptr++],SuffixTitles=tape[ptr++],Roles=tape[ptr++],Addresses=tape[ptr++];return new IfcPerson(expressID,type,Identification,FamilyName,GivenName,MiddleNames,PrefixTitles,SuffixTitles,Roles,Addresses)}ToTape(){let args=[];return args.push(this.Identification),args.push(this.FamilyName),args.push(this.GivenName),args.push(this.MiddleNames),args.push(this.PrefixTitles),args.push(this.SuffixTitles),args.push(this.Roles),args.push(this.Addresses),args}},IfcPersonAndOrganization=class{constructor(expressID,type,ThePerson,TheOrganization,Roles){this.expressID=expressID,this.type=type,this.ThePerson=ThePerson,this.TheOrganization=TheOrganization,this.Roles=Roles}static FromTape(expressID,type,tape){let ptr=0,ThePerson=tape[ptr++],TheOrganization=tape[ptr++],Roles=tape[ptr++];return new IfcPersonAndOrganization(expressID,type,ThePerson,TheOrganization,Roles)}ToTape(){let args=[];return args.push(this.ThePerson),args.push(this.TheOrganization),args.push(this.Roles),args}},IfcPhysicalComplexQuantity=class{constructor(expressID,type,Name,Description,HasQuantities,Discrimination,Quality,Usage){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.HasQuantities=HasQuantities,this.Discrimination=Discrimination,this.Quality=Quality,this.Usage=Usage}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],HasQuantities=tape[ptr++],Discrimination=tape[ptr++],Quality=tape[ptr++],Usage=tape[ptr++];return new IfcPhysicalComplexQuantity(expressID,type,Name,Description,HasQuantities,Discrimination,Quality,Usage)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.HasQuantities),args.push(this.Discrimination),args.push(this.Quality),args.push(this.Usage),args}},IfcPhysicalQuantity=class{constructor(expressID,type,Name,Description){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++];return new IfcPhysicalQuantity(expressID,type,Name,Description)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args}},IfcPhysicalSimpleQuantity=class{constructor(expressID,type,Name,Description,Unit){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Unit=Unit}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++];return new IfcPhysicalSimpleQuantity(expressID,type,Name,Description,Unit)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Unit),args}},IfcPile=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType,ConstructionType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType,this.ConstructionType=ConstructionType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++],ConstructionType=tape[ptr++];return new IfcPile(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType,ConstructionType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args.push(this.ConstructionType),args}},IfcPileType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPileType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcPipeFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPipeFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcPipeFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPipeFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcPipeSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPipeSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcPipeSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPipeSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcPixelTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,Width,Height,ColourComponents,Pixel){this.expressID=expressID,this.type=type,this.RepeatS=RepeatS,this.RepeatT=RepeatT,this.Mode=Mode,this.TextureTransform=TextureTransform,this.Parameter=Parameter,this.Width=Width,this.Height=Height,this.ColourComponents=ColourComponents,this.Pixel=Pixel}static FromTape(expressID,type,tape){let ptr=0,RepeatS=tape[ptr++],RepeatT=tape[ptr++],Mode=tape[ptr++],TextureTransform=tape[ptr++],Parameter=tape[ptr++],Width=tape[ptr++],Height=tape[ptr++],ColourComponents=tape[ptr++],Pixel=tape[ptr++];return new IfcPixelTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,Width,Height,ColourComponents,Pixel)}ToTape(){let args=[];return args.push(this.RepeatS),args.push(this.RepeatT),args.push(this.Mode),args.push(this.TextureTransform),args.push(this.Parameter),args.push(this.Width),args.push(this.Height),args.push(this.ColourComponents),args.push(this.Pixel),args}},IfcPlacement=class{constructor(expressID,type,Location){this.expressID=expressID,this.type=type,this.Location=Location}static FromTape(expressID,type,tape){let ptr=0,Location=tape[ptr++];return new IfcPlacement(expressID,type,Location)}ToTape(){let args=[];return args.push(this.Location),args}},IfcPlanarBox=class{constructor(expressID,type,SizeInX,SizeInY,Placement){this.expressID=expressID,this.type=type,this.SizeInX=SizeInX,this.SizeInY=SizeInY,this.Placement=Placement}static FromTape(expressID,type,tape){let ptr=0,SizeInX=tape[ptr++],SizeInY=tape[ptr++],Placement=tape[ptr++];return new IfcPlanarBox(expressID,type,SizeInX,SizeInY,Placement)}ToTape(){let args=[];return args.push(this.SizeInX),args.push(this.SizeInY),args.push(this.Placement),args}},IfcPlanarExtent=class{constructor(expressID,type,SizeInX,SizeInY){this.expressID=expressID,this.type=type,this.SizeInX=SizeInX,this.SizeInY=SizeInY}static FromTape(expressID,type,tape){let ptr=0,SizeInX=tape[ptr++],SizeInY=tape[ptr++];return new IfcPlanarExtent(expressID,type,SizeInX,SizeInY)}ToTape(){let args=[];return args.push(this.SizeInX),args.push(this.SizeInY),args}},IfcPlane=class{constructor(expressID,type,Position){this.expressID=expressID,this.type=type,this.Position=Position}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++];return new IfcPlane(expressID,type,Position)}ToTape(){let args=[];return args.push(this.Position),args}},IfcPlate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPlate(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcPlateStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPlateStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcPlateType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPlateType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcPoint=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcPoint(expressID,type)}ToTape(){return[]}},IfcPointOnCurve=class{constructor(expressID,type,BasisCurve,PointParameter){this.expressID=expressID,this.type=type,this.BasisCurve=BasisCurve,this.PointParameter=PointParameter}static FromTape(expressID,type,tape){let ptr=0,BasisCurve=tape[ptr++],PointParameter=tape[ptr++];return new IfcPointOnCurve(expressID,type,BasisCurve,PointParameter)}ToTape(){let args=[];return args.push(this.BasisCurve),args.push(this.PointParameter),args}},IfcPointOnSurface=class{constructor(expressID,type,BasisSurface,PointParameterU,PointParameterV){this.expressID=expressID,this.type=type,this.BasisSurface=BasisSurface,this.PointParameterU=PointParameterU,this.PointParameterV=PointParameterV}static FromTape(expressID,type,tape){let ptr=0,BasisSurface=tape[ptr++],PointParameterU=tape[ptr++],PointParameterV=tape[ptr++];return new IfcPointOnSurface(expressID,type,BasisSurface,PointParameterU,PointParameterV)}ToTape(){let args=[];return args.push(this.BasisSurface),args.push(this.PointParameterU),args.push(this.PointParameterV),args}},IfcPolyLoop=class{constructor(expressID,type,Polygon){this.expressID=expressID,this.type=type,this.Polygon=Polygon}static FromTape(expressID,type,tape){let ptr=0,Polygon=tape[ptr++];return new IfcPolyLoop(expressID,type,Polygon)}ToTape(){let args=[];return args.push(this.Polygon),args}},IfcPolygonalBoundedHalfSpace=class{constructor(expressID,type,BaseSurface,AgreementFlag,Position,PolygonalBoundary){this.expressID=expressID,this.type=type,this.BaseSurface=BaseSurface,this.AgreementFlag=AgreementFlag,this.Position=Position,this.PolygonalBoundary=PolygonalBoundary}static FromTape(expressID,type,tape){let ptr=0,BaseSurface=tape[ptr++],AgreementFlag=tape[ptr++],Position=tape[ptr++],PolygonalBoundary=tape[ptr++];return new IfcPolygonalBoundedHalfSpace(expressID,type,BaseSurface,AgreementFlag,Position,PolygonalBoundary)}ToTape(){let args=[];return args.push(this.BaseSurface),args.push(this.AgreementFlag),args.push(this.Position),args.push(this.PolygonalBoundary),args}},IfcPolygonalFaceSet=class{constructor(expressID,type,Coordinates,Closed,Faces,PnIndex){this.expressID=expressID,this.type=type,this.Coordinates=Coordinates,this.Closed=Closed,this.Faces=Faces,this.PnIndex=PnIndex}static FromTape(expressID,type,tape){let ptr=0,Coordinates=tape[ptr++],Closed=tape[ptr++],Faces=tape[ptr++],PnIndex=tape[ptr++];return new IfcPolygonalFaceSet(expressID,type,Coordinates,Closed,Faces,PnIndex)}ToTape(){let args=[];return args.push(this.Coordinates),args.push(this.Closed),args.push(this.Faces),args.push(this.PnIndex),args}},IfcPolyline=class{constructor(expressID,type,Points){this.expressID=expressID,this.type=type,this.Points=Points}static FromTape(expressID,type,tape){let ptr=0,Points=tape[ptr++];return new IfcPolyline(expressID,type,Points)}ToTape(){let args=[];return args.push(this.Points),args}},IfcPort=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++];return new IfcPort(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args}},IfcPositioningElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++];return new IfcPositioningElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args}},IfcPostalAddress=class{constructor(expressID,type,Purpose,Description,UserDefinedPurpose,InternalLocation,AddressLines,PostalBox,Town,Region,PostalCode,Country){this.expressID=expressID,this.type=type,this.Purpose=Purpose,this.Description=Description,this.UserDefinedPurpose=UserDefinedPurpose,this.InternalLocation=InternalLocation,this.AddressLines=AddressLines,this.PostalBox=PostalBox,this.Town=Town,this.Region=Region,this.PostalCode=PostalCode,this.Country=Country}static FromTape(expressID,type,tape){let ptr=0,Purpose=tape[ptr++],Description=tape[ptr++],UserDefinedPurpose=tape[ptr++],InternalLocation=tape[ptr++],AddressLines=tape[ptr++],PostalBox=tape[ptr++],Town=tape[ptr++],Region=tape[ptr++],PostalCode=tape[ptr++],Country=tape[ptr++];return new IfcPostalAddress(expressID,type,Purpose,Description,UserDefinedPurpose,InternalLocation,AddressLines,PostalBox,Town,Region,PostalCode,Country)}ToTape(){let args=[];return args.push(this.Purpose),args.push(this.Description),args.push(this.UserDefinedPurpose),args.push(this.InternalLocation),args.push(this.AddressLines),args.push(this.PostalBox),args.push(this.Town),args.push(this.Region),args.push(this.PostalCode),args.push(this.Country),args}},IfcPreDefinedColour=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcPreDefinedColour(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcPreDefinedCurveFont=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcPreDefinedCurveFont(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcPreDefinedItem=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcPreDefinedItem(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcPreDefinedProperties=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcPreDefinedProperties(expressID,type)}ToTape(){return[]}},IfcPreDefinedPropertySet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcPreDefinedPropertySet(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcPreDefinedTextFont=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcPreDefinedTextFont(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcPresentationItem=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcPresentationItem(expressID,type)}ToTape(){return[]}},IfcPresentationLayerAssignment=class{constructor(expressID,type,Name,Description,AssignedItems,Identifier){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.AssignedItems=AssignedItems,this.Identifier=Identifier}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],AssignedItems=tape[ptr++],Identifier=tape[ptr++];return new IfcPresentationLayerAssignment(expressID,type,Name,Description,AssignedItems,Identifier)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.AssignedItems),args.push(this.Identifier),args}},IfcPresentationLayerWithStyle=class{constructor(expressID,type,Name,Description,AssignedItems,Identifier,LayerOn,LayerFrozen,LayerBlocked,LayerStyles){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.AssignedItems=AssignedItems,this.Identifier=Identifier,this.LayerOn=LayerOn,this.LayerFrozen=LayerFrozen,this.LayerBlocked=LayerBlocked,this.LayerStyles=LayerStyles}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],AssignedItems=tape[ptr++],Identifier=tape[ptr++],LayerOn=tape[ptr++],LayerFrozen=tape[ptr++],LayerBlocked=tape[ptr++],LayerStyles=tape[ptr++];return new IfcPresentationLayerWithStyle(expressID,type,Name,Description,AssignedItems,Identifier,LayerOn,LayerFrozen,LayerBlocked,LayerStyles)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.AssignedItems),args.push(this.Identifier),args.push(this.LayerOn),args.push(this.LayerFrozen),args.push(this.LayerBlocked),args.push(this.LayerStyles),args}},IfcPresentationStyle=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcPresentationStyle(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcPresentationStyleAssignment=class{constructor(expressID,type,Styles){this.expressID=expressID,this.type=type,this.Styles=Styles}static FromTape(expressID,type,tape){let ptr=0,Styles=tape[ptr++];return new IfcPresentationStyleAssignment(expressID,type,Styles)}ToTape(){let args=[];return args.push(this.Styles),args}},IfcProcedure=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],PredefinedType=tape[ptr++];return new IfcProcedure(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.PredefinedType),args}},IfcProcedureType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ProcessType=ProcessType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ProcessType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcProcedureType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ProcessType),args.push(this.PredefinedType),args}},IfcProcess=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++];return new IfcProcess(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args}},IfcProduct=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++];return new IfcProduct(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args}},IfcProductDefinitionShape=class{constructor(expressID,type,Name,Description,Representations){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Representations=Representations}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Representations=tape[ptr++];return new IfcProductDefinitionShape(expressID,type,Name,Description,Representations)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Representations),args}},IfcProductRepresentation=class{constructor(expressID,type,Name,Description,Representations){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Representations=Representations}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Representations=tape[ptr++];return new IfcProductRepresentation(expressID,type,Name,Description,Representations)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Representations),args}},IfcProfileDef=class{constructor(expressID,type,ProfileType,ProfileName){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++];return new IfcProfileDef(expressID,type,ProfileType,ProfileName)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args}},IfcProfileProperties=class{constructor(expressID,type,Name,Description,Properties2,ProfileDefinition){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Properties=Properties2,this.ProfileDefinition=ProfileDefinition}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Properties2=tape[ptr++],ProfileDefinition=tape[ptr++];return new IfcProfileProperties(expressID,type,Name,Description,Properties2,ProfileDefinition)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Properties),args.push(this.ProfileDefinition),args}},IfcProject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.LongName=LongName,this.Phase=Phase,this.RepresentationContexts=RepresentationContexts,this.UnitsInContext=UnitsInContext}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],LongName=tape[ptr++],Phase=tape[ptr++],RepresentationContexts=tape[ptr++],UnitsInContext=tape[ptr++];return new IfcProject(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.LongName),args.push(this.Phase),args.push(this.RepresentationContexts),args.push(this.UnitsInContext),args}},IfcProjectLibrary=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.LongName=LongName,this.Phase=Phase,this.RepresentationContexts=RepresentationContexts,this.UnitsInContext=UnitsInContext}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],LongName=tape[ptr++],Phase=tape[ptr++],RepresentationContexts=tape[ptr++],UnitsInContext=tape[ptr++];return new IfcProjectLibrary(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.LongName),args.push(this.Phase),args.push(this.RepresentationContexts),args.push(this.UnitsInContext),args}},IfcProjectOrder=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.PredefinedType=PredefinedType,this.Status=Status,this.LongDescription=LongDescription}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],PredefinedType=tape[ptr++],Status=tape[ptr++],LongDescription=tape[ptr++];return new IfcProjectOrder(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.PredefinedType),args.push(this.Status),args.push(this.LongDescription),args}},IfcProjectedCRS=class{constructor(expressID,type,Name,Description,GeodeticDatum,VerticalDatum,MapProjection,MapZone,MapUnit){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.GeodeticDatum=GeodeticDatum,this.VerticalDatum=VerticalDatum,this.MapProjection=MapProjection,this.MapZone=MapZone,this.MapUnit=MapUnit}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],GeodeticDatum=tape[ptr++],VerticalDatum=tape[ptr++],MapProjection=tape[ptr++],MapZone=tape[ptr++],MapUnit=tape[ptr++];return new IfcProjectedCRS(expressID,type,Name,Description,GeodeticDatum,VerticalDatum,MapProjection,MapZone,MapUnit)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.GeodeticDatum),args.push(this.VerticalDatum),args.push(this.MapProjection),args.push(this.MapZone),args.push(this.MapUnit),args}},IfcProjectionElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcProjectionElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcProperty=class{constructor(expressID,type,Name,Description){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++];return new IfcProperty(expressID,type,Name,Description)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args}},IfcPropertyAbstraction=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcPropertyAbstraction(expressID,type)}ToTape(){return[]}},IfcPropertyBoundedValue=class{constructor(expressID,type,Name,Description,UpperBoundValue,LowerBoundValue,Unit,SetPointValue){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.UpperBoundValue=UpperBoundValue,this.LowerBoundValue=LowerBoundValue,this.Unit=Unit,this.SetPointValue=SetPointValue}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],UpperBoundValue=tape[ptr++],LowerBoundValue=tape[ptr++],Unit=tape[ptr++],SetPointValue=tape[ptr++];return new IfcPropertyBoundedValue(expressID,type,Name,Description,UpperBoundValue,LowerBoundValue,Unit,SetPointValue)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.UpperBoundValue),args.push(this.LowerBoundValue),args.push(this.Unit),args.push(this.SetPointValue),args}},IfcPropertyDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcPropertyDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcPropertyDependencyRelationship=class{constructor(expressID,type,Name,Description,DependingProperty,DependantProperty,Expression){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.DependingProperty=DependingProperty,this.DependantProperty=DependantProperty,this.Expression=Expression}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],DependingProperty=tape[ptr++],DependantProperty=tape[ptr++],Expression=tape[ptr++];return new IfcPropertyDependencyRelationship(expressID,type,Name,Description,DependingProperty,DependantProperty,Expression)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.DependingProperty),args.push(this.DependantProperty),args.push(this.Expression),args}},IfcPropertyEnumeratedValue=class{constructor(expressID,type,Name,Description,EnumerationValues,EnumerationReference){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.EnumerationValues=EnumerationValues,this.EnumerationReference=EnumerationReference}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],EnumerationValues=tape[ptr++],EnumerationReference=tape[ptr++];return new IfcPropertyEnumeratedValue(expressID,type,Name,Description,EnumerationValues,EnumerationReference)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.EnumerationValues),args.push(this.EnumerationReference),args}},IfcPropertyEnumeration=class{constructor(expressID,type,Name,EnumerationValues,Unit){this.expressID=expressID,this.type=type,this.Name=Name,this.EnumerationValues=EnumerationValues,this.Unit=Unit}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],EnumerationValues=tape[ptr++],Unit=tape[ptr++];return new IfcPropertyEnumeration(expressID,type,Name,EnumerationValues,Unit)}ToTape(){let args=[];return args.push(this.Name),args.push(this.EnumerationValues),args.push(this.Unit),args}},IfcPropertyListValue=class{constructor(expressID,type,Name,Description,ListValues,Unit){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.ListValues=ListValues,this.Unit=Unit}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],ListValues=tape[ptr++],Unit=tape[ptr++];return new IfcPropertyListValue(expressID,type,Name,Description,ListValues,Unit)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.ListValues),args.push(this.Unit),args}},IfcPropertyReferenceValue=class{constructor(expressID,type,Name,Description,UsageName,PropertyReference){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.UsageName=UsageName,this.PropertyReference=PropertyReference}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],UsageName=tape[ptr++],PropertyReference=tape[ptr++];return new IfcPropertyReferenceValue(expressID,type,Name,Description,UsageName,PropertyReference)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.UsageName),args.push(this.PropertyReference),args}},IfcPropertySet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,HasProperties){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.HasProperties=HasProperties}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],HasProperties=tape[ptr++];return new IfcPropertySet(expressID,type,GlobalId,OwnerHistory,Name,Description,HasProperties)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.HasProperties),args}},IfcPropertySetDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcPropertySetDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcPropertySetTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,ApplicableEntity,HasPropertyTemplates){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.TemplateType=TemplateType,this.ApplicableEntity=ApplicableEntity,this.HasPropertyTemplates=HasPropertyTemplates}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],TemplateType=tape[ptr++],ApplicableEntity=tape[ptr++],HasPropertyTemplates=tape[ptr++];return new IfcPropertySetTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,ApplicableEntity,HasPropertyTemplates)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.TemplateType),args.push(this.ApplicableEntity),args.push(this.HasPropertyTemplates),args}},IfcPropertySingleValue=class{constructor(expressID,type,Name,Description,NominalValue,Unit){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.NominalValue=NominalValue,this.Unit=Unit}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],NominalValue=tape[ptr++],Unit=tape[ptr++];return new IfcPropertySingleValue(expressID,type,Name,Description,NominalValue,Unit)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.NominalValue),args.push(this.Unit),args}},IfcPropertyTableValue=class{constructor(expressID,type,Name,Description,DefiningValues,DefinedValues,Expression,DefiningUnit,DefinedUnit,CurveInterpolation){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.DefiningValues=DefiningValues,this.DefinedValues=DefinedValues,this.Expression=Expression,this.DefiningUnit=DefiningUnit,this.DefinedUnit=DefinedUnit,this.CurveInterpolation=CurveInterpolation}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],DefiningValues=tape[ptr++],DefinedValues=tape[ptr++],Expression=tape[ptr++],DefiningUnit=tape[ptr++],DefinedUnit=tape[ptr++],CurveInterpolation=tape[ptr++];return new IfcPropertyTableValue(expressID,type,Name,Description,DefiningValues,DefinedValues,Expression,DefiningUnit,DefinedUnit,CurveInterpolation)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.DefiningValues),args.push(this.DefinedValues),args.push(this.Expression),args.push(this.DefiningUnit),args.push(this.DefinedUnit),args.push(this.CurveInterpolation),args}},IfcPropertyTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcPropertyTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcPropertyTemplateDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcPropertyTemplateDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcProtectiveDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcProtectiveDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcProtectiveDeviceTrippingUnit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcProtectiveDeviceTrippingUnit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcProtectiveDeviceTrippingUnitType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcProtectiveDeviceTrippingUnitType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcProtectiveDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcProtectiveDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcProxy=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,ProxyType,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.ProxyType=ProxyType,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],ProxyType=tape[ptr++],Tag=tape[ptr++];return new IfcProxy(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,ProxyType,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.ProxyType),args.push(this.Tag),args}},IfcPump=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPump(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcPumpType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcPumpType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcQuantityArea=class{constructor(expressID,type,Name,Description,Unit,AreaValue,Formula){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Unit=Unit,this.AreaValue=AreaValue,this.Formula=Formula}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++],AreaValue=tape[ptr++],Formula=tape[ptr++];return new IfcQuantityArea(expressID,type,Name,Description,Unit,AreaValue,Formula)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Unit),args.push(this.AreaValue),args.push(this.Formula),args}},IfcQuantityCount=class{constructor(expressID,type,Name,Description,Unit,CountValue,Formula){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Unit=Unit,this.CountValue=CountValue,this.Formula=Formula}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++],CountValue=tape[ptr++],Formula=tape[ptr++];return new IfcQuantityCount(expressID,type,Name,Description,Unit,CountValue,Formula)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Unit),args.push(this.CountValue),args.push(this.Formula),args}},IfcQuantityLength=class{constructor(expressID,type,Name,Description,Unit,LengthValue,Formula){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Unit=Unit,this.LengthValue=LengthValue,this.Formula=Formula}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++],LengthValue=tape[ptr++],Formula=tape[ptr++];return new IfcQuantityLength(expressID,type,Name,Description,Unit,LengthValue,Formula)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Unit),args.push(this.LengthValue),args.push(this.Formula),args}},IfcQuantitySet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcQuantitySet(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcQuantityTime=class{constructor(expressID,type,Name,Description,Unit,TimeValue,Formula){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Unit=Unit,this.TimeValue=TimeValue,this.Formula=Formula}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++],TimeValue=tape[ptr++],Formula=tape[ptr++];return new IfcQuantityTime(expressID,type,Name,Description,Unit,TimeValue,Formula)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Unit),args.push(this.TimeValue),args.push(this.Formula),args}},IfcQuantityVolume=class{constructor(expressID,type,Name,Description,Unit,VolumeValue,Formula){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Unit=Unit,this.VolumeValue=VolumeValue,this.Formula=Formula}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++],VolumeValue=tape[ptr++],Formula=tape[ptr++];return new IfcQuantityVolume(expressID,type,Name,Description,Unit,VolumeValue,Formula)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Unit),args.push(this.VolumeValue),args.push(this.Formula),args}},IfcQuantityWeight=class{constructor(expressID,type,Name,Description,Unit,WeightValue,Formula){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.Unit=Unit,this.WeightValue=WeightValue,this.Formula=Formula}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++],WeightValue=tape[ptr++],Formula=tape[ptr++];return new IfcQuantityWeight(expressID,type,Name,Description,Unit,WeightValue,Formula)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.Unit),args.push(this.WeightValue),args.push(this.Formula),args}},IfcRailing=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRailing(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcRailingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRailingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcRamp=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRamp(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcRampFlight=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRampFlight(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcRampFlightType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRampFlightType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcRampType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRampType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcRationalBSplineCurveWithKnots=class{constructor(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec,WeightsData){this.expressID=expressID,this.type=type,this.Degree=Degree,this.ControlPointsList=ControlPointsList,this.CurveForm=CurveForm,this.ClosedCurve=ClosedCurve,this.SelfIntersect=SelfIntersect,this.KnotMultiplicities=KnotMultiplicities,this.Knots=Knots,this.KnotSpec=KnotSpec,this.WeightsData=WeightsData}static FromTape(expressID,type,tape){let ptr=0,Degree=tape[ptr++],ControlPointsList=tape[ptr++],CurveForm=tape[ptr++],ClosedCurve=tape[ptr++],SelfIntersect=tape[ptr++],KnotMultiplicities=tape[ptr++],Knots=tape[ptr++],KnotSpec=tape[ptr++],WeightsData=tape[ptr++];return new IfcRationalBSplineCurveWithKnots(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec,WeightsData)}ToTape(){let args=[];return args.push(this.Degree),args.push(this.ControlPointsList),args.push(this.CurveForm),args.push(this.ClosedCurve),args.push(this.SelfIntersect),args.push(this.KnotMultiplicities),args.push(this.Knots),args.push(this.KnotSpec),args.push(this.WeightsData),args}},IfcRationalBSplineSurfaceWithKnots=class{constructor(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec,WeightsData){this.expressID=expressID,this.type=type,this.UDegree=UDegree,this.VDegree=VDegree,this.ControlPointsList=ControlPointsList,this.SurfaceForm=SurfaceForm,this.UClosed=UClosed,this.VClosed=VClosed,this.SelfIntersect=SelfIntersect,this.UMultiplicities=UMultiplicities,this.VMultiplicities=VMultiplicities,this.UKnots=UKnots,this.VKnots=VKnots,this.KnotSpec=KnotSpec,this.WeightsData=WeightsData}static FromTape(expressID,type,tape){let ptr=0,UDegree=tape[ptr++],VDegree=tape[ptr++],ControlPointsList=tape[ptr++],SurfaceForm=tape[ptr++],UClosed=tape[ptr++],VClosed=tape[ptr++],SelfIntersect=tape[ptr++],UMultiplicities=tape[ptr++],VMultiplicities=tape[ptr++],UKnots=tape[ptr++],VKnots=tape[ptr++],KnotSpec=tape[ptr++],WeightsData=tape[ptr++];return new IfcRationalBSplineSurfaceWithKnots(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec,WeightsData)}ToTape(){let args=[];return args.push(this.UDegree),args.push(this.VDegree),args.push(this.ControlPointsList),args.push(this.SurfaceForm),args.push(this.UClosed),args.push(this.VClosed),args.push(this.SelfIntersect),args.push(this.UMultiplicities),args.push(this.VMultiplicities),args.push(this.UKnots),args.push(this.VKnots),args.push(this.KnotSpec),args.push(this.WeightsData),args}},IfcRectangleHollowProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,WallThickness,InnerFilletRadius,OuterFilletRadius){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.XDim=XDim,this.YDim=YDim,this.WallThickness=WallThickness,this.InnerFilletRadius=InnerFilletRadius,this.OuterFilletRadius=OuterFilletRadius}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],XDim=tape[ptr++],YDim=tape[ptr++],WallThickness=tape[ptr++],InnerFilletRadius=tape[ptr++],OuterFilletRadius=tape[ptr++];return new IfcRectangleHollowProfileDef(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,WallThickness,InnerFilletRadius,OuterFilletRadius)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.XDim),args.push(this.YDim),args.push(this.WallThickness),args.push(this.InnerFilletRadius),args.push(this.OuterFilletRadius),args}},IfcRectangleProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,XDim,YDim){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.XDim=XDim,this.YDim=YDim}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],XDim=tape[ptr++],YDim=tape[ptr++];return new IfcRectangleProfileDef(expressID,type,ProfileType,ProfileName,Position,XDim,YDim)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.XDim),args.push(this.YDim),args}},IfcRectangularPyramid=class{constructor(expressID,type,Position,XLength,YLength,Height){this.expressID=expressID,this.type=type,this.Position=Position,this.XLength=XLength,this.YLength=YLength,this.Height=Height}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],XLength=tape[ptr++],YLength=tape[ptr++],Height=tape[ptr++];return new IfcRectangularPyramid(expressID,type,Position,XLength,YLength,Height)}ToTape(){let args=[];return args.push(this.Position),args.push(this.XLength),args.push(this.YLength),args.push(this.Height),args}},IfcRectangularTrimmedSurface=class{constructor(expressID,type,BasisSurface,U1,V1,U2,V2,Usense,Vsense){this.expressID=expressID,this.type=type,this.BasisSurface=BasisSurface,this.U1=U1,this.V1=V1,this.U2=U2,this.V2=V2,this.Usense=Usense,this.Vsense=Vsense}static FromTape(expressID,type,tape){let ptr=0,BasisSurface=tape[ptr++],U1=tape[ptr++],V1=tape[ptr++],U2=tape[ptr++],V2=tape[ptr++],Usense=tape[ptr++],Vsense=tape[ptr++];return new IfcRectangularTrimmedSurface(expressID,type,BasisSurface,U1,V1,U2,V2,Usense,Vsense)}ToTape(){let args=[];return args.push(this.BasisSurface),args.push(this.U1),args.push(this.V1),args.push(this.U2),args.push(this.V2),args.push(this.Usense),args.push(this.Vsense),args}},IfcRecurrencePattern=class{constructor(expressID,type,RecurrenceType,DayComponent,WeekdayComponent,MonthComponent,Position,Interval,Occurrences,TimePeriods){this.expressID=expressID,this.type=type,this.RecurrenceType=RecurrenceType,this.DayComponent=DayComponent,this.WeekdayComponent=WeekdayComponent,this.MonthComponent=MonthComponent,this.Position=Position,this.Interval=Interval,this.Occurrences=Occurrences,this.TimePeriods=TimePeriods}static FromTape(expressID,type,tape){let ptr=0,RecurrenceType=tape[ptr++],DayComponent=tape[ptr++],WeekdayComponent=tape[ptr++],MonthComponent=tape[ptr++],Position=tape[ptr++],Interval=tape[ptr++],Occurrences=tape[ptr++],TimePeriods=tape[ptr++];return new IfcRecurrencePattern(expressID,type,RecurrenceType,DayComponent,WeekdayComponent,MonthComponent,Position,Interval,Occurrences,TimePeriods)}ToTape(){let args=[];return args.push(this.RecurrenceType),args.push(this.DayComponent),args.push(this.WeekdayComponent),args.push(this.MonthComponent),args.push(this.Position),args.push(this.Interval),args.push(this.Occurrences),args.push(this.TimePeriods),args}},IfcReference=class{constructor(expressID,type,TypeIdentifier,AttributeIdentifier,InstanceName,ListPositions,InnerReference){this.expressID=expressID,this.type=type,this.TypeIdentifier=TypeIdentifier,this.AttributeIdentifier=AttributeIdentifier,this.InstanceName=InstanceName,this.ListPositions=ListPositions,this.InnerReference=InnerReference}static FromTape(expressID,type,tape){let ptr=0,TypeIdentifier=tape[ptr++],AttributeIdentifier=tape[ptr++],InstanceName=tape[ptr++],ListPositions=tape[ptr++],InnerReference=tape[ptr++];return new IfcReference(expressID,type,TypeIdentifier,AttributeIdentifier,InstanceName,ListPositions,InnerReference)}ToTape(){let args=[];return args.push(this.TypeIdentifier),args.push(this.AttributeIdentifier),args.push(this.InstanceName),args.push(this.ListPositions),args.push(this.InnerReference),args}},IfcReferent=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,RestartDistance){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.PredefinedType=PredefinedType,this.RestartDistance=RestartDistance}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],PredefinedType=tape[ptr++],RestartDistance=tape[ptr++];return new IfcReferent(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,RestartDistance)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.PredefinedType),args.push(this.RestartDistance),args}},IfcRegularTimeSeries=class{constructor(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,TimeStep,Values){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.StartTime=StartTime,this.EndTime=EndTime,this.TimeSeriesDataType=TimeSeriesDataType,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.Unit=Unit,this.TimeStep=TimeStep,this.Values=Values}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],StartTime=tape[ptr++],EndTime=tape[ptr++],TimeSeriesDataType=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],Unit=tape[ptr++],TimeStep=tape[ptr++],Values=tape[ptr++];return new IfcRegularTimeSeries(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,TimeStep,Values)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.StartTime),args.push(this.EndTime),args.push(this.TimeSeriesDataType),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.Unit),args.push(this.TimeStep),args.push(this.Values),args}},IfcReinforcementBarProperties=class{constructor(expressID,type,TotalCrossSectionArea,SteelGrade,BarSurface,EffectiveDepth,NominalBarDiameter,BarCount){this.expressID=expressID,this.type=type,this.TotalCrossSectionArea=TotalCrossSectionArea,this.SteelGrade=SteelGrade,this.BarSurface=BarSurface,this.EffectiveDepth=EffectiveDepth,this.NominalBarDiameter=NominalBarDiameter,this.BarCount=BarCount}static FromTape(expressID,type,tape){let ptr=0,TotalCrossSectionArea=tape[ptr++],SteelGrade=tape[ptr++],BarSurface=tape[ptr++],EffectiveDepth=tape[ptr++],NominalBarDiameter=tape[ptr++],BarCount=tape[ptr++];return new IfcReinforcementBarProperties(expressID,type,TotalCrossSectionArea,SteelGrade,BarSurface,EffectiveDepth,NominalBarDiameter,BarCount)}ToTape(){let args=[];return args.push(this.TotalCrossSectionArea),args.push(this.SteelGrade),args.push(this.BarSurface),args.push(this.EffectiveDepth),args.push(this.NominalBarDiameter),args.push(this.BarCount),args}},IfcReinforcementDefinitionProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,DefinitionType,ReinforcementSectionDefinitions){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.DefinitionType=DefinitionType,this.ReinforcementSectionDefinitions=ReinforcementSectionDefinitions}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],DefinitionType=tape[ptr++],ReinforcementSectionDefinitions=tape[ptr++];return new IfcReinforcementDefinitionProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,DefinitionType,ReinforcementSectionDefinitions)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.DefinitionType),args.push(this.ReinforcementSectionDefinitions),args}},IfcReinforcingBar=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,NominalDiameter,CrossSectionArea,BarLength,PredefinedType,BarSurface){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.SteelGrade=SteelGrade,this.NominalDiameter=NominalDiameter,this.CrossSectionArea=CrossSectionArea,this.BarLength=BarLength,this.PredefinedType=PredefinedType,this.BarSurface=BarSurface}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],SteelGrade=tape[ptr++],NominalDiameter=tape[ptr++],CrossSectionArea=tape[ptr++],BarLength=tape[ptr++],PredefinedType=tape[ptr++],BarSurface=tape[ptr++];return new IfcReinforcingBar(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,NominalDiameter,CrossSectionArea,BarLength,PredefinedType,BarSurface)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.SteelGrade),args.push(this.NominalDiameter),args.push(this.CrossSectionArea),args.push(this.BarLength),args.push(this.PredefinedType),args.push(this.BarSurface),args}},IfcReinforcingBarType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,BarLength,BarSurface,BendingShapeCode,BendingParameters){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.NominalDiameter=NominalDiameter,this.CrossSectionArea=CrossSectionArea,this.BarLength=BarLength,this.BarSurface=BarSurface,this.BendingShapeCode=BendingShapeCode,this.BendingParameters=BendingParameters}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],NominalDiameter=tape[ptr++],CrossSectionArea=tape[ptr++],BarLength=tape[ptr++],BarSurface=tape[ptr++],BendingShapeCode=tape[ptr++],BendingParameters=tape[ptr++];return new IfcReinforcingBarType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,BarLength,BarSurface,BendingShapeCode,BendingParameters)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.NominalDiameter),args.push(this.CrossSectionArea),args.push(this.BarLength),args.push(this.BarSurface),args.push(this.BendingShapeCode),args.push(this.BendingParameters),args}},IfcReinforcingElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.SteelGrade=SteelGrade}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],SteelGrade=tape[ptr++];return new IfcReinforcingElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.SteelGrade),args}},IfcReinforcingElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcReinforcingElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcReinforcingMesh=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.SteelGrade=SteelGrade,this.MeshLength=MeshLength,this.MeshWidth=MeshWidth,this.LongitudinalBarNominalDiameter=LongitudinalBarNominalDiameter,this.TransverseBarNominalDiameter=TransverseBarNominalDiameter,this.LongitudinalBarCrossSectionArea=LongitudinalBarCrossSectionArea,this.TransverseBarCrossSectionArea=TransverseBarCrossSectionArea,this.LongitudinalBarSpacing=LongitudinalBarSpacing,this.TransverseBarSpacing=TransverseBarSpacing,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],SteelGrade=tape[ptr++],MeshLength=tape[ptr++],MeshWidth=tape[ptr++],LongitudinalBarNominalDiameter=tape[ptr++],TransverseBarNominalDiameter=tape[ptr++],LongitudinalBarCrossSectionArea=tape[ptr++],TransverseBarCrossSectionArea=tape[ptr++],LongitudinalBarSpacing=tape[ptr++],TransverseBarSpacing=tape[ptr++],PredefinedType=tape[ptr++];return new IfcReinforcingMesh(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.SteelGrade),args.push(this.MeshLength),args.push(this.MeshWidth),args.push(this.LongitudinalBarNominalDiameter),args.push(this.TransverseBarNominalDiameter),args.push(this.LongitudinalBarCrossSectionArea),args.push(this.TransverseBarCrossSectionArea),args.push(this.LongitudinalBarSpacing),args.push(this.TransverseBarSpacing),args.push(this.PredefinedType),args}},IfcReinforcingMeshType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,BendingShapeCode,BendingParameters){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.MeshLength=MeshLength,this.MeshWidth=MeshWidth,this.LongitudinalBarNominalDiameter=LongitudinalBarNominalDiameter,this.TransverseBarNominalDiameter=TransverseBarNominalDiameter,this.LongitudinalBarCrossSectionArea=LongitudinalBarCrossSectionArea,this.TransverseBarCrossSectionArea=TransverseBarCrossSectionArea,this.LongitudinalBarSpacing=LongitudinalBarSpacing,this.TransverseBarSpacing=TransverseBarSpacing,this.BendingShapeCode=BendingShapeCode,this.BendingParameters=BendingParameters}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],MeshLength=tape[ptr++],MeshWidth=tape[ptr++],LongitudinalBarNominalDiameter=tape[ptr++],TransverseBarNominalDiameter=tape[ptr++],LongitudinalBarCrossSectionArea=tape[ptr++],TransverseBarCrossSectionArea=tape[ptr++],LongitudinalBarSpacing=tape[ptr++],TransverseBarSpacing=tape[ptr++],BendingShapeCode=tape[ptr++],BendingParameters=tape[ptr++];return new IfcReinforcingMeshType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,BendingShapeCode,BendingParameters)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.MeshLength),args.push(this.MeshWidth),args.push(this.LongitudinalBarNominalDiameter),args.push(this.TransverseBarNominalDiameter),args.push(this.LongitudinalBarCrossSectionArea),args.push(this.TransverseBarCrossSectionArea),args.push(this.LongitudinalBarSpacing),args.push(this.TransverseBarSpacing),args.push(this.BendingShapeCode),args.push(this.BendingParameters),args}},IfcRelAggregates=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingObject=RelatingObject,this.RelatedObjects=RelatedObjects}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingObject=tape[ptr++],RelatedObjects=tape[ptr++];return new IfcRelAggregates(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingObject),args.push(this.RelatedObjects),args}},IfcRelAssigns=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++];return new IfcRelAssigns(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args}},IfcRelAssignsToActor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingActor,ActingRole){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType,this.RelatingActor=RelatingActor,this.ActingRole=ActingRole}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++],RelatingActor=tape[ptr++],ActingRole=tape[ptr++];return new IfcRelAssignsToActor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingActor,ActingRole)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args.push(this.RelatingActor),args.push(this.ActingRole),args}},IfcRelAssignsToControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingControl){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType,this.RelatingControl=RelatingControl}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++],RelatingControl=tape[ptr++];return new IfcRelAssignsToControl(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingControl)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args.push(this.RelatingControl),args}},IfcRelAssignsToGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType,this.RelatingGroup=RelatingGroup}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++],RelatingGroup=tape[ptr++];return new IfcRelAssignsToGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args.push(this.RelatingGroup),args}},IfcRelAssignsToGroupByFactor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup,Factor){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType,this.RelatingGroup=RelatingGroup,this.Factor=Factor}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++],RelatingGroup=tape[ptr++],Factor=tape[ptr++];return new IfcRelAssignsToGroupByFactor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup,Factor)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args.push(this.RelatingGroup),args.push(this.Factor),args}},IfcRelAssignsToProcess=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProcess,QuantityInProcess){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType,this.RelatingProcess=RelatingProcess,this.QuantityInProcess=QuantityInProcess}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++],RelatingProcess=tape[ptr++],QuantityInProcess=tape[ptr++];return new IfcRelAssignsToProcess(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProcess,QuantityInProcess)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args.push(this.RelatingProcess),args.push(this.QuantityInProcess),args}},IfcRelAssignsToProduct=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProduct){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType,this.RelatingProduct=RelatingProduct}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++],RelatingProduct=tape[ptr++];return new IfcRelAssignsToProduct(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProduct)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args.push(this.RelatingProduct),args}},IfcRelAssignsToResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingResource){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatedObjectsType=RelatedObjectsType,this.RelatingResource=RelatingResource}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatedObjectsType=tape[ptr++],RelatingResource=tape[ptr++];return new IfcRelAssignsToResource(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingResource)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatedObjectsType),args.push(this.RelatingResource),args}},IfcRelAssociates=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++];return new IfcRelAssociates(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args}},IfcRelAssociatesApproval=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingApproval){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingApproval=RelatingApproval}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingApproval=tape[ptr++];return new IfcRelAssociatesApproval(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingApproval)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingApproval),args}},IfcRelAssociatesClassification=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingClassification){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingClassification=RelatingClassification}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingClassification=tape[ptr++];return new IfcRelAssociatesClassification(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingClassification)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingClassification),args}},IfcRelAssociatesConstraint=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,Intent,RelatingConstraint){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.Intent=Intent,this.RelatingConstraint=RelatingConstraint}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],Intent=tape[ptr++],RelatingConstraint=tape[ptr++];return new IfcRelAssociatesConstraint(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,Intent,RelatingConstraint)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.Intent),args.push(this.RelatingConstraint),args}},IfcRelAssociatesDocument=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingDocument){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingDocument=RelatingDocument}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingDocument=tape[ptr++];return new IfcRelAssociatesDocument(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingDocument)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingDocument),args}},IfcRelAssociatesLibrary=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingLibrary){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingLibrary=RelatingLibrary}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingLibrary=tape[ptr++];return new IfcRelAssociatesLibrary(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingLibrary)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingLibrary),args}},IfcRelAssociatesMaterial=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingMaterial){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingMaterial=RelatingMaterial}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingMaterial=tape[ptr++];return new IfcRelAssociatesMaterial(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingMaterial)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingMaterial),args}},IfcRelConnects=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcRelConnects(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcRelConnectsElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ConnectionGeometry=ConnectionGeometry,this.RelatingElement=RelatingElement,this.RelatedElement=RelatedElement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ConnectionGeometry=tape[ptr++],RelatingElement=tape[ptr++],RelatedElement=tape[ptr++];return new IfcRelConnectsElements(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ConnectionGeometry),args.push(this.RelatingElement),args.push(this.RelatedElement),args}},IfcRelConnectsPathElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RelatingPriorities,RelatedPriorities,RelatedConnectionType,RelatingConnectionType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ConnectionGeometry=ConnectionGeometry,this.RelatingElement=RelatingElement,this.RelatedElement=RelatedElement,this.RelatingPriorities=RelatingPriorities,this.RelatedPriorities=RelatedPriorities,this.RelatedConnectionType=RelatedConnectionType,this.RelatingConnectionType=RelatingConnectionType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ConnectionGeometry=tape[ptr++],RelatingElement=tape[ptr++],RelatedElement=tape[ptr++],RelatingPriorities=tape[ptr++],RelatedPriorities=tape[ptr++],RelatedConnectionType=tape[ptr++],RelatingConnectionType=tape[ptr++];return new IfcRelConnectsPathElements(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RelatingPriorities,RelatedPriorities,RelatedConnectionType,RelatingConnectionType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ConnectionGeometry),args.push(this.RelatingElement),args.push(this.RelatedElement),args.push(this.RelatingPriorities),args.push(this.RelatedPriorities),args.push(this.RelatedConnectionType),args.push(this.RelatingConnectionType),args}},IfcRelConnectsPortToElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedElement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingPort=RelatingPort,this.RelatedElement=RelatedElement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingPort=tape[ptr++],RelatedElement=tape[ptr++];return new IfcRelConnectsPortToElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedElement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingPort),args.push(this.RelatedElement),args}},IfcRelConnectsPorts=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedPort,RealizingElement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingPort=RelatingPort,this.RelatedPort=RelatedPort,this.RealizingElement=RealizingElement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingPort=tape[ptr++],RelatedPort=tape[ptr++],RealizingElement=tape[ptr++];return new IfcRelConnectsPorts(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedPort,RealizingElement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingPort),args.push(this.RelatedPort),args.push(this.RealizingElement),args}},IfcRelConnectsStructuralActivity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedStructuralActivity){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingElement=RelatingElement,this.RelatedStructuralActivity=RelatedStructuralActivity}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingElement=tape[ptr++],RelatedStructuralActivity=tape[ptr++];return new IfcRelConnectsStructuralActivity(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedStructuralActivity)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingElement),args.push(this.RelatedStructuralActivity),args}},IfcRelConnectsStructuralMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingStructuralMember=RelatingStructuralMember,this.RelatedStructuralConnection=RelatedStructuralConnection,this.AppliedCondition=AppliedCondition,this.AdditionalConditions=AdditionalConditions,this.SupportedLength=SupportedLength,this.ConditionCoordinateSystem=ConditionCoordinateSystem}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingStructuralMember=tape[ptr++],RelatedStructuralConnection=tape[ptr++],AppliedCondition=tape[ptr++],AdditionalConditions=tape[ptr++],SupportedLength=tape[ptr++],ConditionCoordinateSystem=tape[ptr++];return new IfcRelConnectsStructuralMember(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingStructuralMember),args.push(this.RelatedStructuralConnection),args.push(this.AppliedCondition),args.push(this.AdditionalConditions),args.push(this.SupportedLength),args.push(this.ConditionCoordinateSystem),args}},IfcRelConnectsWithEccentricity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem,ConnectionConstraint){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingStructuralMember=RelatingStructuralMember,this.RelatedStructuralConnection=RelatedStructuralConnection,this.AppliedCondition=AppliedCondition,this.AdditionalConditions=AdditionalConditions,this.SupportedLength=SupportedLength,this.ConditionCoordinateSystem=ConditionCoordinateSystem,this.ConnectionConstraint=ConnectionConstraint}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingStructuralMember=tape[ptr++],RelatedStructuralConnection=tape[ptr++],AppliedCondition=tape[ptr++],AdditionalConditions=tape[ptr++],SupportedLength=tape[ptr++],ConditionCoordinateSystem=tape[ptr++],ConnectionConstraint=tape[ptr++];return new IfcRelConnectsWithEccentricity(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem,ConnectionConstraint)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingStructuralMember),args.push(this.RelatedStructuralConnection),args.push(this.AppliedCondition),args.push(this.AdditionalConditions),args.push(this.SupportedLength),args.push(this.ConditionCoordinateSystem),args.push(this.ConnectionConstraint),args}},IfcRelConnectsWithRealizingElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RealizingElements,ConnectionType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ConnectionGeometry=ConnectionGeometry,this.RelatingElement=RelatingElement,this.RelatedElement=RelatedElement,this.RealizingElements=RealizingElements,this.ConnectionType=ConnectionType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ConnectionGeometry=tape[ptr++],RelatingElement=tape[ptr++],RelatedElement=tape[ptr++],RealizingElements=tape[ptr++],ConnectionType=tape[ptr++];return new IfcRelConnectsWithRealizingElements(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RealizingElements,ConnectionType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ConnectionGeometry),args.push(this.RelatingElement),args.push(this.RelatedElement),args.push(this.RealizingElements),args.push(this.ConnectionType),args}},IfcRelContainedInSpatialStructure=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedElements=RelatedElements,this.RelatingStructure=RelatingStructure}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedElements=tape[ptr++],RelatingStructure=tape[ptr++];return new IfcRelContainedInSpatialStructure(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedElements),args.push(this.RelatingStructure),args}},IfcRelCoversBldgElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedCoverings){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingBuildingElement=RelatingBuildingElement,this.RelatedCoverings=RelatedCoverings}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingBuildingElement=tape[ptr++],RelatedCoverings=tape[ptr++];return new IfcRelCoversBldgElements(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedCoverings)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingBuildingElement),args.push(this.RelatedCoverings),args}},IfcRelCoversSpaces=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedCoverings){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingSpace=RelatingSpace,this.RelatedCoverings=RelatedCoverings}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingSpace=tape[ptr++],RelatedCoverings=tape[ptr++];return new IfcRelCoversSpaces(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedCoverings)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingSpace),args.push(this.RelatedCoverings),args}},IfcRelDeclares=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingContext,RelatedDefinitions){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingContext=RelatingContext,this.RelatedDefinitions=RelatedDefinitions}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingContext=tape[ptr++],RelatedDefinitions=tape[ptr++];return new IfcRelDeclares(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingContext,RelatedDefinitions)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingContext),args.push(this.RelatedDefinitions),args}},IfcRelDecomposes=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcRelDecomposes(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcRelDefines=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcRelDefines(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcRelDefinesByObject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingObject){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingObject=RelatingObject}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingObject=tape[ptr++];return new IfcRelDefinesByObject(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingObject)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingObject),args}},IfcRelDefinesByProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingPropertyDefinition){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingPropertyDefinition=RelatingPropertyDefinition}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingPropertyDefinition=tape[ptr++];return new IfcRelDefinesByProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingPropertyDefinition)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingPropertyDefinition),args}},IfcRelDefinesByTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedPropertySets,RelatingTemplate){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedPropertySets=RelatedPropertySets,this.RelatingTemplate=RelatingTemplate}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedPropertySets=tape[ptr++],RelatingTemplate=tape[ptr++];return new IfcRelDefinesByTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedPropertySets,RelatingTemplate)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedPropertySets),args.push(this.RelatingTemplate),args}},IfcRelDefinesByType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedObjects=RelatedObjects,this.RelatingType=RelatingType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedObjects=tape[ptr++],RelatingType=tape[ptr++];return new IfcRelDefinesByType(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedObjects),args.push(this.RelatingType),args}},IfcRelFillsElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingOpeningElement,RelatedBuildingElement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingOpeningElement=RelatingOpeningElement,this.RelatedBuildingElement=RelatedBuildingElement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingOpeningElement=tape[ptr++],RelatedBuildingElement=tape[ptr++];return new IfcRelFillsElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingOpeningElement,RelatedBuildingElement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingOpeningElement),args.push(this.RelatedBuildingElement),args}},IfcRelFlowControlElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedControlElements,RelatingFlowElement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedControlElements=RelatedControlElements,this.RelatingFlowElement=RelatingFlowElement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedControlElements=tape[ptr++],RelatingFlowElement=tape[ptr++];return new IfcRelFlowControlElements(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedControlElements,RelatingFlowElement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedControlElements),args.push(this.RelatingFlowElement),args}},IfcRelInterferesElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedElement,InterferenceGeometry,InterferenceType,ImpliedOrder){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingElement=RelatingElement,this.RelatedElement=RelatedElement,this.InterferenceGeometry=InterferenceGeometry,this.InterferenceType=InterferenceType,this.ImpliedOrder=ImpliedOrder}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingElement=tape[ptr++],RelatedElement=tape[ptr++],InterferenceGeometry=tape[ptr++],InterferenceType=tape[ptr++],ImpliedOrder=tape[ptr++];return new IfcRelInterferesElements(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedElement,InterferenceGeometry,InterferenceType,ImpliedOrder)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingElement),args.push(this.RelatedElement),args.push(this.InterferenceGeometry),args.push(this.InterferenceType),args.push(this.ImpliedOrder),args}},IfcRelNests=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingObject=RelatingObject,this.RelatedObjects=RelatedObjects}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingObject=tape[ptr++],RelatedObjects=tape[ptr++];return new IfcRelNests(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingObject),args.push(this.RelatedObjects),args}},IfcRelPositions=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPositioningElement,RelatedProducts){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingPositioningElement=RelatingPositioningElement,this.RelatedProducts=RelatedProducts}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingPositioningElement=tape[ptr++],RelatedProducts=tape[ptr++];return new IfcRelPositions(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPositioningElement,RelatedProducts)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingPositioningElement),args.push(this.RelatedProducts),args}},IfcRelProjectsElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedFeatureElement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingElement=RelatingElement,this.RelatedFeatureElement=RelatedFeatureElement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingElement=tape[ptr++],RelatedFeatureElement=tape[ptr++];return new IfcRelProjectsElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedFeatureElement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingElement),args.push(this.RelatedFeatureElement),args}},IfcRelReferencedInSpatialStructure=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatedElements=RelatedElements,this.RelatingStructure=RelatingStructure}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatedElements=tape[ptr++],RelatingStructure=tape[ptr++];return new IfcRelReferencedInSpatialStructure(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatedElements),args.push(this.RelatingStructure),args}},IfcRelSequence=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingProcess,RelatedProcess,TimeLag,SequenceType,UserDefinedSequenceType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingProcess=RelatingProcess,this.RelatedProcess=RelatedProcess,this.TimeLag=TimeLag,this.SequenceType=SequenceType,this.UserDefinedSequenceType=UserDefinedSequenceType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingProcess=tape[ptr++],RelatedProcess=tape[ptr++],TimeLag=tape[ptr++],SequenceType=tape[ptr++],UserDefinedSequenceType=tape[ptr++];return new IfcRelSequence(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingProcess,RelatedProcess,TimeLag,SequenceType,UserDefinedSequenceType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingProcess),args.push(this.RelatedProcess),args.push(this.TimeLag),args.push(this.SequenceType),args.push(this.UserDefinedSequenceType),args}},IfcRelServicesBuildings=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSystem,RelatedBuildings){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingSystem=RelatingSystem,this.RelatedBuildings=RelatedBuildings}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingSystem=tape[ptr++],RelatedBuildings=tape[ptr++];return new IfcRelServicesBuildings(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSystem,RelatedBuildings)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingSystem),args.push(this.RelatedBuildings),args}},IfcRelSpaceBoundary=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingSpace=RelatingSpace,this.RelatedBuildingElement=RelatedBuildingElement,this.ConnectionGeometry=ConnectionGeometry,this.PhysicalOrVirtualBoundary=PhysicalOrVirtualBoundary,this.InternalOrExternalBoundary=InternalOrExternalBoundary}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingSpace=tape[ptr++],RelatedBuildingElement=tape[ptr++],ConnectionGeometry=tape[ptr++],PhysicalOrVirtualBoundary=tape[ptr++],InternalOrExternalBoundary=tape[ptr++];return new IfcRelSpaceBoundary(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingSpace),args.push(this.RelatedBuildingElement),args.push(this.ConnectionGeometry),args.push(this.PhysicalOrVirtualBoundary),args.push(this.InternalOrExternalBoundary),args}},IfcRelSpaceBoundary1stLevel=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingSpace=RelatingSpace,this.RelatedBuildingElement=RelatedBuildingElement,this.ConnectionGeometry=ConnectionGeometry,this.PhysicalOrVirtualBoundary=PhysicalOrVirtualBoundary,this.InternalOrExternalBoundary=InternalOrExternalBoundary,this.ParentBoundary=ParentBoundary}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingSpace=tape[ptr++],RelatedBuildingElement=tape[ptr++],ConnectionGeometry=tape[ptr++],PhysicalOrVirtualBoundary=tape[ptr++],InternalOrExternalBoundary=tape[ptr++],ParentBoundary=tape[ptr++];return new IfcRelSpaceBoundary1stLevel(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingSpace),args.push(this.RelatedBuildingElement),args.push(this.ConnectionGeometry),args.push(this.PhysicalOrVirtualBoundary),args.push(this.InternalOrExternalBoundary),args.push(this.ParentBoundary),args}},IfcRelSpaceBoundary2ndLevel=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary,CorrespondingBoundary){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingSpace=RelatingSpace,this.RelatedBuildingElement=RelatedBuildingElement,this.ConnectionGeometry=ConnectionGeometry,this.PhysicalOrVirtualBoundary=PhysicalOrVirtualBoundary,this.InternalOrExternalBoundary=InternalOrExternalBoundary,this.ParentBoundary=ParentBoundary,this.CorrespondingBoundary=CorrespondingBoundary}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingSpace=tape[ptr++],RelatedBuildingElement=tape[ptr++],ConnectionGeometry=tape[ptr++],PhysicalOrVirtualBoundary=tape[ptr++],InternalOrExternalBoundary=tape[ptr++],ParentBoundary=tape[ptr++],CorrespondingBoundary=tape[ptr++];return new IfcRelSpaceBoundary2ndLevel(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary,CorrespondingBoundary)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingSpace),args.push(this.RelatedBuildingElement),args.push(this.ConnectionGeometry),args.push(this.PhysicalOrVirtualBoundary),args.push(this.InternalOrExternalBoundary),args.push(this.ParentBoundary),args.push(this.CorrespondingBoundary),args}},IfcRelVoidsElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedOpeningElement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.RelatingBuildingElement=RelatingBuildingElement,this.RelatedOpeningElement=RelatedOpeningElement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],RelatingBuildingElement=tape[ptr++],RelatedOpeningElement=tape[ptr++];return new IfcRelVoidsElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedOpeningElement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.RelatingBuildingElement),args.push(this.RelatedOpeningElement),args}},IfcRelationship=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcRelationship(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcReparametrisedCompositeCurveSegment=class{constructor(expressID,type,Transition,SameSense,ParentCurve,ParamLength){this.expressID=expressID,this.type=type,this.Transition=Transition,this.SameSense=SameSense,this.ParentCurve=ParentCurve,this.ParamLength=ParamLength}static FromTape(expressID,type,tape){let ptr=0,Transition=tape[ptr++],SameSense=tape[ptr++],ParentCurve=tape[ptr++],ParamLength=tape[ptr++];return new IfcReparametrisedCompositeCurveSegment(expressID,type,Transition,SameSense,ParentCurve,ParamLength)}ToTape(){let args=[];return args.push(this.Transition),args.push(this.SameSense),args.push(this.ParentCurve),args.push(this.ParamLength),args}},IfcRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID,this.type=type,this.ContextOfItems=ContextOfItems,this.RepresentationIdentifier=RepresentationIdentifier,this.RepresentationType=RepresentationType,this.Items=Items}static FromTape(expressID,type,tape){let ptr=0,ContextOfItems=tape[ptr++],RepresentationIdentifier=tape[ptr++],RepresentationType=tape[ptr++],Items=tape[ptr++];return new IfcRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items)}ToTape(){let args=[];return args.push(this.ContextOfItems),args.push(this.RepresentationIdentifier),args.push(this.RepresentationType),args.push(this.Items),args}},IfcRepresentationContext=class{constructor(expressID,type,ContextIdentifier,ContextType){this.expressID=expressID,this.type=type,this.ContextIdentifier=ContextIdentifier,this.ContextType=ContextType}static FromTape(expressID,type,tape){let ptr=0,ContextIdentifier=tape[ptr++],ContextType=tape[ptr++];return new IfcRepresentationContext(expressID,type,ContextIdentifier,ContextType)}ToTape(){let args=[];return args.push(this.ContextIdentifier),args.push(this.ContextType),args}},IfcRepresentationItem=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcRepresentationItem(expressID,type)}ToTape(){return[]}},IfcRepresentationMap=class{constructor(expressID,type,MappingOrigin,MappedRepresentation){this.expressID=expressID,this.type=type,this.MappingOrigin=MappingOrigin,this.MappedRepresentation=MappedRepresentation}static FromTape(expressID,type,tape){let ptr=0,MappingOrigin=tape[ptr++],MappedRepresentation=tape[ptr++];return new IfcRepresentationMap(expressID,type,MappingOrigin,MappedRepresentation)}ToTape(){let args=[];return args.push(this.MappingOrigin),args.push(this.MappedRepresentation),args}},IfcResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++];return new IfcResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args}},IfcResourceApprovalRelationship=class{constructor(expressID,type,Name,Description,RelatedResourceObjects,RelatingApproval){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatedResourceObjects=RelatedResourceObjects,this.RelatingApproval=RelatingApproval}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatedResourceObjects=tape[ptr++],RelatingApproval=tape[ptr++];return new IfcResourceApprovalRelationship(expressID,type,Name,Description,RelatedResourceObjects,RelatingApproval)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatedResourceObjects),args.push(this.RelatingApproval),args}},IfcResourceConstraintRelationship=class{constructor(expressID,type,Name,Description,RelatingConstraint,RelatedResourceObjects){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.RelatingConstraint=RelatingConstraint,this.RelatedResourceObjects=RelatedResourceObjects}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],RelatingConstraint=tape[ptr++],RelatedResourceObjects=tape[ptr++];return new IfcResourceConstraintRelationship(expressID,type,Name,Description,RelatingConstraint,RelatedResourceObjects)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.RelatingConstraint),args.push(this.RelatedResourceObjects),args}},IfcResourceLevelRelationship=class{constructor(expressID,type,Name,Description){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++];return new IfcResourceLevelRelationship(expressID,type,Name,Description)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args}},IfcResourceTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ScheduleWork,ScheduleUsage,ScheduleStart,ScheduleFinish,ScheduleContour,LevelingDelay,IsOverAllocated,StatusTime,ActualWork,ActualUsage,ActualStart,ActualFinish,RemainingWork,RemainingUsage,Completion){this.expressID=expressID,this.type=type,this.Name=Name,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.ScheduleWork=ScheduleWork,this.ScheduleUsage=ScheduleUsage,this.ScheduleStart=ScheduleStart,this.ScheduleFinish=ScheduleFinish,this.ScheduleContour=ScheduleContour,this.LevelingDelay=LevelingDelay,this.IsOverAllocated=IsOverAllocated,this.StatusTime=StatusTime,this.ActualWork=ActualWork,this.ActualUsage=ActualUsage,this.ActualStart=ActualStart,this.ActualFinish=ActualFinish,this.RemainingWork=RemainingWork,this.RemainingUsage=RemainingUsage,this.Completion=Completion}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],ScheduleWork=tape[ptr++],ScheduleUsage=tape[ptr++],ScheduleStart=tape[ptr++],ScheduleFinish=tape[ptr++],ScheduleContour=tape[ptr++],LevelingDelay=tape[ptr++],IsOverAllocated=tape[ptr++],StatusTime=tape[ptr++],ActualWork=tape[ptr++],ActualUsage=tape[ptr++],ActualStart=tape[ptr++],ActualFinish=tape[ptr++],RemainingWork=tape[ptr++],RemainingUsage=tape[ptr++],Completion=tape[ptr++];return new IfcResourceTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ScheduleWork,ScheduleUsage,ScheduleStart,ScheduleFinish,ScheduleContour,LevelingDelay,IsOverAllocated,StatusTime,ActualWork,ActualUsage,ActualStart,ActualFinish,RemainingWork,RemainingUsage,Completion)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.ScheduleWork),args.push(this.ScheduleUsage),args.push(this.ScheduleStart),args.push(this.ScheduleFinish),args.push(this.ScheduleContour),args.push(this.LevelingDelay),args.push(this.IsOverAllocated),args.push(this.StatusTime),args.push(this.ActualWork),args.push(this.ActualUsage),args.push(this.ActualStart),args.push(this.ActualFinish),args.push(this.RemainingWork),args.push(this.RemainingUsage),args.push(this.Completion),args}},IfcRevolvedAreaSolid=class{constructor(expressID,type,SweptArea,Position,Axis,Angle){this.expressID=expressID,this.type=type,this.SweptArea=SweptArea,this.Position=Position,this.Axis=Axis,this.Angle=Angle}static FromTape(expressID,type,tape){let ptr=0,SweptArea=tape[ptr++],Position=tape[ptr++],Axis=tape[ptr++],Angle=tape[ptr++];return new IfcRevolvedAreaSolid(expressID,type,SweptArea,Position,Axis,Angle)}ToTape(){let args=[];return args.push(this.SweptArea),args.push(this.Position),args.push(this.Axis),args.push(this.Angle),args}},IfcRevolvedAreaSolidTapered=class{constructor(expressID,type,SweptArea,Position,Axis,Angle,EndSweptArea){this.expressID=expressID,this.type=type,this.SweptArea=SweptArea,this.Position=Position,this.Axis=Axis,this.Angle=Angle,this.EndSweptArea=EndSweptArea}static FromTape(expressID,type,tape){let ptr=0,SweptArea=tape[ptr++],Position=tape[ptr++],Axis=tape[ptr++],Angle=tape[ptr++],EndSweptArea=tape[ptr++];return new IfcRevolvedAreaSolidTapered(expressID,type,SweptArea,Position,Axis,Angle,EndSweptArea)}ToTape(){let args=[];return args.push(this.SweptArea),args.push(this.Position),args.push(this.Axis),args.push(this.Angle),args.push(this.EndSweptArea),args}},IfcRightCircularCone=class{constructor(expressID,type,Position,Height,BottomRadius){this.expressID=expressID,this.type=type,this.Position=Position,this.Height=Height,this.BottomRadius=BottomRadius}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],Height=tape[ptr++],BottomRadius=tape[ptr++];return new IfcRightCircularCone(expressID,type,Position,Height,BottomRadius)}ToTape(){let args=[];return args.push(this.Position),args.push(this.Height),args.push(this.BottomRadius),args}},IfcRightCircularCylinder=class{constructor(expressID,type,Position,Height,Radius){this.expressID=expressID,this.type=type,this.Position=Position,this.Height=Height,this.Radius=Radius}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],Height=tape[ptr++],Radius=tape[ptr++];return new IfcRightCircularCylinder(expressID,type,Position,Height,Radius)}ToTape(){let args=[];return args.push(this.Position),args.push(this.Height),args.push(this.Radius),args}},IfcRoof=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRoof(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcRoofType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcRoofType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcRoot=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++];return new IfcRoot(expressID,type,GlobalId,OwnerHistory,Name,Description)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args}},IfcRoundedRectangleProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,RoundingRadius){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.XDim=XDim,this.YDim=YDim,this.RoundingRadius=RoundingRadius}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],XDim=tape[ptr++],YDim=tape[ptr++],RoundingRadius=tape[ptr++];return new IfcRoundedRectangleProfileDef(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,RoundingRadius)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.XDim),args.push(this.YDim),args.push(this.RoundingRadius),args}},IfcSIUnit=class{constructor(expressID,type,Dimensions,UnitType,Prefix,Name){this.expressID=expressID,this.type=type,this.Dimensions=Dimensions,this.UnitType=UnitType,this.Prefix=Prefix,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Dimensions=tape[ptr++],UnitType=tape[ptr++],Prefix=tape[ptr++],Name=tape[ptr++];return new IfcSIUnit(expressID,type,Dimensions,UnitType,Prefix,Name)}ToTape(){let args=[];return args.push(this.Dimensions),args.push(this.UnitType),args.push(this.Prefix),args.push(this.Name),args}},IfcSanitaryTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSanitaryTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSanitaryTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSanitaryTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcSchedulingTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin){this.expressID=expressID,this.type=type,this.Name=Name,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++];return new IfcSchedulingTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args}},IfcSeamCurve=class{constructor(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation){this.expressID=expressID,this.type=type,this.Curve3D=Curve3D,this.AssociatedGeometry=AssociatedGeometry,this.MasterRepresentation=MasterRepresentation}static FromTape(expressID,type,tape){let ptr=0,Curve3D=tape[ptr++],AssociatedGeometry=tape[ptr++],MasterRepresentation=tape[ptr++];return new IfcSeamCurve(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation)}ToTape(){let args=[];return args.push(this.Curve3D),args.push(this.AssociatedGeometry),args.push(this.MasterRepresentation),args}},IfcSectionProperties=class{constructor(expressID,type,SectionType,StartProfile,EndProfile){this.expressID=expressID,this.type=type,this.SectionType=SectionType,this.StartProfile=StartProfile,this.EndProfile=EndProfile}static FromTape(expressID,type,tape){let ptr=0,SectionType=tape[ptr++],StartProfile=tape[ptr++],EndProfile=tape[ptr++];return new IfcSectionProperties(expressID,type,SectionType,StartProfile,EndProfile)}ToTape(){let args=[];return args.push(this.SectionType),args.push(this.StartProfile),args.push(this.EndProfile),args}},IfcSectionReinforcementProperties=class{constructor(expressID,type,LongitudinalStartPosition,LongitudinalEndPosition,TransversePosition,ReinforcementRole,SectionDefinition,CrossSectionReinforcementDefinitions){this.expressID=expressID,this.type=type,this.LongitudinalStartPosition=LongitudinalStartPosition,this.LongitudinalEndPosition=LongitudinalEndPosition,this.TransversePosition=TransversePosition,this.ReinforcementRole=ReinforcementRole,this.SectionDefinition=SectionDefinition,this.CrossSectionReinforcementDefinitions=CrossSectionReinforcementDefinitions}static FromTape(expressID,type,tape){let ptr=0,LongitudinalStartPosition=tape[ptr++],LongitudinalEndPosition=tape[ptr++],TransversePosition=tape[ptr++],ReinforcementRole=tape[ptr++],SectionDefinition=tape[ptr++],CrossSectionReinforcementDefinitions=tape[ptr++];return new IfcSectionReinforcementProperties(expressID,type,LongitudinalStartPosition,LongitudinalEndPosition,TransversePosition,ReinforcementRole,SectionDefinition,CrossSectionReinforcementDefinitions)}ToTape(){let args=[];return args.push(this.LongitudinalStartPosition),args.push(this.LongitudinalEndPosition),args.push(this.TransversePosition),args.push(this.ReinforcementRole),args.push(this.SectionDefinition),args.push(this.CrossSectionReinforcementDefinitions),args}},IfcSectionedSolid=class{constructor(expressID,type,Directrix,CrossSections){this.expressID=expressID,this.type=type,this.Directrix=Directrix,this.CrossSections=CrossSections}static FromTape(expressID,type,tape){let ptr=0,Directrix=tape[ptr++],CrossSections=tape[ptr++];return new IfcSectionedSolid(expressID,type,Directrix,CrossSections)}ToTape(){let args=[];return args.push(this.Directrix),args.push(this.CrossSections),args}},IfcSectionedSolidHorizontal=class{constructor(expressID,type,Directrix,CrossSections,CrossSectionPositions,FixedAxisVertical){this.expressID=expressID,this.type=type,this.Directrix=Directrix,this.CrossSections=CrossSections,this.CrossSectionPositions=CrossSectionPositions,this.FixedAxisVertical=FixedAxisVertical}static FromTape(expressID,type,tape){let ptr=0,Directrix=tape[ptr++],CrossSections=tape[ptr++],CrossSectionPositions=tape[ptr++],FixedAxisVertical=tape[ptr++];return new IfcSectionedSolidHorizontal(expressID,type,Directrix,CrossSections,CrossSectionPositions,FixedAxisVertical)}ToTape(){let args=[];return args.push(this.Directrix),args.push(this.CrossSections),args.push(this.CrossSectionPositions),args.push(this.FixedAxisVertical),args}},IfcSectionedSpine=class{constructor(expressID,type,SpineCurve,CrossSections,CrossSectionPositions){this.expressID=expressID,this.type=type,this.SpineCurve=SpineCurve,this.CrossSections=CrossSections,this.CrossSectionPositions=CrossSectionPositions}static FromTape(expressID,type,tape){let ptr=0,SpineCurve=tape[ptr++],CrossSections=tape[ptr++],CrossSectionPositions=tape[ptr++];return new IfcSectionedSpine(expressID,type,SpineCurve,CrossSections,CrossSectionPositions)}ToTape(){let args=[];return args.push(this.SpineCurve),args.push(this.CrossSections),args.push(this.CrossSectionPositions),args}},IfcSensor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSensor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSensorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSensorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcShadingDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcShadingDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcShadingDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcShadingDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcShapeAspect=class{constructor(expressID,type,ShapeRepresentations,Name,Description,ProductDefinitional,PartOfProductDefinitionShape){this.expressID=expressID,this.type=type,this.ShapeRepresentations=ShapeRepresentations,this.Name=Name,this.Description=Description,this.ProductDefinitional=ProductDefinitional,this.PartOfProductDefinitionShape=PartOfProductDefinitionShape}static FromTape(expressID,type,tape){let ptr=0,ShapeRepresentations=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ProductDefinitional=tape[ptr++],PartOfProductDefinitionShape=tape[ptr++];return new IfcShapeAspect(expressID,type,ShapeRepresentations,Name,Description,ProductDefinitional,PartOfProductDefinitionShape)}ToTape(){let args=[];return args.push(this.ShapeRepresentations),args.push(this.Name),args.push(this.Description),args.push(this.ProductDefinitional),args.push(this.PartOfProductDefinitionShape),args}},IfcShapeModel=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID,this.type=type,this.ContextOfItems=ContextOfItems,this.RepresentationIdentifier=RepresentationIdentifier,this.RepresentationType=RepresentationType,this.Items=Items}static FromTape(expressID,type,tape){let ptr=0,ContextOfItems=tape[ptr++],RepresentationIdentifier=tape[ptr++],RepresentationType=tape[ptr++],Items=tape[ptr++];return new IfcShapeModel(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items)}ToTape(){let args=[];return args.push(this.ContextOfItems),args.push(this.RepresentationIdentifier),args.push(this.RepresentationType),args.push(this.Items),args}},IfcShapeRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID,this.type=type,this.ContextOfItems=ContextOfItems,this.RepresentationIdentifier=RepresentationIdentifier,this.RepresentationType=RepresentationType,this.Items=Items}static FromTape(expressID,type,tape){let ptr=0,ContextOfItems=tape[ptr++],RepresentationIdentifier=tape[ptr++],RepresentationType=tape[ptr++],Items=tape[ptr++];return new IfcShapeRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items)}ToTape(){let args=[];return args.push(this.ContextOfItems),args.push(this.RepresentationIdentifier),args.push(this.RepresentationType),args.push(this.Items),args}},IfcShellBasedSurfaceModel=class{constructor(expressID,type,SbsmBoundary){this.expressID=expressID,this.type=type,this.SbsmBoundary=SbsmBoundary}static FromTape(expressID,type,tape){let ptr=0,SbsmBoundary=tape[ptr++];return new IfcShellBasedSurfaceModel(expressID,type,SbsmBoundary)}ToTape(){let args=[];return args.push(this.SbsmBoundary),args}},IfcSimpleProperty=class{constructor(expressID,type,Name,Description){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++];return new IfcSimpleProperty(expressID,type,Name,Description)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args}},IfcSimplePropertyTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,PrimaryMeasureType,SecondaryMeasureType,Enumerators,PrimaryUnit,SecondaryUnit,Expression,AccessState){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.TemplateType=TemplateType,this.PrimaryMeasureType=PrimaryMeasureType,this.SecondaryMeasureType=SecondaryMeasureType,this.Enumerators=Enumerators,this.PrimaryUnit=PrimaryUnit,this.SecondaryUnit=SecondaryUnit,this.Expression=Expression,this.AccessState=AccessState}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],TemplateType=tape[ptr++],PrimaryMeasureType=tape[ptr++],SecondaryMeasureType=tape[ptr++],Enumerators=tape[ptr++],PrimaryUnit=tape[ptr++],SecondaryUnit=tape[ptr++],Expression=tape[ptr++],AccessState=tape[ptr++];return new IfcSimplePropertyTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,PrimaryMeasureType,SecondaryMeasureType,Enumerators,PrimaryUnit,SecondaryUnit,Expression,AccessState)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.TemplateType),args.push(this.PrimaryMeasureType),args.push(this.SecondaryMeasureType),args.push(this.Enumerators),args.push(this.PrimaryUnit),args.push(this.SecondaryUnit),args.push(this.Expression),args.push(this.AccessState),args}},IfcSite=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,RefLatitude,RefLongitude,RefElevation,LandTitleNumber,SiteAddress){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType,this.RefLatitude=RefLatitude,this.RefLongitude=RefLongitude,this.RefElevation=RefElevation,this.LandTitleNumber=LandTitleNumber,this.SiteAddress=SiteAddress}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++],RefLatitude=tape[ptr++],RefLongitude=tape[ptr++],RefElevation=tape[ptr++],LandTitleNumber=tape[ptr++],SiteAddress=tape[ptr++];return new IfcSite(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,RefLatitude,RefLongitude,RefElevation,LandTitleNumber,SiteAddress)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args.push(this.RefLatitude),args.push(this.RefLongitude),args.push(this.RefElevation),args.push(this.LandTitleNumber),args.push(this.SiteAddress),args}},IfcSlab=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSlab(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSlabElementedCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSlabElementedCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSlabStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSlabStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSlabType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSlabType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcSlippageConnectionCondition=class{constructor(expressID,type,Name,SlippageX,SlippageY,SlippageZ){this.expressID=expressID,this.type=type,this.Name=Name,this.SlippageX=SlippageX,this.SlippageY=SlippageY,this.SlippageZ=SlippageZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],SlippageX=tape[ptr++],SlippageY=tape[ptr++],SlippageZ=tape[ptr++];return new IfcSlippageConnectionCondition(expressID,type,Name,SlippageX,SlippageY,SlippageZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.SlippageX),args.push(this.SlippageY),args.push(this.SlippageZ),args}},IfcSolarDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSolarDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSolarDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSolarDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcSolidModel=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcSolidModel(expressID,type)}ToTape(){return[]}},IfcSpace=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType,ElevationWithFlooring){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType,this.PredefinedType=PredefinedType,this.ElevationWithFlooring=ElevationWithFlooring}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++],PredefinedType=tape[ptr++],ElevationWithFlooring=tape[ptr++];return new IfcSpace(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType,ElevationWithFlooring)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args.push(this.PredefinedType),args.push(this.ElevationWithFlooring),args}},IfcSpaceHeater=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSpaceHeater(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSpaceHeaterType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSpaceHeaterType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcSpaceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.LongName=LongName}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],LongName=tape[ptr++];return new IfcSpaceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.LongName),args}},IfcSpatialElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++];return new IfcSpatialElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args}},IfcSpatialElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcSpatialElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcSpatialStructureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.CompositionType=CompositionType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],CompositionType=tape[ptr++];return new IfcSpatialStructureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.CompositionType),args}},IfcSpatialStructureElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++];return new IfcSpatialStructureElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args}},IfcSpatialZone=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.LongName=LongName,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],LongName=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSpatialZone(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.LongName),args.push(this.PredefinedType),args}},IfcSpatialZoneType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.LongName=LongName}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],LongName=tape[ptr++];return new IfcSpatialZoneType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.LongName),args}},IfcSphere=class{constructor(expressID,type,Position,Radius){this.expressID=expressID,this.type=type,this.Position=Position,this.Radius=Radius}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],Radius=tape[ptr++];return new IfcSphere(expressID,type,Position,Radius)}ToTape(){let args=[];return args.push(this.Position),args.push(this.Radius),args}},IfcSphericalSurface=class{constructor(expressID,type,Position,Radius){this.expressID=expressID,this.type=type,this.Position=Position,this.Radius=Radius}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],Radius=tape[ptr++];return new IfcSphericalSurface(expressID,type,Position,Radius)}ToTape(){let args=[];return args.push(this.Position),args.push(this.Radius),args}},IfcStackTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStackTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcStackTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStackTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcStair=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStair(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcStairFlight=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NumberOfRisers,NumberOfTreads,RiserHeight,TreadLength,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.NumberOfRisers=NumberOfRisers,this.NumberOfTreads=NumberOfTreads,this.RiserHeight=RiserHeight,this.TreadLength=TreadLength,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],NumberOfRisers=tape[ptr++],NumberOfTreads=tape[ptr++],RiserHeight=tape[ptr++],TreadLength=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStairFlight(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NumberOfRisers,NumberOfTreads,RiserHeight,TreadLength,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.NumberOfRisers),args.push(this.NumberOfTreads),args.push(this.RiserHeight),args.push(this.TreadLength),args.push(this.PredefinedType),args}},IfcStairFlightType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStairFlightType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcStairType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStairType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcStructuralAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.DestabilizingLoad=DestabilizingLoad}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],DestabilizingLoad=tape[ptr++];return new IfcStructuralAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.DestabilizingLoad),args}},IfcStructuralActivity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++];return new IfcStructuralActivity(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args}},IfcStructuralAnalysisModel=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,OrientationOf2DPlane,LoadedBy,HasResults,SharedPlacement){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.PredefinedType=PredefinedType,this.OrientationOf2DPlane=OrientationOf2DPlane,this.LoadedBy=LoadedBy,this.HasResults=HasResults,this.SharedPlacement=SharedPlacement}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],PredefinedType=tape[ptr++],OrientationOf2DPlane=tape[ptr++],LoadedBy=tape[ptr++],HasResults=tape[ptr++],SharedPlacement=tape[ptr++];return new IfcStructuralAnalysisModel(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,OrientationOf2DPlane,LoadedBy,HasResults,SharedPlacement)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.PredefinedType),args.push(this.OrientationOf2DPlane),args.push(this.LoadedBy),args.push(this.HasResults),args.push(this.SharedPlacement),args}},IfcStructuralConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedCondition=AppliedCondition}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedCondition=tape[ptr++];return new IfcStructuralConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedCondition),args}},IfcStructuralConnectionCondition=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcStructuralConnectionCondition(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcStructuralCurveAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.DestabilizingLoad=DestabilizingLoad,this.ProjectedOrTrue=ProjectedOrTrue,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],DestabilizingLoad=tape[ptr++],ProjectedOrTrue=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStructuralCurveAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.DestabilizingLoad),args.push(this.ProjectedOrTrue),args.push(this.PredefinedType),args}},IfcStructuralCurveConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,Axis){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedCondition=AppliedCondition,this.Axis=Axis}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedCondition=tape[ptr++],Axis=tape[ptr++];return new IfcStructuralCurveConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,Axis)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedCondition),args.push(this.Axis),args}},IfcStructuralCurveMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.PredefinedType=PredefinedType,this.Axis=Axis}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],PredefinedType=tape[ptr++],Axis=tape[ptr++];return new IfcStructuralCurveMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.PredefinedType),args.push(this.Axis),args}},IfcStructuralCurveMemberVarying=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.PredefinedType=PredefinedType,this.Axis=Axis}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],PredefinedType=tape[ptr++],Axis=tape[ptr++];return new IfcStructuralCurveMemberVarying(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.PredefinedType),args.push(this.Axis),args}},IfcStructuralCurveReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStructuralCurveReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.PredefinedType),args}},IfcStructuralItem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++];return new IfcStructuralItem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args}},IfcStructuralLinearAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.DestabilizingLoad=DestabilizingLoad,this.ProjectedOrTrue=ProjectedOrTrue,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],DestabilizingLoad=tape[ptr++],ProjectedOrTrue=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStructuralLinearAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.DestabilizingLoad),args.push(this.ProjectedOrTrue),args.push(this.PredefinedType),args}},IfcStructuralLoad=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcStructuralLoad(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcStructuralLoadCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose,SelfWeightCoefficients){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.PredefinedType=PredefinedType,this.ActionType=ActionType,this.ActionSource=ActionSource,this.Coefficient=Coefficient,this.Purpose=Purpose,this.SelfWeightCoefficients=SelfWeightCoefficients}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],PredefinedType=tape[ptr++],ActionType=tape[ptr++],ActionSource=tape[ptr++],Coefficient=tape[ptr++],Purpose=tape[ptr++],SelfWeightCoefficients=tape[ptr++];return new IfcStructuralLoadCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose,SelfWeightCoefficients)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.PredefinedType),args.push(this.ActionType),args.push(this.ActionSource),args.push(this.Coefficient),args.push(this.Purpose),args.push(this.SelfWeightCoefficients),args}},IfcStructuralLoadConfiguration=class{constructor(expressID,type,Name,Values,Locations){this.expressID=expressID,this.type=type,this.Name=Name,this.Values=Values,this.Locations=Locations}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Values=tape[ptr++],Locations=tape[ptr++];return new IfcStructuralLoadConfiguration(expressID,type,Name,Values,Locations)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Values),args.push(this.Locations),args}},IfcStructuralLoadGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.PredefinedType=PredefinedType,this.ActionType=ActionType,this.ActionSource=ActionSource,this.Coefficient=Coefficient,this.Purpose=Purpose}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],PredefinedType=tape[ptr++],ActionType=tape[ptr++],ActionSource=tape[ptr++],Coefficient=tape[ptr++],Purpose=tape[ptr++];return new IfcStructuralLoadGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.PredefinedType),args.push(this.ActionType),args.push(this.ActionSource),args.push(this.Coefficient),args.push(this.Purpose),args}},IfcStructuralLoadLinearForce=class{constructor(expressID,type,Name,LinearForceX,LinearForceY,LinearForceZ,LinearMomentX,LinearMomentY,LinearMomentZ){this.expressID=expressID,this.type=type,this.Name=Name,this.LinearForceX=LinearForceX,this.LinearForceY=LinearForceY,this.LinearForceZ=LinearForceZ,this.LinearMomentX=LinearMomentX,this.LinearMomentY=LinearMomentY,this.LinearMomentZ=LinearMomentZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],LinearForceX=tape[ptr++],LinearForceY=tape[ptr++],LinearForceZ=tape[ptr++],LinearMomentX=tape[ptr++],LinearMomentY=tape[ptr++],LinearMomentZ=tape[ptr++];return new IfcStructuralLoadLinearForce(expressID,type,Name,LinearForceX,LinearForceY,LinearForceZ,LinearMomentX,LinearMomentY,LinearMomentZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.LinearForceX),args.push(this.LinearForceY),args.push(this.LinearForceZ),args.push(this.LinearMomentX),args.push(this.LinearMomentY),args.push(this.LinearMomentZ),args}},IfcStructuralLoadOrResult=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcStructuralLoadOrResult(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcStructuralLoadPlanarForce=class{constructor(expressID,type,Name,PlanarForceX,PlanarForceY,PlanarForceZ){this.expressID=expressID,this.type=type,this.Name=Name,this.PlanarForceX=PlanarForceX,this.PlanarForceY=PlanarForceY,this.PlanarForceZ=PlanarForceZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],PlanarForceX=tape[ptr++],PlanarForceY=tape[ptr++],PlanarForceZ=tape[ptr++];return new IfcStructuralLoadPlanarForce(expressID,type,Name,PlanarForceX,PlanarForceY,PlanarForceZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.PlanarForceX),args.push(this.PlanarForceY),args.push(this.PlanarForceZ),args}},IfcStructuralLoadSingleDisplacement=class{constructor(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ){this.expressID=expressID,this.type=type,this.Name=Name,this.DisplacementX=DisplacementX,this.DisplacementY=DisplacementY,this.DisplacementZ=DisplacementZ,this.RotationalDisplacementRX=RotationalDisplacementRX,this.RotationalDisplacementRY=RotationalDisplacementRY,this.RotationalDisplacementRZ=RotationalDisplacementRZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DisplacementX=tape[ptr++],DisplacementY=tape[ptr++],DisplacementZ=tape[ptr++],RotationalDisplacementRX=tape[ptr++],RotationalDisplacementRY=tape[ptr++],RotationalDisplacementRZ=tape[ptr++];return new IfcStructuralLoadSingleDisplacement(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DisplacementX),args.push(this.DisplacementY),args.push(this.DisplacementZ),args.push(this.RotationalDisplacementRX),args.push(this.RotationalDisplacementRY),args.push(this.RotationalDisplacementRZ),args}},IfcStructuralLoadSingleDisplacementDistortion=class{constructor(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ,Distortion){this.expressID=expressID,this.type=type,this.Name=Name,this.DisplacementX=DisplacementX,this.DisplacementY=DisplacementY,this.DisplacementZ=DisplacementZ,this.RotationalDisplacementRX=RotationalDisplacementRX,this.RotationalDisplacementRY=RotationalDisplacementRY,this.RotationalDisplacementRZ=RotationalDisplacementRZ,this.Distortion=Distortion}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DisplacementX=tape[ptr++],DisplacementY=tape[ptr++],DisplacementZ=tape[ptr++],RotationalDisplacementRX=tape[ptr++],RotationalDisplacementRY=tape[ptr++],RotationalDisplacementRZ=tape[ptr++],Distortion=tape[ptr++];return new IfcStructuralLoadSingleDisplacementDistortion(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ,Distortion)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DisplacementX),args.push(this.DisplacementY),args.push(this.DisplacementZ),args.push(this.RotationalDisplacementRX),args.push(this.RotationalDisplacementRY),args.push(this.RotationalDisplacementRZ),args.push(this.Distortion),args}},IfcStructuralLoadSingleForce=class{constructor(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ){this.expressID=expressID,this.type=type,this.Name=Name,this.ForceX=ForceX,this.ForceY=ForceY,this.ForceZ=ForceZ,this.MomentX=MomentX,this.MomentY=MomentY,this.MomentZ=MomentZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],ForceX=tape[ptr++],ForceY=tape[ptr++],ForceZ=tape[ptr++],MomentX=tape[ptr++],MomentY=tape[ptr++],MomentZ=tape[ptr++];return new IfcStructuralLoadSingleForce(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.ForceX),args.push(this.ForceY),args.push(this.ForceZ),args.push(this.MomentX),args.push(this.MomentY),args.push(this.MomentZ),args}},IfcStructuralLoadSingleForceWarping=class{constructor(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ,WarpingMoment){this.expressID=expressID,this.type=type,this.Name=Name,this.ForceX=ForceX,this.ForceY=ForceY,this.ForceZ=ForceZ,this.MomentX=MomentX,this.MomentY=MomentY,this.MomentZ=MomentZ,this.WarpingMoment=WarpingMoment}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],ForceX=tape[ptr++],ForceY=tape[ptr++],ForceZ=tape[ptr++],MomentX=tape[ptr++],MomentY=tape[ptr++],MomentZ=tape[ptr++],WarpingMoment=tape[ptr++];return new IfcStructuralLoadSingleForceWarping(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ,WarpingMoment)}ToTape(){let args=[];return args.push(this.Name),args.push(this.ForceX),args.push(this.ForceY),args.push(this.ForceZ),args.push(this.MomentX),args.push(this.MomentY),args.push(this.MomentZ),args.push(this.WarpingMoment),args}},IfcStructuralLoadStatic=class{constructor(expressID,type,Name){this.expressID=expressID,this.type=type,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++];return new IfcStructuralLoadStatic(expressID,type,Name)}ToTape(){let args=[];return args.push(this.Name),args}},IfcStructuralLoadTemperature=class{constructor(expressID,type,Name,DeltaTConstant,DeltaTY,DeltaTZ){this.expressID=expressID,this.type=type,this.Name=Name,this.DeltaTConstant=DeltaTConstant,this.DeltaTY=DeltaTY,this.DeltaTZ=DeltaTZ}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DeltaTConstant=tape[ptr++],DeltaTY=tape[ptr++],DeltaTZ=tape[ptr++];return new IfcStructuralLoadTemperature(expressID,type,Name,DeltaTConstant,DeltaTY,DeltaTZ)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DeltaTConstant),args.push(this.DeltaTY),args.push(this.DeltaTZ),args}},IfcStructuralMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++];return new IfcStructuralMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args}},IfcStructuralPlanarAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.DestabilizingLoad=DestabilizingLoad,this.ProjectedOrTrue=ProjectedOrTrue,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],DestabilizingLoad=tape[ptr++],ProjectedOrTrue=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStructuralPlanarAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.DestabilizingLoad),args.push(this.ProjectedOrTrue),args.push(this.PredefinedType),args}},IfcStructuralPointAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.DestabilizingLoad=DestabilizingLoad}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],DestabilizingLoad=tape[ptr++];return new IfcStructuralPointAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.DestabilizingLoad),args}},IfcStructuralPointConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,ConditionCoordinateSystem){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedCondition=AppliedCondition,this.ConditionCoordinateSystem=ConditionCoordinateSystem}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedCondition=tape[ptr++],ConditionCoordinateSystem=tape[ptr++];return new IfcStructuralPointConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,ConditionCoordinateSystem)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedCondition),args.push(this.ConditionCoordinateSystem),args}},IfcStructuralPointReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++];return new IfcStructuralPointReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args}},IfcStructuralReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++];return new IfcStructuralReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args}},IfcStructuralResultGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheoryType,ResultForLoadGroup,IsLinear){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.TheoryType=TheoryType,this.ResultForLoadGroup=ResultForLoadGroup,this.IsLinear=IsLinear}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],TheoryType=tape[ptr++],ResultForLoadGroup=tape[ptr++],IsLinear=tape[ptr++];return new IfcStructuralResultGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheoryType,ResultForLoadGroup,IsLinear)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.TheoryType),args.push(this.ResultForLoadGroup),args.push(this.IsLinear),args}},IfcStructuralSurfaceAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.DestabilizingLoad=DestabilizingLoad,this.ProjectedOrTrue=ProjectedOrTrue,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],DestabilizingLoad=tape[ptr++],ProjectedOrTrue=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStructuralSurfaceAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.DestabilizingLoad),args.push(this.ProjectedOrTrue),args.push(this.PredefinedType),args}},IfcStructuralSurfaceConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedCondition=AppliedCondition}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedCondition=tape[ptr++];return new IfcStructuralSurfaceConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedCondition),args}},IfcStructuralSurfaceMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.PredefinedType=PredefinedType,this.Thickness=Thickness}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],PredefinedType=tape[ptr++],Thickness=tape[ptr++];return new IfcStructuralSurfaceMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.PredefinedType),args.push(this.Thickness),args}},IfcStructuralSurfaceMemberVarying=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.PredefinedType=PredefinedType,this.Thickness=Thickness}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],PredefinedType=tape[ptr++],Thickness=tape[ptr++];return new IfcStructuralSurfaceMemberVarying(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.PredefinedType),args.push(this.Thickness),args}},IfcStructuralSurfaceReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.AppliedLoad=AppliedLoad,this.GlobalOrLocal=GlobalOrLocal,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],AppliedLoad=tape[ptr++],GlobalOrLocal=tape[ptr++],PredefinedType=tape[ptr++];return new IfcStructuralSurfaceReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.AppliedLoad),args.push(this.GlobalOrLocal),args.push(this.PredefinedType),args}},IfcStyleModel=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID,this.type=type,this.ContextOfItems=ContextOfItems,this.RepresentationIdentifier=RepresentationIdentifier,this.RepresentationType=RepresentationType,this.Items=Items}static FromTape(expressID,type,tape){let ptr=0,ContextOfItems=tape[ptr++],RepresentationIdentifier=tape[ptr++],RepresentationType=tape[ptr++],Items=tape[ptr++];return new IfcStyleModel(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items)}ToTape(){let args=[];return args.push(this.ContextOfItems),args.push(this.RepresentationIdentifier),args.push(this.RepresentationType),args.push(this.Items),args}},IfcStyledItem=class{constructor(expressID,type,Item,Styles,Name){this.expressID=expressID,this.type=type,this.Item=Item,this.Styles=Styles,this.Name=Name}static FromTape(expressID,type,tape){let ptr=0,Item=tape[ptr++],Styles=tape[ptr++],Name=tape[ptr++];return new IfcStyledItem(expressID,type,Item,Styles,Name)}ToTape(){let args=[];return args.push(this.Item),args.push(this.Styles),args.push(this.Name),args}},IfcStyledRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID,this.type=type,this.ContextOfItems=ContextOfItems,this.RepresentationIdentifier=RepresentationIdentifier,this.RepresentationType=RepresentationType,this.Items=Items}static FromTape(expressID,type,tape){let ptr=0,ContextOfItems=tape[ptr++],RepresentationIdentifier=tape[ptr++],RepresentationType=tape[ptr++],Items=tape[ptr++];return new IfcStyledRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items)}ToTape(){let args=[];return args.push(this.ContextOfItems),args.push(this.RepresentationIdentifier),args.push(this.RepresentationType),args.push(this.Items),args}},IfcSubContractResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Usage=Usage,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Usage=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSubContractResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Usage),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcSubContractResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType,this.BaseCosts=BaseCosts,this.BaseQuantity=BaseQuantity,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++],BaseCosts=tape[ptr++],BaseQuantity=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSubContractResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args.push(this.BaseCosts),args.push(this.BaseQuantity),args.push(this.PredefinedType),args}},IfcSubedge=class{constructor(expressID,type,EdgeStart,EdgeEnd,ParentEdge){this.expressID=expressID,this.type=type,this.EdgeStart=EdgeStart,this.EdgeEnd=EdgeEnd,this.ParentEdge=ParentEdge}static FromTape(expressID,type,tape){let ptr=0,EdgeStart=tape[ptr++],EdgeEnd=tape[ptr++],ParentEdge=tape[ptr++];return new IfcSubedge(expressID,type,EdgeStart,EdgeEnd,ParentEdge)}ToTape(){let args=[];return args.push(this.EdgeStart),args.push(this.EdgeEnd),args.push(this.ParentEdge),args}},IfcSurface=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcSurface(expressID,type)}ToTape(){return[]}},IfcSurfaceCurve=class{constructor(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation){this.expressID=expressID,this.type=type,this.Curve3D=Curve3D,this.AssociatedGeometry=AssociatedGeometry,this.MasterRepresentation=MasterRepresentation}static FromTape(expressID,type,tape){let ptr=0,Curve3D=tape[ptr++],AssociatedGeometry=tape[ptr++],MasterRepresentation=tape[ptr++];return new IfcSurfaceCurve(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation)}ToTape(){let args=[];return args.push(this.Curve3D),args.push(this.AssociatedGeometry),args.push(this.MasterRepresentation),args}},IfcSurfaceCurveSweptAreaSolid=class{constructor(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,ReferenceSurface){this.expressID=expressID,this.type=type,this.SweptArea=SweptArea,this.Position=Position,this.Directrix=Directrix,this.StartParam=StartParam,this.EndParam=EndParam,this.ReferenceSurface=ReferenceSurface}static FromTape(expressID,type,tape){let ptr=0,SweptArea=tape[ptr++],Position=tape[ptr++],Directrix=tape[ptr++],StartParam=tape[ptr++],EndParam=tape[ptr++],ReferenceSurface=tape[ptr++];return new IfcSurfaceCurveSweptAreaSolid(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,ReferenceSurface)}ToTape(){let args=[];return args.push(this.SweptArea),args.push(this.Position),args.push(this.Directrix),args.push(this.StartParam),args.push(this.EndParam),args.push(this.ReferenceSurface),args}},IfcSurfaceFeature=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSurfaceFeature(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSurfaceOfLinearExtrusion=class{constructor(expressID,type,SweptCurve,Position,ExtrudedDirection,Depth){this.expressID=expressID,this.type=type,this.SweptCurve=SweptCurve,this.Position=Position,this.ExtrudedDirection=ExtrudedDirection,this.Depth=Depth}static FromTape(expressID,type,tape){let ptr=0,SweptCurve=tape[ptr++],Position=tape[ptr++],ExtrudedDirection=tape[ptr++],Depth=tape[ptr++];return new IfcSurfaceOfLinearExtrusion(expressID,type,SweptCurve,Position,ExtrudedDirection,Depth)}ToTape(){let args=[];return args.push(this.SweptCurve),args.push(this.Position),args.push(this.ExtrudedDirection),args.push(this.Depth),args}},IfcSurfaceOfRevolution=class{constructor(expressID,type,SweptCurve,Position,AxisPosition){this.expressID=expressID,this.type=type,this.SweptCurve=SweptCurve,this.Position=Position,this.AxisPosition=AxisPosition}static FromTape(expressID,type,tape){let ptr=0,SweptCurve=tape[ptr++],Position=tape[ptr++],AxisPosition=tape[ptr++];return new IfcSurfaceOfRevolution(expressID,type,SweptCurve,Position,AxisPosition)}ToTape(){let args=[];return args.push(this.SweptCurve),args.push(this.Position),args.push(this.AxisPosition),args}},IfcSurfaceReinforcementArea=class{constructor(expressID,type,Name,SurfaceReinforcement1,SurfaceReinforcement2,ShearReinforcement){this.expressID=expressID,this.type=type,this.Name=Name,this.SurfaceReinforcement1=SurfaceReinforcement1,this.SurfaceReinforcement2=SurfaceReinforcement2,this.ShearReinforcement=ShearReinforcement}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],SurfaceReinforcement1=tape[ptr++],SurfaceReinforcement2=tape[ptr++],ShearReinforcement=tape[ptr++];return new IfcSurfaceReinforcementArea(expressID,type,Name,SurfaceReinforcement1,SurfaceReinforcement2,ShearReinforcement)}ToTape(){let args=[];return args.push(this.Name),args.push(this.SurfaceReinforcement1),args.push(this.SurfaceReinforcement2),args.push(this.ShearReinforcement),args}},IfcSurfaceStyle=class{constructor(expressID,type,Name,Side,Styles){this.expressID=expressID,this.type=type,this.Name=Name,this.Side=Side,this.Styles=Styles}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Side=tape[ptr++],Styles=tape[ptr++];return new IfcSurfaceStyle(expressID,type,Name,Side,Styles)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Side),args.push(this.Styles),args}},IfcSurfaceStyleLighting=class{constructor(expressID,type,DiffuseTransmissionColour,DiffuseReflectionColour,TransmissionColour,ReflectanceColour){this.expressID=expressID,this.type=type,this.DiffuseTransmissionColour=DiffuseTransmissionColour,this.DiffuseReflectionColour=DiffuseReflectionColour,this.TransmissionColour=TransmissionColour,this.ReflectanceColour=ReflectanceColour}static FromTape(expressID,type,tape){let ptr=0,DiffuseTransmissionColour=tape[ptr++],DiffuseReflectionColour=tape[ptr++],TransmissionColour=tape[ptr++],ReflectanceColour=tape[ptr++];return new IfcSurfaceStyleLighting(expressID,type,DiffuseTransmissionColour,DiffuseReflectionColour,TransmissionColour,ReflectanceColour)}ToTape(){let args=[];return args.push(this.DiffuseTransmissionColour),args.push(this.DiffuseReflectionColour),args.push(this.TransmissionColour),args.push(this.ReflectanceColour),args}},IfcSurfaceStyleRefraction=class{constructor(expressID,type,RefractionIndex,DispersionFactor){this.expressID=expressID,this.type=type,this.RefractionIndex=RefractionIndex,this.DispersionFactor=DispersionFactor}static FromTape(expressID,type,tape){let ptr=0,RefractionIndex=tape[ptr++],DispersionFactor=tape[ptr++];return new IfcSurfaceStyleRefraction(expressID,type,RefractionIndex,DispersionFactor)}ToTape(){let args=[];return args.push(this.RefractionIndex),args.push(this.DispersionFactor),args}},IfcSurfaceStyleRendering=class{constructor(expressID,type,SurfaceColour,Transparency,DiffuseColour,TransmissionColour,DiffuseTransmissionColour,ReflectionColour,SpecularColour,SpecularHighlight,ReflectanceMethod){this.expressID=expressID,this.type=type,this.SurfaceColour=SurfaceColour,this.Transparency=Transparency,this.DiffuseColour=DiffuseColour,this.TransmissionColour=TransmissionColour,this.DiffuseTransmissionColour=DiffuseTransmissionColour,this.ReflectionColour=ReflectionColour,this.SpecularColour=SpecularColour,this.SpecularHighlight=SpecularHighlight,this.ReflectanceMethod=ReflectanceMethod}static FromTape(expressID,type,tape){let ptr=0,SurfaceColour=tape[ptr++],Transparency=tape[ptr++],DiffuseColour=tape[ptr++],TransmissionColour=tape[ptr++],DiffuseTransmissionColour=tape[ptr++],ReflectionColour=tape[ptr++],SpecularColour=tape[ptr++],SpecularHighlight=tape[ptr++],ReflectanceMethod=tape[ptr++];return new IfcSurfaceStyleRendering(expressID,type,SurfaceColour,Transparency,DiffuseColour,TransmissionColour,DiffuseTransmissionColour,ReflectionColour,SpecularColour,SpecularHighlight,ReflectanceMethod)}ToTape(){let args=[];return args.push(this.SurfaceColour),args.push(this.Transparency),args.push(this.DiffuseColour),args.push(this.TransmissionColour),args.push(this.DiffuseTransmissionColour),args.push(this.ReflectionColour),args.push(this.SpecularColour),args.push(this.SpecularHighlight),args.push(this.ReflectanceMethod),args}},IfcSurfaceStyleShading=class{constructor(expressID,type,SurfaceColour,Transparency){this.expressID=expressID,this.type=type,this.SurfaceColour=SurfaceColour,this.Transparency=Transparency}static FromTape(expressID,type,tape){let ptr=0,SurfaceColour=tape[ptr++],Transparency=tape[ptr++];return new IfcSurfaceStyleShading(expressID,type,SurfaceColour,Transparency)}ToTape(){let args=[];return args.push(this.SurfaceColour),args.push(this.Transparency),args}},IfcSurfaceStyleWithTextures=class{constructor(expressID,type,Textures){this.expressID=expressID,this.type=type,this.Textures=Textures}static FromTape(expressID,type,tape){let ptr=0,Textures=tape[ptr++];return new IfcSurfaceStyleWithTextures(expressID,type,Textures)}ToTape(){let args=[];return args.push(this.Textures),args}},IfcSurfaceTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter){this.expressID=expressID,this.type=type,this.RepeatS=RepeatS,this.RepeatT=RepeatT,this.Mode=Mode,this.TextureTransform=TextureTransform,this.Parameter=Parameter}static FromTape(expressID,type,tape){let ptr=0,RepeatS=tape[ptr++],RepeatT=tape[ptr++],Mode=tape[ptr++],TextureTransform=tape[ptr++],Parameter=tape[ptr++];return new IfcSurfaceTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter)}ToTape(){let args=[];return args.push(this.RepeatS),args.push(this.RepeatT),args.push(this.Mode),args.push(this.TextureTransform),args.push(this.Parameter),args}},IfcSweptAreaSolid=class{constructor(expressID,type,SweptArea,Position){this.expressID=expressID,this.type=type,this.SweptArea=SweptArea,this.Position=Position}static FromTape(expressID,type,tape){let ptr=0,SweptArea=tape[ptr++],Position=tape[ptr++];return new IfcSweptAreaSolid(expressID,type,SweptArea,Position)}ToTape(){let args=[];return args.push(this.SweptArea),args.push(this.Position),args}},IfcSweptDiskSolid=class{constructor(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam){this.expressID=expressID,this.type=type,this.Directrix=Directrix,this.Radius=Radius,this.InnerRadius=InnerRadius,this.StartParam=StartParam,this.EndParam=EndParam}static FromTape(expressID,type,tape){let ptr=0,Directrix=tape[ptr++],Radius=tape[ptr++],InnerRadius=tape[ptr++],StartParam=tape[ptr++],EndParam=tape[ptr++];return new IfcSweptDiskSolid(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam)}ToTape(){let args=[];return args.push(this.Directrix),args.push(this.Radius),args.push(this.InnerRadius),args.push(this.StartParam),args.push(this.EndParam),args}},IfcSweptDiskSolidPolygonal=class{constructor(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam,FilletRadius){this.expressID=expressID,this.type=type,this.Directrix=Directrix,this.Radius=Radius,this.InnerRadius=InnerRadius,this.StartParam=StartParam,this.EndParam=EndParam,this.FilletRadius=FilletRadius}static FromTape(expressID,type,tape){let ptr=0,Directrix=tape[ptr++],Radius=tape[ptr++],InnerRadius=tape[ptr++],StartParam=tape[ptr++],EndParam=tape[ptr++],FilletRadius=tape[ptr++];return new IfcSweptDiskSolidPolygonal(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam,FilletRadius)}ToTape(){let args=[];return args.push(this.Directrix),args.push(this.Radius),args.push(this.InnerRadius),args.push(this.StartParam),args.push(this.EndParam),args.push(this.FilletRadius),args}},IfcSweptSurface=class{constructor(expressID,type,SweptCurve,Position){this.expressID=expressID,this.type=type,this.SweptCurve=SweptCurve,this.Position=Position}static FromTape(expressID,type,tape){let ptr=0,SweptCurve=tape[ptr++],Position=tape[ptr++];return new IfcSweptSurface(expressID,type,SweptCurve,Position)}ToTape(){let args=[];return args.push(this.SweptCurve),args.push(this.Position),args}},IfcSwitchingDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSwitchingDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSwitchingDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSwitchingDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcSystem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++];return new IfcSystem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args}},IfcSystemFurnitureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSystemFurnitureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcSystemFurnitureElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcSystemFurnitureElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcTShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,WebEdgeRadius,WebSlope,FlangeSlope){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.Depth=Depth,this.FlangeWidth=FlangeWidth,this.WebThickness=WebThickness,this.FlangeThickness=FlangeThickness,this.FilletRadius=FilletRadius,this.FlangeEdgeRadius=FlangeEdgeRadius,this.WebEdgeRadius=WebEdgeRadius,this.WebSlope=WebSlope,this.FlangeSlope=FlangeSlope}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],Depth=tape[ptr++],FlangeWidth=tape[ptr++],WebThickness=tape[ptr++],FlangeThickness=tape[ptr++],FilletRadius=tape[ptr++],FlangeEdgeRadius=tape[ptr++],WebEdgeRadius=tape[ptr++],WebSlope=tape[ptr++],FlangeSlope=tape[ptr++];return new IfcTShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,WebEdgeRadius,WebSlope,FlangeSlope)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.Depth),args.push(this.FlangeWidth),args.push(this.WebThickness),args.push(this.FlangeThickness),args.push(this.FilletRadius),args.push(this.FlangeEdgeRadius),args.push(this.WebEdgeRadius),args.push(this.WebSlope),args.push(this.FlangeSlope),args}},IfcTable=class{constructor(expressID,type,Name,Rows,Columns){this.expressID=expressID,this.type=type,this.Name=Name,this.Rows=Rows,this.Columns=Columns}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Rows=tape[ptr++],Columns=tape[ptr++];return new IfcTable(expressID,type,Name,Rows,Columns)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Rows),args.push(this.Columns),args}},IfcTableColumn=class{constructor(expressID,type,Identifier,Name,Description,Unit,ReferencePath){this.expressID=expressID,this.type=type,this.Identifier=Identifier,this.Name=Name,this.Description=Description,this.Unit=Unit,this.ReferencePath=ReferencePath}static FromTape(expressID,type,tape){let ptr=0,Identifier=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],Unit=tape[ptr++],ReferencePath=tape[ptr++];return new IfcTableColumn(expressID,type,Identifier,Name,Description,Unit,ReferencePath)}ToTape(){let args=[];return args.push(this.Identifier),args.push(this.Name),args.push(this.Description),args.push(this.Unit),args.push(this.ReferencePath),args}},IfcTableRow=class{constructor(expressID,type,RowCells,IsHeading){this.expressID=expressID,this.type=type,this.RowCells=RowCells,this.IsHeading=IsHeading}static FromTape(expressID,type,tape){let ptr=0,RowCells=tape[ptr++],IsHeading=tape[ptr++];return new IfcTableRow(expressID,type,RowCells,IsHeading)}ToTape(){let args=[];return args.push(this.RowCells),args.push(this.IsHeading),args}},IfcTank=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTank(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcTankType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTankType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcTask=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Status,WorkMethod,IsMilestone,Priority,TaskTime,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.LongDescription=LongDescription,this.Status=Status,this.WorkMethod=WorkMethod,this.IsMilestone=IsMilestone,this.Priority=Priority,this.TaskTime=TaskTime,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],Status=tape[ptr++],WorkMethod=tape[ptr++],IsMilestone=tape[ptr++],Priority=tape[ptr++],TaskTime=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTask(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Status,WorkMethod,IsMilestone,Priority,TaskTime,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.LongDescription),args.push(this.Status),args.push(this.WorkMethod),args.push(this.IsMilestone),args.push(this.Priority),args.push(this.TaskTime),args.push(this.PredefinedType),args}},IfcTaskTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion){this.expressID=expressID,this.type=type,this.Name=Name,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.DurationType=DurationType,this.ScheduleDuration=ScheduleDuration,this.ScheduleStart=ScheduleStart,this.ScheduleFinish=ScheduleFinish,this.EarlyStart=EarlyStart,this.EarlyFinish=EarlyFinish,this.LateStart=LateStart,this.LateFinish=LateFinish,this.FreeFloat=FreeFloat,this.TotalFloat=TotalFloat,this.IsCritical=IsCritical,this.StatusTime=StatusTime,this.ActualDuration=ActualDuration,this.ActualStart=ActualStart,this.ActualFinish=ActualFinish,this.RemainingTime=RemainingTime,this.Completion=Completion}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],DurationType=tape[ptr++],ScheduleDuration=tape[ptr++],ScheduleStart=tape[ptr++],ScheduleFinish=tape[ptr++],EarlyStart=tape[ptr++],EarlyFinish=tape[ptr++],LateStart=tape[ptr++],LateFinish=tape[ptr++],FreeFloat=tape[ptr++],TotalFloat=tape[ptr++],IsCritical=tape[ptr++],StatusTime=tape[ptr++],ActualDuration=tape[ptr++],ActualStart=tape[ptr++],ActualFinish=tape[ptr++],RemainingTime=tape[ptr++],Completion=tape[ptr++];return new IfcTaskTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.DurationType),args.push(this.ScheduleDuration),args.push(this.ScheduleStart),args.push(this.ScheduleFinish),args.push(this.EarlyStart),args.push(this.EarlyFinish),args.push(this.LateStart),args.push(this.LateFinish),args.push(this.FreeFloat),args.push(this.TotalFloat),args.push(this.IsCritical),args.push(this.StatusTime),args.push(this.ActualDuration),args.push(this.ActualStart),args.push(this.ActualFinish),args.push(this.RemainingTime),args.push(this.Completion),args}},IfcTaskTimeRecurring=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion,Recurrence){this.expressID=expressID,this.type=type,this.Name=Name,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.DurationType=DurationType,this.ScheduleDuration=ScheduleDuration,this.ScheduleStart=ScheduleStart,this.ScheduleFinish=ScheduleFinish,this.EarlyStart=EarlyStart,this.EarlyFinish=EarlyFinish,this.LateStart=LateStart,this.LateFinish=LateFinish,this.FreeFloat=FreeFloat,this.TotalFloat=TotalFloat,this.IsCritical=IsCritical,this.StatusTime=StatusTime,this.ActualDuration=ActualDuration,this.ActualStart=ActualStart,this.ActualFinish=ActualFinish,this.RemainingTime=RemainingTime,this.Completion=Completion,this.Recurrence=Recurrence}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],DurationType=tape[ptr++],ScheduleDuration=tape[ptr++],ScheduleStart=tape[ptr++],ScheduleFinish=tape[ptr++],EarlyStart=tape[ptr++],EarlyFinish=tape[ptr++],LateStart=tape[ptr++],LateFinish=tape[ptr++],FreeFloat=tape[ptr++],TotalFloat=tape[ptr++],IsCritical=tape[ptr++],StatusTime=tape[ptr++],ActualDuration=tape[ptr++],ActualStart=tape[ptr++],ActualFinish=tape[ptr++],RemainingTime=tape[ptr++],Completion=tape[ptr++],Recurrence=tape[ptr++];return new IfcTaskTimeRecurring(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion,Recurrence)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.DurationType),args.push(this.ScheduleDuration),args.push(this.ScheduleStart),args.push(this.ScheduleFinish),args.push(this.EarlyStart),args.push(this.EarlyFinish),args.push(this.LateStart),args.push(this.LateFinish),args.push(this.FreeFloat),args.push(this.TotalFloat),args.push(this.IsCritical),args.push(this.StatusTime),args.push(this.ActualDuration),args.push(this.ActualStart),args.push(this.ActualFinish),args.push(this.RemainingTime),args.push(this.Completion),args.push(this.Recurrence),args}},IfcTaskType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,WorkMethod){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ProcessType=ProcessType,this.PredefinedType=PredefinedType,this.WorkMethod=WorkMethod}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ProcessType=tape[ptr++],PredefinedType=tape[ptr++],WorkMethod=tape[ptr++];return new IfcTaskType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,WorkMethod)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ProcessType),args.push(this.PredefinedType),args.push(this.WorkMethod),args}},IfcTelecomAddress=class{constructor(expressID,type,Purpose,Description,UserDefinedPurpose,TelephoneNumbers,FacsimileNumbers,PagerNumber,ElectronicMailAddresses,WWWHomePageURL,MessagingIDs){this.expressID=expressID,this.type=type,this.Purpose=Purpose,this.Description=Description,this.UserDefinedPurpose=UserDefinedPurpose,this.TelephoneNumbers=TelephoneNumbers,this.FacsimileNumbers=FacsimileNumbers,this.PagerNumber=PagerNumber,this.ElectronicMailAddresses=ElectronicMailAddresses,this.WWWHomePageURL=WWWHomePageURL,this.MessagingIDs=MessagingIDs}static FromTape(expressID,type,tape){let ptr=0,Purpose=tape[ptr++],Description=tape[ptr++],UserDefinedPurpose=tape[ptr++],TelephoneNumbers=tape[ptr++],FacsimileNumbers=tape[ptr++],PagerNumber=tape[ptr++],ElectronicMailAddresses=tape[ptr++],WWWHomePageURL=tape[ptr++],MessagingIDs=tape[ptr++];return new IfcTelecomAddress(expressID,type,Purpose,Description,UserDefinedPurpose,TelephoneNumbers,FacsimileNumbers,PagerNumber,ElectronicMailAddresses,WWWHomePageURL,MessagingIDs)}ToTape(){let args=[];return args.push(this.Purpose),args.push(this.Description),args.push(this.UserDefinedPurpose),args.push(this.TelephoneNumbers),args.push(this.FacsimileNumbers),args.push(this.PagerNumber),args.push(this.ElectronicMailAddresses),args.push(this.WWWHomePageURL),args.push(this.MessagingIDs),args}},IfcTendon=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType,NominalDiameter,CrossSectionArea,TensionForce,PreStress,FrictionCoefficient,AnchorageSlip,MinCurvatureRadius){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.SteelGrade=SteelGrade,this.PredefinedType=PredefinedType,this.NominalDiameter=NominalDiameter,this.CrossSectionArea=CrossSectionArea,this.TensionForce=TensionForce,this.PreStress=PreStress,this.FrictionCoefficient=FrictionCoefficient,this.AnchorageSlip=AnchorageSlip,this.MinCurvatureRadius=MinCurvatureRadius}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],SteelGrade=tape[ptr++],PredefinedType=tape[ptr++],NominalDiameter=tape[ptr++],CrossSectionArea=tape[ptr++],TensionForce=tape[ptr++],PreStress=tape[ptr++],FrictionCoefficient=tape[ptr++],AnchorageSlip=tape[ptr++],MinCurvatureRadius=tape[ptr++];return new IfcTendon(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType,NominalDiameter,CrossSectionArea,TensionForce,PreStress,FrictionCoefficient,AnchorageSlip,MinCurvatureRadius)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.SteelGrade),args.push(this.PredefinedType),args.push(this.NominalDiameter),args.push(this.CrossSectionArea),args.push(this.TensionForce),args.push(this.PreStress),args.push(this.FrictionCoefficient),args.push(this.AnchorageSlip),args.push(this.MinCurvatureRadius),args}},IfcTendonAnchor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.SteelGrade=SteelGrade,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],SteelGrade=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTendonAnchor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.SteelGrade),args.push(this.PredefinedType),args}},IfcTendonAnchorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTendonAnchorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcTendonConduit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.SteelGrade=SteelGrade,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],SteelGrade=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTendonConduit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.SteelGrade),args.push(this.PredefinedType),args}},IfcTendonConduitType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTendonConduitType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcTendonType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,SheathDiameter){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.NominalDiameter=NominalDiameter,this.CrossSectionArea=CrossSectionArea,this.SheathDiameter=SheathDiameter}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],NominalDiameter=tape[ptr++],CrossSectionArea=tape[ptr++],SheathDiameter=tape[ptr++];return new IfcTendonType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,SheathDiameter)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.NominalDiameter),args.push(this.CrossSectionArea),args.push(this.SheathDiameter),args}},IfcTessellatedFaceSet=class{constructor(expressID,type,Coordinates){this.expressID=expressID,this.type=type,this.Coordinates=Coordinates}static FromTape(expressID,type,tape){let ptr=0,Coordinates=tape[ptr++];return new IfcTessellatedFaceSet(expressID,type,Coordinates)}ToTape(){let args=[];return args.push(this.Coordinates),args}},IfcTessellatedItem=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcTessellatedItem(expressID,type)}ToTape(){return[]}},IfcTextLiteral=class{constructor(expressID,type,Literal,Placement,Path){this.expressID=expressID,this.type=type,this.Literal=Literal,this.Placement=Placement,this.Path=Path}static FromTape(expressID,type,tape){let ptr=0,Literal=tape[ptr++],Placement=tape[ptr++],Path=tape[ptr++];return new IfcTextLiteral(expressID,type,Literal,Placement,Path)}ToTape(){let args=[];return args.push(this.Literal),args.push(this.Placement),args.push(this.Path),args}},IfcTextLiteralWithExtent=class{constructor(expressID,type,Literal,Placement,Path,Extent,BoxAlignment){this.expressID=expressID,this.type=type,this.Literal=Literal,this.Placement=Placement,this.Path=Path,this.Extent=Extent,this.BoxAlignment=BoxAlignment}static FromTape(expressID,type,tape){let ptr=0,Literal=tape[ptr++],Placement=tape[ptr++],Path=tape[ptr++],Extent=tape[ptr++],BoxAlignment=tape[ptr++];return new IfcTextLiteralWithExtent(expressID,type,Literal,Placement,Path,Extent,BoxAlignment)}ToTape(){let args=[];return args.push(this.Literal),args.push(this.Placement),args.push(this.Path),args.push(this.Extent),args.push(this.BoxAlignment),args}},IfcTextStyle=class{constructor(expressID,type,Name,TextCharacterAppearance,TextStyle,TextFontStyle,ModelOrDraughting){this.expressID=expressID,this.type=type,this.Name=Name,this.TextCharacterAppearance=TextCharacterAppearance,this.TextStyle=TextStyle,this.TextFontStyle=TextFontStyle,this.ModelOrDraughting=ModelOrDraughting}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],TextCharacterAppearance=tape[ptr++],TextStyle=tape[ptr++],TextFontStyle=tape[ptr++],ModelOrDraughting=tape[ptr++];return new IfcTextStyle(expressID,type,Name,TextCharacterAppearance,TextStyle,TextFontStyle,ModelOrDraughting)}ToTape(){let args=[];return args.push(this.Name),args.push(this.TextCharacterAppearance),args.push(this.TextStyle),args.push(this.TextFontStyle),args.push(this.ModelOrDraughting),args}},IfcTextStyleFontModel=class{constructor(expressID,type,Name,FontFamily,FontStyle,FontVariant,FontWeight,FontSize){this.expressID=expressID,this.type=type,this.Name=Name,this.FontFamily=FontFamily,this.FontStyle=FontStyle,this.FontVariant=FontVariant,this.FontWeight=FontWeight,this.FontSize=FontSize}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],FontFamily=tape[ptr++],FontStyle=tape[ptr++],FontVariant=tape[ptr++],FontWeight=tape[ptr++],FontSize=tape[ptr++];return new IfcTextStyleFontModel(expressID,type,Name,FontFamily,FontStyle,FontVariant,FontWeight,FontSize)}ToTape(){let args=[];return args.push(this.Name),args.push(this.FontFamily),args.push(this.FontStyle),args.push(this.FontVariant),args.push(this.FontWeight),args.push(this.FontSize),args}},IfcTextStyleForDefinedFont=class{constructor(expressID,type,Colour,BackgroundColour){this.expressID=expressID,this.type=type,this.Colour=Colour,this.BackgroundColour=BackgroundColour}static FromTape(expressID,type,tape){let ptr=0,Colour=tape[ptr++],BackgroundColour=tape[ptr++];return new IfcTextStyleForDefinedFont(expressID,type,Colour,BackgroundColour)}ToTape(){let args=[];return args.push(this.Colour),args.push(this.BackgroundColour),args}},IfcTextStyleTextModel=class{constructor(expressID,type,TextIndent,TextAlign,TextDecoration,LetterSpacing,WordSpacing,TextTransform,LineHeight){this.expressID=expressID,this.type=type,this.TextIndent=TextIndent,this.TextAlign=TextAlign,this.TextDecoration=TextDecoration,this.LetterSpacing=LetterSpacing,this.WordSpacing=WordSpacing,this.TextTransform=TextTransform,this.LineHeight=LineHeight}static FromTape(expressID,type,tape){let ptr=0,TextIndent=tape[ptr++],TextAlign=tape[ptr++],TextDecoration=tape[ptr++],LetterSpacing=tape[ptr++],WordSpacing=tape[ptr++],TextTransform=tape[ptr++],LineHeight=tape[ptr++];return new IfcTextStyleTextModel(expressID,type,TextIndent,TextAlign,TextDecoration,LetterSpacing,WordSpacing,TextTransform,LineHeight)}ToTape(){let args=[];return args.push(this.TextIndent),args.push(this.TextAlign),args.push(this.TextDecoration),args.push(this.LetterSpacing),args.push(this.WordSpacing),args.push(this.TextTransform),args.push(this.LineHeight),args}},IfcTextureCoordinate=class{constructor(expressID,type,Maps){this.expressID=expressID,this.type=type,this.Maps=Maps}static FromTape(expressID,type,tape){let ptr=0,Maps=tape[ptr++];return new IfcTextureCoordinate(expressID,type,Maps)}ToTape(){let args=[];return args.push(this.Maps),args}},IfcTextureCoordinateGenerator=class{constructor(expressID,type,Maps,Mode,Parameter){this.expressID=expressID,this.type=type,this.Maps=Maps,this.Mode=Mode,this.Parameter=Parameter}static FromTape(expressID,type,tape){let ptr=0,Maps=tape[ptr++],Mode=tape[ptr++],Parameter=tape[ptr++];return new IfcTextureCoordinateGenerator(expressID,type,Maps,Mode,Parameter)}ToTape(){let args=[];return args.push(this.Maps),args.push(this.Mode),args.push(this.Parameter),args}},IfcTextureMap=class{constructor(expressID,type,Maps,Vertices,MappedTo){this.expressID=expressID,this.type=type,this.Maps=Maps,this.Vertices=Vertices,this.MappedTo=MappedTo}static FromTape(expressID,type,tape){let ptr=0,Maps=tape[ptr++],Vertices=tape[ptr++],MappedTo=tape[ptr++];return new IfcTextureMap(expressID,type,Maps,Vertices,MappedTo)}ToTape(){let args=[];return args.push(this.Maps),args.push(this.Vertices),args.push(this.MappedTo),args}},IfcTextureVertex=class{constructor(expressID,type,Coordinates){this.expressID=expressID,this.type=type,this.Coordinates=Coordinates}static FromTape(expressID,type,tape){let ptr=0,Coordinates=tape[ptr++];return new IfcTextureVertex(expressID,type,Coordinates)}ToTape(){let args=[];return args.push(this.Coordinates),args}},IfcTextureVertexList=class{constructor(expressID,type,TexCoordsList){this.expressID=expressID,this.type=type,this.TexCoordsList=TexCoordsList}static FromTape(expressID,type,tape){let ptr=0,TexCoordsList=tape[ptr++];return new IfcTextureVertexList(expressID,type,TexCoordsList)}ToTape(){let args=[];return args.push(this.TexCoordsList),args}},IfcTimePeriod=class{constructor(expressID,type,StartTime,EndTime){this.expressID=expressID,this.type=type,this.StartTime=StartTime,this.EndTime=EndTime}static FromTape(expressID,type,tape){let ptr=0,StartTime=tape[ptr++],EndTime=tape[ptr++];return new IfcTimePeriod(expressID,type,StartTime,EndTime)}ToTape(){let args=[];return args.push(this.StartTime),args.push(this.EndTime),args}},IfcTimeSeries=class{constructor(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit){this.expressID=expressID,this.type=type,this.Name=Name,this.Description=Description,this.StartTime=StartTime,this.EndTime=EndTime,this.TimeSeriesDataType=TimeSeriesDataType,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.Unit=Unit}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],Description=tape[ptr++],StartTime=tape[ptr++],EndTime=tape[ptr++],TimeSeriesDataType=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],Unit=tape[ptr++];return new IfcTimeSeries(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit)}ToTape(){let args=[];return args.push(this.Name),args.push(this.Description),args.push(this.StartTime),args.push(this.EndTime),args.push(this.TimeSeriesDataType),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.Unit),args}},IfcTimeSeriesValue=class{constructor(expressID,type,ListValues){this.expressID=expressID,this.type=type,this.ListValues=ListValues}static FromTape(expressID,type,tape){let ptr=0,ListValues=tape[ptr++];return new IfcTimeSeriesValue(expressID,type,ListValues)}ToTape(){let args=[];return args.push(this.ListValues),args}},IfcTopologicalRepresentationItem=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcTopologicalRepresentationItem(expressID,type)}ToTape(){return[]}},IfcTopologyRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID,this.type=type,this.ContextOfItems=ContextOfItems,this.RepresentationIdentifier=RepresentationIdentifier,this.RepresentationType=RepresentationType,this.Items=Items}static FromTape(expressID,type,tape){let ptr=0,ContextOfItems=tape[ptr++],RepresentationIdentifier=tape[ptr++],RepresentationType=tape[ptr++],Items=tape[ptr++];return new IfcTopologyRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items)}ToTape(){let args=[];return args.push(this.ContextOfItems),args.push(this.RepresentationIdentifier),args.push(this.RepresentationType),args.push(this.Items),args}},IfcToroidalSurface=class{constructor(expressID,type,Position,MajorRadius,MinorRadius){this.expressID=expressID,this.type=type,this.Position=Position,this.MajorRadius=MajorRadius,this.MinorRadius=MinorRadius}static FromTape(expressID,type,tape){let ptr=0,Position=tape[ptr++],MajorRadius=tape[ptr++],MinorRadius=tape[ptr++];return new IfcToroidalSurface(expressID,type,Position,MajorRadius,MinorRadius)}ToTape(){let args=[];return args.push(this.Position),args.push(this.MajorRadius),args.push(this.MinorRadius),args}},IfcTransformer=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTransformer(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcTransformerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTransformerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcTransitionCurveSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength,StartRadius,EndRadius,IsStartRadiusCCW,IsEndRadiusCCW,TransitionCurveType){this.expressID=expressID,this.type=type,this.StartPoint=StartPoint,this.StartDirection=StartDirection,this.SegmentLength=SegmentLength,this.StartRadius=StartRadius,this.EndRadius=EndRadius,this.IsStartRadiusCCW=IsStartRadiusCCW,this.IsEndRadiusCCW=IsEndRadiusCCW,this.TransitionCurveType=TransitionCurveType}static FromTape(expressID,type,tape){let ptr=0,StartPoint=tape[ptr++],StartDirection=tape[ptr++],SegmentLength=tape[ptr++],StartRadius=tape[ptr++],EndRadius=tape[ptr++],IsStartRadiusCCW=tape[ptr++],IsEndRadiusCCW=tape[ptr++],TransitionCurveType=tape[ptr++];return new IfcTransitionCurveSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength,StartRadius,EndRadius,IsStartRadiusCCW,IsEndRadiusCCW,TransitionCurveType)}ToTape(){let args=[];return args.push(this.StartPoint),args.push(this.StartDirection),args.push(this.SegmentLength),args.push(this.StartRadius),args.push(this.EndRadius),args.push(this.IsStartRadiusCCW),args.push(this.IsEndRadiusCCW),args.push(this.TransitionCurveType),args}},IfcTransportElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTransportElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcTransportElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTransportElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcTrapeziumProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,BottomXDim,TopXDim,YDim,TopXOffset){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.BottomXDim=BottomXDim,this.TopXDim=TopXDim,this.YDim=YDim,this.TopXOffset=TopXOffset}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],BottomXDim=tape[ptr++],TopXDim=tape[ptr++],YDim=tape[ptr++],TopXOffset=tape[ptr++];return new IfcTrapeziumProfileDef(expressID,type,ProfileType,ProfileName,Position,BottomXDim,TopXDim,YDim,TopXOffset)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.BottomXDim),args.push(this.TopXDim),args.push(this.YDim),args.push(this.TopXOffset),args}},IfcTriangulatedFaceSet=class{constructor(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex){this.expressID=expressID,this.type=type,this.Coordinates=Coordinates,this.Normals=Normals,this.Closed=Closed,this.CoordIndex=CoordIndex,this.PnIndex=PnIndex}static FromTape(expressID,type,tape){let ptr=0,Coordinates=tape[ptr++],Normals=tape[ptr++],Closed=tape[ptr++],CoordIndex=tape[ptr++],PnIndex=tape[ptr++];return new IfcTriangulatedFaceSet(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex)}ToTape(){let args=[];return args.push(this.Coordinates),args.push(this.Normals),args.push(this.Closed),args.push(this.CoordIndex),args.push(this.PnIndex),args}},IfcTriangulatedIrregularNetwork=class{constructor(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex,Flags){this.expressID=expressID,this.type=type,this.Coordinates=Coordinates,this.Normals=Normals,this.Closed=Closed,this.CoordIndex=CoordIndex,this.PnIndex=PnIndex,this.Flags=Flags}static FromTape(expressID,type,tape){let ptr=0,Coordinates=tape[ptr++],Normals=tape[ptr++],Closed=tape[ptr++],CoordIndex=tape[ptr++],PnIndex=tape[ptr++],Flags=tape[ptr++];return new IfcTriangulatedIrregularNetwork(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex,Flags)}ToTape(){let args=[];return args.push(this.Coordinates),args.push(this.Normals),args.push(this.Closed),args.push(this.CoordIndex),args.push(this.PnIndex),args.push(this.Flags),args}},IfcTrimmedCurve=class{constructor(expressID,type,BasisCurve,Trim1,Trim2,SenseAgreement,MasterRepresentation){this.expressID=expressID,this.type=type,this.BasisCurve=BasisCurve,this.Trim1=Trim1,this.Trim2=Trim2,this.SenseAgreement=SenseAgreement,this.MasterRepresentation=MasterRepresentation}static FromTape(expressID,type,tape){let ptr=0,BasisCurve=tape[ptr++],Trim1=tape[ptr++],Trim2=tape[ptr++],SenseAgreement=tape[ptr++],MasterRepresentation=tape[ptr++];return new IfcTrimmedCurve(expressID,type,BasisCurve,Trim1,Trim2,SenseAgreement,MasterRepresentation)}ToTape(){let args=[];return args.push(this.BasisCurve),args.push(this.Trim1),args.push(this.Trim2),args.push(this.SenseAgreement),args.push(this.MasterRepresentation),args}},IfcTubeBundle=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTubeBundle(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcTubeBundleType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcTubeBundleType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcTypeObject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++];return new IfcTypeObject(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args}},IfcTypeProcess=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ProcessType=ProcessType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ProcessType=tape[ptr++];return new IfcTypeProcess(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ProcessType),args}},IfcTypeProduct=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++];return new IfcTypeProduct(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args}},IfcTypeResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.Identification=Identification,this.LongDescription=LongDescription,this.ResourceType=ResourceType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],Identification=tape[ptr++],LongDescription=tape[ptr++],ResourceType=tape[ptr++];return new IfcTypeResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.Identification),args.push(this.LongDescription),args.push(this.ResourceType),args}},IfcUShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius,FlangeSlope){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.Depth=Depth,this.FlangeWidth=FlangeWidth,this.WebThickness=WebThickness,this.FlangeThickness=FlangeThickness,this.FilletRadius=FilletRadius,this.EdgeRadius=EdgeRadius,this.FlangeSlope=FlangeSlope}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],Depth=tape[ptr++],FlangeWidth=tape[ptr++],WebThickness=tape[ptr++],FlangeThickness=tape[ptr++],FilletRadius=tape[ptr++],EdgeRadius=tape[ptr++],FlangeSlope=tape[ptr++];return new IfcUShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius,FlangeSlope)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.Depth),args.push(this.FlangeWidth),args.push(this.WebThickness),args.push(this.FlangeThickness),args.push(this.FilletRadius),args.push(this.EdgeRadius),args.push(this.FlangeSlope),args}},IfcUnitAssignment=class{constructor(expressID,type,Units){this.expressID=expressID,this.type=type,this.Units=Units}static FromTape(expressID,type,tape){let ptr=0,Units=tape[ptr++];return new IfcUnitAssignment(expressID,type,Units)}ToTape(){let args=[];return args.push(this.Units),args}},IfcUnitaryControlElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcUnitaryControlElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcUnitaryControlElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcUnitaryControlElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcUnitaryEquipment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcUnitaryEquipment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcUnitaryEquipmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcUnitaryEquipmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcValve=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcValve(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcValveType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcValveType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcVector=class{constructor(expressID,type,Orientation,Magnitude){this.expressID=expressID,this.type=type,this.Orientation=Orientation,this.Magnitude=Magnitude}static FromTape(expressID,type,tape){let ptr=0,Orientation=tape[ptr++],Magnitude=tape[ptr++];return new IfcVector(expressID,type,Orientation,Magnitude)}ToTape(){let args=[];return args.push(this.Orientation),args.push(this.Magnitude),args}},IfcVertex=class{constructor(expressID,type){this.expressID=expressID,this.type=type}static FromTape(expressID,type,tape){return new IfcVertex(expressID,type)}ToTape(){return[]}},IfcVertexLoop=class{constructor(expressID,type,LoopVertex){this.expressID=expressID,this.type=type,this.LoopVertex=LoopVertex}static FromTape(expressID,type,tape){let ptr=0,LoopVertex=tape[ptr++];return new IfcVertexLoop(expressID,type,LoopVertex)}ToTape(){let args=[];return args.push(this.LoopVertex),args}},IfcVertexPoint=class{constructor(expressID,type,VertexGeometry){this.expressID=expressID,this.type=type,this.VertexGeometry=VertexGeometry}static FromTape(expressID,type,tape){let ptr=0,VertexGeometry=tape[ptr++];return new IfcVertexPoint(expressID,type,VertexGeometry)}ToTape(){let args=[];return args.push(this.VertexGeometry),args}},IfcVibrationDamper=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcVibrationDamper(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcVibrationDamperType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcVibrationDamperType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcVibrationIsolator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcVibrationIsolator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcVibrationIsolatorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcVibrationIsolatorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcVirtualElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++];return new IfcVirtualElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args}},IfcVirtualGridIntersection=class{constructor(expressID,type,IntersectingAxes,OffsetDistances){this.expressID=expressID,this.type=type,this.IntersectingAxes=IntersectingAxes,this.OffsetDistances=OffsetDistances}static FromTape(expressID,type,tape){let ptr=0,IntersectingAxes=tape[ptr++],OffsetDistances=tape[ptr++];return new IfcVirtualGridIntersection(expressID,type,IntersectingAxes,OffsetDistances)}ToTape(){let args=[];return args.push(this.IntersectingAxes),args.push(this.OffsetDistances),args}},IfcVoidingFeature=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcVoidingFeature(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcWall=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWall(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcWallElementedCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWallElementedCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcWallStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWallStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcWallType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWallType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcWasteTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWasteTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.PredefinedType),args}},IfcWasteTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWasteTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args}},IfcWindow=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.OverallHeight=OverallHeight,this.OverallWidth=OverallWidth,this.PredefinedType=PredefinedType,this.PartitioningType=PartitioningType,this.UserDefinedPartitioningType=UserDefinedPartitioningType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],OverallHeight=tape[ptr++],OverallWidth=tape[ptr++],PredefinedType=tape[ptr++],PartitioningType=tape[ptr++],UserDefinedPartitioningType=tape[ptr++];return new IfcWindow(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.OverallHeight),args.push(this.OverallWidth),args.push(this.PredefinedType),args.push(this.PartitioningType),args.push(this.UserDefinedPartitioningType),args}},IfcWindowLiningProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,TransomThickness,MullionThickness,FirstTransomOffset,SecondTransomOffset,FirstMullionOffset,SecondMullionOffset,ShapeAspectStyle,LiningOffset,LiningToPanelOffsetX,LiningToPanelOffsetY){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.LiningDepth=LiningDepth,this.LiningThickness=LiningThickness,this.TransomThickness=TransomThickness,this.MullionThickness=MullionThickness,this.FirstTransomOffset=FirstTransomOffset,this.SecondTransomOffset=SecondTransomOffset,this.FirstMullionOffset=FirstMullionOffset,this.SecondMullionOffset=SecondMullionOffset,this.ShapeAspectStyle=ShapeAspectStyle,this.LiningOffset=LiningOffset,this.LiningToPanelOffsetX=LiningToPanelOffsetX,this.LiningToPanelOffsetY=LiningToPanelOffsetY}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],LiningDepth=tape[ptr++],LiningThickness=tape[ptr++],TransomThickness=tape[ptr++],MullionThickness=tape[ptr++],FirstTransomOffset=tape[ptr++],SecondTransomOffset=tape[ptr++],FirstMullionOffset=tape[ptr++],SecondMullionOffset=tape[ptr++],ShapeAspectStyle=tape[ptr++],LiningOffset=tape[ptr++],LiningToPanelOffsetX=tape[ptr++],LiningToPanelOffsetY=tape[ptr++];return new IfcWindowLiningProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,TransomThickness,MullionThickness,FirstTransomOffset,SecondTransomOffset,FirstMullionOffset,SecondMullionOffset,ShapeAspectStyle,LiningOffset,LiningToPanelOffsetX,LiningToPanelOffsetY)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.LiningDepth),args.push(this.LiningThickness),args.push(this.TransomThickness),args.push(this.MullionThickness),args.push(this.FirstTransomOffset),args.push(this.SecondTransomOffset),args.push(this.FirstMullionOffset),args.push(this.SecondMullionOffset),args.push(this.ShapeAspectStyle),args.push(this.LiningOffset),args.push(this.LiningToPanelOffsetX),args.push(this.LiningToPanelOffsetY),args}},IfcWindowPanelProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.OperationType=OperationType,this.PanelPosition=PanelPosition,this.FrameDepth=FrameDepth,this.FrameThickness=FrameThickness,this.ShapeAspectStyle=ShapeAspectStyle}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],OperationType=tape[ptr++],PanelPosition=tape[ptr++],FrameDepth=tape[ptr++],FrameThickness=tape[ptr++],ShapeAspectStyle=tape[ptr++];return new IfcWindowPanelProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.OperationType),args.push(this.PanelPosition),args.push(this.FrameDepth),args.push(this.FrameThickness),args.push(this.ShapeAspectStyle),args}},IfcWindowStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.ObjectPlacement=ObjectPlacement,this.Representation=Representation,this.Tag=Tag,this.OverallHeight=OverallHeight,this.OverallWidth=OverallWidth,this.PredefinedType=PredefinedType,this.PartitioningType=PartitioningType,this.UserDefinedPartitioningType=UserDefinedPartitioningType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],ObjectPlacement=tape[ptr++],Representation=tape[ptr++],Tag=tape[ptr++],OverallHeight=tape[ptr++],OverallWidth=tape[ptr++],PredefinedType=tape[ptr++],PartitioningType=tape[ptr++],UserDefinedPartitioningType=tape[ptr++];return new IfcWindowStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.ObjectPlacement),args.push(this.Representation),args.push(this.Tag),args.push(this.OverallHeight),args.push(this.OverallWidth),args.push(this.PredefinedType),args.push(this.PartitioningType),args.push(this.UserDefinedPartitioningType),args}},IfcWindowStyle=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ConstructionType,OperationType,ParameterTakesPrecedence,Sizeable){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ConstructionType=ConstructionType,this.OperationType=OperationType,this.ParameterTakesPrecedence=ParameterTakesPrecedence,this.Sizeable=Sizeable}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ConstructionType=tape[ptr++],OperationType=tape[ptr++],ParameterTakesPrecedence=tape[ptr++],Sizeable=tape[ptr++];return new IfcWindowStyle(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ConstructionType,OperationType,ParameterTakesPrecedence,Sizeable)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ConstructionType),args.push(this.OperationType),args.push(this.ParameterTakesPrecedence),args.push(this.Sizeable),args}},IfcWindowType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,PartitioningType,ParameterTakesPrecedence,UserDefinedPartitioningType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ApplicableOccurrence=ApplicableOccurrence,this.HasPropertySets=HasPropertySets,this.RepresentationMaps=RepresentationMaps,this.Tag=Tag,this.ElementType=ElementType,this.PredefinedType=PredefinedType,this.PartitioningType=PartitioningType,this.ParameterTakesPrecedence=ParameterTakesPrecedence,this.UserDefinedPartitioningType=UserDefinedPartitioningType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ApplicableOccurrence=tape[ptr++],HasPropertySets=tape[ptr++],RepresentationMaps=tape[ptr++],Tag=tape[ptr++],ElementType=tape[ptr++],PredefinedType=tape[ptr++],PartitioningType=tape[ptr++],ParameterTakesPrecedence=tape[ptr++],UserDefinedPartitioningType=tape[ptr++];return new IfcWindowType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,PartitioningType,ParameterTakesPrecedence,UserDefinedPartitioningType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ApplicableOccurrence),args.push(this.HasPropertySets),args.push(this.RepresentationMaps),args.push(this.Tag),args.push(this.ElementType),args.push(this.PredefinedType),args.push(this.PartitioningType),args.push(this.ParameterTakesPrecedence),args.push(this.UserDefinedPartitioningType),args}},IfcWorkCalendar=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,WorkingTimes,ExceptionTimes,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.WorkingTimes=WorkingTimes,this.ExceptionTimes=ExceptionTimes,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],WorkingTimes=tape[ptr++],ExceptionTimes=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWorkCalendar(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,WorkingTimes,ExceptionTimes,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.WorkingTimes),args.push(this.ExceptionTimes),args.push(this.PredefinedType),args}},IfcWorkControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.CreationDate=CreationDate,this.Creators=Creators,this.Purpose=Purpose,this.Duration=Duration,this.TotalFloat=TotalFloat,this.StartTime=StartTime,this.FinishTime=FinishTime}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],CreationDate=tape[ptr++],Creators=tape[ptr++],Purpose=tape[ptr++],Duration=tape[ptr++],TotalFloat=tape[ptr++],StartTime=tape[ptr++],FinishTime=tape[ptr++];return new IfcWorkControl(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.CreationDate),args.push(this.Creators),args.push(this.Purpose),args.push(this.Duration),args.push(this.TotalFloat),args.push(this.StartTime),args.push(this.FinishTime),args}},IfcWorkPlan=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.CreationDate=CreationDate,this.Creators=Creators,this.Purpose=Purpose,this.Duration=Duration,this.TotalFloat=TotalFloat,this.StartTime=StartTime,this.FinishTime=FinishTime,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],CreationDate=tape[ptr++],Creators=tape[ptr++],Purpose=tape[ptr++],Duration=tape[ptr++],TotalFloat=tape[ptr++],StartTime=tape[ptr++],FinishTime=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWorkPlan(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.CreationDate),args.push(this.Creators),args.push(this.Purpose),args.push(this.Duration),args.push(this.TotalFloat),args.push(this.StartTime),args.push(this.FinishTime),args.push(this.PredefinedType),args}},IfcWorkSchedule=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.Identification=Identification,this.CreationDate=CreationDate,this.Creators=Creators,this.Purpose=Purpose,this.Duration=Duration,this.TotalFloat=TotalFloat,this.StartTime=StartTime,this.FinishTime=FinishTime,this.PredefinedType=PredefinedType}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],Identification=tape[ptr++],CreationDate=tape[ptr++],Creators=tape[ptr++],Purpose=tape[ptr++],Duration=tape[ptr++],TotalFloat=tape[ptr++],StartTime=tape[ptr++],FinishTime=tape[ptr++],PredefinedType=tape[ptr++];return new IfcWorkSchedule(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.Identification),args.push(this.CreationDate),args.push(this.Creators),args.push(this.Purpose),args.push(this.Duration),args.push(this.TotalFloat),args.push(this.StartTime),args.push(this.FinishTime),args.push(this.PredefinedType),args}},IfcWorkTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,RecurrencePattern,Start,Finish){this.expressID=expressID,this.type=type,this.Name=Name,this.DataOrigin=DataOrigin,this.UserDefinedDataOrigin=UserDefinedDataOrigin,this.RecurrencePattern=RecurrencePattern,this.Start=Start,this.Finish=Finish}static FromTape(expressID,type,tape){let ptr=0,Name=tape[ptr++],DataOrigin=tape[ptr++],UserDefinedDataOrigin=tape[ptr++],RecurrencePattern=tape[ptr++],Start=tape[ptr++],Finish=tape[ptr++];return new IfcWorkTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,RecurrencePattern,Start,Finish)}ToTape(){let args=[];return args.push(this.Name),args.push(this.DataOrigin),args.push(this.UserDefinedDataOrigin),args.push(this.RecurrencePattern),args.push(this.Start),args.push(this.Finish),args}},IfcZShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius){this.expressID=expressID,this.type=type,this.ProfileType=ProfileType,this.ProfileName=ProfileName,this.Position=Position,this.Depth=Depth,this.FlangeWidth=FlangeWidth,this.WebThickness=WebThickness,this.FlangeThickness=FlangeThickness,this.FilletRadius=FilletRadius,this.EdgeRadius=EdgeRadius}static FromTape(expressID,type,tape){let ptr=0,ProfileType=tape[ptr++],ProfileName=tape[ptr++],Position=tape[ptr++],Depth=tape[ptr++],FlangeWidth=tape[ptr++],WebThickness=tape[ptr++],FlangeThickness=tape[ptr++],FilletRadius=tape[ptr++],EdgeRadius=tape[ptr++];return new IfcZShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius)}ToTape(){let args=[];return args.push(this.ProfileType),args.push(this.ProfileName),args.push(this.Position),args.push(this.Depth),args.push(this.FlangeWidth),args.push(this.WebThickness),args.push(this.FlangeThickness),args.push(this.FilletRadius),args.push(this.EdgeRadius),args}},IfcZone=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName){this.expressID=expressID,this.type=type,this.GlobalId=GlobalId,this.OwnerHistory=OwnerHistory,this.Name=Name,this.Description=Description,this.ObjectType=ObjectType,this.LongName=LongName}static FromTape(expressID,type,tape){let ptr=0,GlobalId=tape[ptr++],OwnerHistory=tape[ptr++],Name=tape[ptr++],Description=tape[ptr++],ObjectType=tape[ptr++],LongName=tape[ptr++];return new IfcZone(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName)}ToTape(){let args=[];return args.push(this.GlobalId),args.push(this.OwnerHistory),args.push(this.Name),args.push(this.Description),args.push(this.ObjectType),args.push(this.LongName),args}},IfcElements2={103090709:"IFCPROJECT",4097777520:"IFCSITE",4031249490:"IFCBUILDING",3124254112:"IFCBUILDINGSTOREY",3856911033:"IFCSPACE",1674181508:"IFCANNOTATION",25142252:"IFCCONTROLLER",32344328:"IFCBOILER",76236018:"IFCLAMP",90941305:"IFCPUMP",177149247:"IFCAIRTERMINALBOX",182646315:"IFCFLOWINSTRUMENT",263784265:"IFCFURNISHINGELEMENT",264262732:"IFCELECTRICGENERATOR",277319702:"IFCAUDIOVISUALAPPLIANCE",310824031:"IFCPIPEFITTING",331165859:"IFCSTAIR",342316401:"IFCDUCTFITTING",377706215:"IFCMECHANICALFASTENER",395920057:"IFCDOOR",402227799:"IFCELECTRICMOTOR",413509423:"IFCSYSTEMFURNITUREELEMENT",484807127:"IFCEVAPORATOR",486154966:"IFCWINDOWSTANDARDCASE",629592764:"IFCLIGHTFIXTURE",630975310:"IFCUNITARYCONTROLELEMENT",635142910:"IFCCABLECARRIERFITTING",639361253:"IFCCOIL",647756555:"IFCFASTENER",707683696:"IFCFLOWSTORAGEDEVICE",738039164:"IFCPROTECTIVEDEVICE",753842376:"IFCBEAM",812556717:"IFCTANK",819412036:"IFCFILTER",843113511:"IFCCOLUMN",862014818:"IFCELECTRICDISTRIBUTIONBOARD",900683007:"IFCFOOTING",905975707:"IFCCOLUMNSTANDARDCASE",926996030:"IFCVOIDINGFEATURE",979691226:"IFCREINFORCINGBAR",987401354:"IFCFLOWSEGMENT",1003880860:"IFCELECTRICTIMECONTROL",1051757585:"IFCCABLEFITTING",1052013943:"IFCDISTRIBUTIONCHAMBERELEMENT",1062813311:"IFCDISTRIBUTIONCONTROLELEMENT",1073191201:"IFCMEMBER",1095909175:"IFCBUILDINGELEMENTPROXY",1156407060:"IFCPLATESTANDARDCASE",1162798199:"IFCSWITCHINGDEVICE",1329646415:"IFCSHADINGDEVICE",1335981549:"IFCDISCRETEACCESSORY",1360408905:"IFCDUCTSILENCER",1404847402:"IFCSTACKTERMINAL",1426591983:"IFCFIRESUPPRESSIONTERMINAL",1437502449:"IFCMEDICALDEVICE",1509553395:"IFCFURNITURE",1529196076:"IFCSLAB",1620046519:"IFCTRANSPORTELEMENT",1634111441:"IFCAIRTERMINAL",1658829314:"IFCENERGYCONVERSIONDEVICE",1677625105:"IFCCIVILELEMENT",1687234759:"IFCPILE",1904799276:"IFCELECTRICAPPLIANCE",1911478936:"IFCMEMBERSTANDARDCASE",1945004755:"IFCDISTRIBUTIONELEMENT",1973544240:"IFCCOVERING",1999602285:"IFCSPACEHEATER",2016517767:"IFCROOF",2056796094:"IFCAIRTOAIRHEATRECOVERY",2058353004:"IFCFLOWCONTROLLER",2068733104:"IFCHUMIDIFIER",2176052936:"IFCJUNCTIONBOX",2188021234:"IFCFLOWMETER",2223149337:"IFCFLOWTERMINAL",2262370178:"IFCRAILING",2272882330:"IFCCONDENSER",2295281155:"IFCPROTECTIVEDEVICETRIPPINGUNIT",2320036040:"IFCREINFORCINGMESH",2347447852:"IFCTENDONANCHOR",2391383451:"IFCVIBRATIONISOLATOR",2391406946:"IFCWALL",2474470126:"IFCMOTORCONNECTION",2769231204:"IFCVIRTUALELEMENT",2814081492:"IFCENGINE",2906023776:"IFCBEAMSTANDARDCASE",2938176219:"IFCBURNER",2979338954:"IFCBUILDINGELEMENTPART",3024970846:"IFCRAMP",3026737570:"IFCTUBEBUNDLE",3027962421:"IFCSLABSTANDARDCASE",3040386961:"IFCDISTRIBUTIONFLOWELEMENT",3053780830:"IFCSANITARYTERMINAL",3079942009:"IFCOPENINGSTANDARDCASE",3087945054:"IFCALARM",3101698114:"IFCSURFACEFEATURE",3127900445:"IFCSLABELEMENTEDCASE",3132237377:"IFCFLOWMOVINGDEVICE",3171933400:"IFCPLATE",3221913625:"IFCCOMMUNICATIONSAPPLIANCE",3242481149:"IFCDOORSTANDARDCASE",3283111854:"IFCRAMPFLIGHT",3296154744:"IFCCHIMNEY",3304561284:"IFCWINDOW",3310460725:"IFCELECTRICFLOWSTORAGEDEVICE",3319311131:"IFCHEATEXCHANGER",3415622556:"IFCFAN",3420628829:"IFCSOLARDEVICE",3493046030:"IFCGEOGRAPHICELEMENT",3495092785:"IFCCURTAINWALL",3508470533:"IFCFLOWTREATMENTDEVICE",3512223829:"IFCWALLSTANDARDCASE",3518393246:"IFCDUCTSEGMENT",3571504051:"IFCCOMPRESSOR",3588315303:"IFCOPENINGELEMENT",3612865200:"IFCPIPESEGMENT",3640358203:"IFCCOOLINGTOWER",3651124850:"IFCPROJECTIONELEMENT",3694346114:"IFCOUTLET",3747195512:"IFCEVAPORATIVECOOLER",3758799889:"IFCCABLECARRIERSEGMENT",3824725483:"IFCTENDON",3825984169:"IFCTRANSFORMER",3902619387:"IFCCHILLER",4074379575:"IFCDAMPER",4086658281:"IFCSENSOR",4123344466:"IFCELEMENTASSEMBLY",4136498852:"IFCCOOLEDBEAM",4156078855:"IFCWALLELEMENTEDCASE",4175244083:"IFCINTERCEPTOR",4207607924:"IFCVALVE",4217484030:"IFCCABLESEGMENT",4237592921:"IFCWASTETERMINAL",4252922144:"IFCSTAIRFLIGHT",4278956645:"IFCFLOWFITTING",4288193352:"IFCACTUATOR",4292641817:"IFCUNITARYEQUIPMENT",3009204131:"IFCGRID"},IfcTypesMap={3821786052:"IFCACTIONREQUEST",2296667514:"IFCACTOR",3630933823:"IFCACTORROLE",4288193352:"IFCACTUATOR",2874132201:"IFCACTUATORTYPE",618182010:"IFCADDRESS",1635779807:"IFCADVANCEDBREP",2603310189:"IFCADVANCEDBREPWITHVOIDS",3406155212:"IFCADVANCEDFACE",1634111441:"IFCAIRTERMINAL",177149247:"IFCAIRTERMINALBOX",1411407467:"IFCAIRTERMINALBOXTYPE",3352864051:"IFCAIRTERMINALTYPE",2056796094:"IFCAIRTOAIRHEATRECOVERY",1871374353:"IFCAIRTOAIRHEATRECOVERYTYPE",3087945054:"IFCALARM",3001207471:"IFCALARMTYPE",325726236:"IFCALIGNMENT",749761778:"IFCALIGNMENT2DHORIZONTAL",3199563722:"IFCALIGNMENT2DHORIZONTALSEGMENT",2483840362:"IFCALIGNMENT2DSEGMENT",3379348081:"IFCALIGNMENT2DVERSEGCIRCULARARC",3239324667:"IFCALIGNMENT2DVERSEGLINE",4263986512:"IFCALIGNMENT2DVERSEGPARABOLICARC",53199957:"IFCALIGNMENT2DVERTICAL",2029264950:"IFCALIGNMENT2DVERTICALSEGMENT",3512275521:"IFCALIGNMENTCURVE",1674181508:"IFCANNOTATION",669184980:"IFCANNOTATIONFILLAREA",639542469:"IFCAPPLICATION",411424972:"IFCAPPLIEDVALUE",130549933:"IFCAPPROVAL",3869604511:"IFCAPPROVALRELATIONSHIP",3798115385:"IFCARBITRARYCLOSEDPROFILEDEF",1310608509:"IFCARBITRARYOPENPROFILEDEF",2705031697:"IFCARBITRARYPROFILEDEFWITHVOIDS",3460190687:"IFCASSET",3207858831:"IFCASYMMETRICISHAPEPROFILEDEF",277319702:"IFCAUDIOVISUALAPPLIANCE",1532957894:"IFCAUDIOVISUALAPPLIANCETYPE",4261334040:"IFCAXIS1PLACEMENT",3125803723:"IFCAXIS2PLACEMENT2D",2740243338:"IFCAXIS2PLACEMENT3D",1967976161:"IFCBSPLINECURVE",2461110595:"IFCBSPLINECURVEWITHKNOTS",2887950389:"IFCBSPLINESURFACE",167062518:"IFCBSPLINESURFACEWITHKNOTS",753842376:"IFCBEAM",2906023776:"IFCBEAMSTANDARDCASE",819618141:"IFCBEAMTYPE",4196446775:"IFCBEARING",3649138523:"IFCBEARINGTYPE",616511568:"IFCBLOBTEXTURE",1334484129:"IFCBLOCK",32344328:"IFCBOILER",231477066:"IFCBOILERTYPE",3649129432:"IFCBOOLEANCLIPPINGRESULT",2736907675:"IFCBOOLEANRESULT",4037036970:"IFCBOUNDARYCONDITION",1136057603:"IFCBOUNDARYCURVE",1560379544:"IFCBOUNDARYEDGECONDITION",3367102660:"IFCBOUNDARYFACECONDITION",1387855156:"IFCBOUNDARYNODECONDITION",2069777674:"IFCBOUNDARYNODECONDITIONWARPING",1260505505:"IFCBOUNDEDCURVE",4182860854:"IFCBOUNDEDSURFACE",2581212453:"IFCBOUNDINGBOX",2713105998:"IFCBOXEDHALFSPACE",644574406:"IFCBRIDGE",963979645:"IFCBRIDGEPART",4031249490:"IFCBUILDING",3299480353:"IFCBUILDINGELEMENT",2979338954:"IFCBUILDINGELEMENTPART",39481116:"IFCBUILDINGELEMENTPARTTYPE",1095909175:"IFCBUILDINGELEMENTPROXY",1909888760:"IFCBUILDINGELEMENTPROXYTYPE",1950629157:"IFCBUILDINGELEMENTTYPE",3124254112:"IFCBUILDINGSTOREY",1177604601:"IFCBUILDINGSYSTEM",2938176219:"IFCBURNER",2188180465:"IFCBURNERTYPE",2898889636:"IFCCSHAPEPROFILEDEF",635142910:"IFCCABLECARRIERFITTING",395041908:"IFCCABLECARRIERFITTINGTYPE",3758799889:"IFCCABLECARRIERSEGMENT",3293546465:"IFCCABLECARRIERSEGMENTTYPE",1051757585:"IFCCABLEFITTING",2674252688:"IFCCABLEFITTINGTYPE",4217484030:"IFCCABLESEGMENT",1285652485:"IFCCABLESEGMENTTYPE",3999819293:"IFCCAISSONFOUNDATION",3203706013:"IFCCAISSONFOUNDATIONTYPE",1123145078:"IFCCARTESIANPOINT",574549367:"IFCCARTESIANPOINTLIST",1675464909:"IFCCARTESIANPOINTLIST2D",2059837836:"IFCCARTESIANPOINTLIST3D",59481748:"IFCCARTESIANTRANSFORMATIONOPERATOR",3749851601:"IFCCARTESIANTRANSFORMATIONOPERATOR2D",3486308946:"IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM",3331915920:"IFCCARTESIANTRANSFORMATIONOPERATOR3D",1416205885:"IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM",3150382593:"IFCCENTERLINEPROFILEDEF",3902619387:"IFCCHILLER",2951183804:"IFCCHILLERTYPE",3296154744:"IFCCHIMNEY",2197970202:"IFCCHIMNEYTYPE",2611217952:"IFCCIRCLE",2937912522:"IFCCIRCLEHOLLOWPROFILEDEF",1383045692:"IFCCIRCLEPROFILEDEF",1062206242:"IFCCIRCULARARCSEGMENT2D",1677625105:"IFCCIVILELEMENT",3893394355:"IFCCIVILELEMENTTYPE",747523909:"IFCCLASSIFICATION",647927063:"IFCCLASSIFICATIONREFERENCE",2205249479:"IFCCLOSEDSHELL",639361253:"IFCCOIL",2301859152:"IFCCOILTYPE",776857604:"IFCCOLOURRGB",3285139300:"IFCCOLOURRGBLIST",3264961684:"IFCCOLOURSPECIFICATION",843113511:"IFCCOLUMN",905975707:"IFCCOLUMNSTANDARDCASE",300633059:"IFCCOLUMNTYPE",3221913625:"IFCCOMMUNICATIONSAPPLIANCE",400855858:"IFCCOMMUNICATIONSAPPLIANCETYPE",2542286263:"IFCCOMPLEXPROPERTY",3875453745:"IFCCOMPLEXPROPERTYTEMPLATE",3732776249:"IFCCOMPOSITECURVE",15328376:"IFCCOMPOSITECURVEONSURFACE",2485617015:"IFCCOMPOSITECURVESEGMENT",1485152156:"IFCCOMPOSITEPROFILEDEF",3571504051:"IFCCOMPRESSOR",3850581409:"IFCCOMPRESSORTYPE",2272882330:"IFCCONDENSER",2816379211:"IFCCONDENSERTYPE",2510884976:"IFCCONIC",370225590:"IFCCONNECTEDFACESET",1981873012:"IFCCONNECTIONCURVEGEOMETRY",2859738748:"IFCCONNECTIONGEOMETRY",45288368:"IFCCONNECTIONPOINTECCENTRICITY",2614616156:"IFCCONNECTIONPOINTGEOMETRY",2732653382:"IFCCONNECTIONSURFACEGEOMETRY",775493141:"IFCCONNECTIONVOLUMEGEOMETRY",1959218052:"IFCCONSTRAINT",3898045240:"IFCCONSTRUCTIONEQUIPMENTRESOURCE",2185764099:"IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE",1060000209:"IFCCONSTRUCTIONMATERIALRESOURCE",4105962743:"IFCCONSTRUCTIONMATERIALRESOURCETYPE",488727124:"IFCCONSTRUCTIONPRODUCTRESOURCE",1525564444:"IFCCONSTRUCTIONPRODUCTRESOURCETYPE",2559216714:"IFCCONSTRUCTIONRESOURCE",2574617495:"IFCCONSTRUCTIONRESOURCETYPE",3419103109:"IFCCONTEXT",3050246964:"IFCCONTEXTDEPENDENTUNIT",3293443760:"IFCCONTROL",25142252:"IFCCONTROLLER",578613899:"IFCCONTROLLERTYPE",2889183280:"IFCCONVERSIONBASEDUNIT",2713554722:"IFCCONVERSIONBASEDUNITWITHOFFSET",4136498852:"IFCCOOLEDBEAM",335055490:"IFCCOOLEDBEAMTYPE",3640358203:"IFCCOOLINGTOWER",2954562838:"IFCCOOLINGTOWERTYPE",1785450214:"IFCCOORDINATEOPERATION",1466758467:"IFCCOORDINATEREFERENCESYSTEM",3895139033:"IFCCOSTITEM",1419761937:"IFCCOSTSCHEDULE",602808272:"IFCCOSTVALUE",1973544240:"IFCCOVERING",1916426348:"IFCCOVERINGTYPE",3295246426:"IFCCREWRESOURCE",1815067380:"IFCCREWRESOURCETYPE",2506170314:"IFCCSGPRIMITIVE3D",2147822146:"IFCCSGSOLID",539742890:"IFCCURRENCYRELATIONSHIP",3495092785:"IFCCURTAINWALL",1457835157:"IFCCURTAINWALLTYPE",2601014836:"IFCCURVE",2827736869:"IFCCURVEBOUNDEDPLANE",2629017746:"IFCCURVEBOUNDEDSURFACE",1186437898:"IFCCURVESEGMENT2D",3800577675:"IFCCURVESTYLE",1105321065:"IFCCURVESTYLEFONT",2367409068:"IFCCURVESTYLEFONTANDSCALING",3510044353:"IFCCURVESTYLEFONTPATTERN",1213902940:"IFCCYLINDRICALSURFACE",4074379575:"IFCDAMPER",3961806047:"IFCDAMPERTYPE",3426335179:"IFCDEEPFOUNDATION",1306400036:"IFCDEEPFOUNDATIONTYPE",3632507154:"IFCDERIVEDPROFILEDEF",1765591967:"IFCDERIVEDUNIT",1045800335:"IFCDERIVEDUNITELEMENT",2949456006:"IFCDIMENSIONALEXPONENTS",32440307:"IFCDIRECTION",1335981549:"IFCDISCRETEACCESSORY",2635815018:"IFCDISCRETEACCESSORYTYPE",1945343521:"IFCDISTANCEEXPRESSION",1052013943:"IFCDISTRIBUTIONCHAMBERELEMENT",1599208980:"IFCDISTRIBUTIONCHAMBERELEMENTTYPE",562808652:"IFCDISTRIBUTIONCIRCUIT",1062813311:"IFCDISTRIBUTIONCONTROLELEMENT",2063403501:"IFCDISTRIBUTIONCONTROLELEMENTTYPE",1945004755:"IFCDISTRIBUTIONELEMENT",3256556792:"IFCDISTRIBUTIONELEMENTTYPE",3040386961:"IFCDISTRIBUTIONFLOWELEMENT",3849074793:"IFCDISTRIBUTIONFLOWELEMENTTYPE",3041715199:"IFCDISTRIBUTIONPORT",3205830791:"IFCDISTRIBUTIONSYSTEM",1154170062:"IFCDOCUMENTINFORMATION",770865208:"IFCDOCUMENTINFORMATIONRELATIONSHIP",3732053477:"IFCDOCUMENTREFERENCE",395920057:"IFCDOOR",2963535650:"IFCDOORLININGPROPERTIES",1714330368:"IFCDOORPANELPROPERTIES",3242481149:"IFCDOORSTANDARDCASE",526551008:"IFCDOORSTYLE",2323601079:"IFCDOORTYPE",445594917:"IFCDRAUGHTINGPREDEFINEDCOLOUR",4006246654:"IFCDRAUGHTINGPREDEFINEDCURVEFONT",342316401:"IFCDUCTFITTING",869906466:"IFCDUCTFITTINGTYPE",3518393246:"IFCDUCTSEGMENT",3760055223:"IFCDUCTSEGMENTTYPE",1360408905:"IFCDUCTSILENCER",2030761528:"IFCDUCTSILENCERTYPE",3900360178:"IFCEDGE",476780140:"IFCEDGECURVE",1472233963:"IFCEDGELOOP",1904799276:"IFCELECTRICAPPLIANCE",663422040:"IFCELECTRICAPPLIANCETYPE",862014818:"IFCELECTRICDISTRIBUTIONBOARD",2417008758:"IFCELECTRICDISTRIBUTIONBOARDTYPE",3310460725:"IFCELECTRICFLOWSTORAGEDEVICE",3277789161:"IFCELECTRICFLOWSTORAGEDEVICETYPE",264262732:"IFCELECTRICGENERATOR",1534661035:"IFCELECTRICGENERATORTYPE",402227799:"IFCELECTRICMOTOR",1217240411:"IFCELECTRICMOTORTYPE",1003880860:"IFCELECTRICTIMECONTROL",712377611:"IFCELECTRICTIMECONTROLTYPE",1758889154:"IFCELEMENT",4123344466:"IFCELEMENTASSEMBLY",2397081782:"IFCELEMENTASSEMBLYTYPE",1623761950:"IFCELEMENTCOMPONENT",2590856083:"IFCELEMENTCOMPONENTTYPE",1883228015:"IFCELEMENTQUANTITY",339256511:"IFCELEMENTTYPE",2777663545:"IFCELEMENTARYSURFACE",1704287377:"IFCELLIPSE",2835456948:"IFCELLIPSEPROFILEDEF",1658829314:"IFCENERGYCONVERSIONDEVICE",2107101300:"IFCENERGYCONVERSIONDEVICETYPE",2814081492:"IFCENGINE",132023988:"IFCENGINETYPE",3747195512:"IFCEVAPORATIVECOOLER",3174744832:"IFCEVAPORATIVECOOLERTYPE",484807127:"IFCEVAPORATOR",3390157468:"IFCEVAPORATORTYPE",4148101412:"IFCEVENT",211053100:"IFCEVENTTIME",4024345920:"IFCEVENTTYPE",297599258:"IFCEXTENDEDPROPERTIES",4294318154:"IFCEXTERNALINFORMATION",3200245327:"IFCEXTERNALREFERENCE",1437805879:"IFCEXTERNALREFERENCERELATIONSHIP",1209101575:"IFCEXTERNALSPATIALELEMENT",2853485674:"IFCEXTERNALSPATIALSTRUCTUREELEMENT",2242383968:"IFCEXTERNALLYDEFINEDHATCHSTYLE",1040185647:"IFCEXTERNALLYDEFINEDSURFACESTYLE",3548104201:"IFCEXTERNALLYDEFINEDTEXTFONT",477187591:"IFCEXTRUDEDAREASOLID",2804161546:"IFCEXTRUDEDAREASOLIDTAPERED",2556980723:"IFCFACE",2047409740:"IFCFACEBASEDSURFACEMODEL",1809719519:"IFCFACEBOUND",803316827:"IFCFACEOUTERBOUND",3008276851:"IFCFACESURFACE",807026263:"IFCFACETEDBREP",3737207727:"IFCFACETEDBREPWITHVOIDS",24185140:"IFCFACILITY",1310830890:"IFCFACILITYPART",4219587988:"IFCFAILURECONNECTIONCONDITION",3415622556:"IFCFAN",346874300:"IFCFANTYPE",647756555:"IFCFASTENER",2489546625:"IFCFASTENERTYPE",2827207264:"IFCFEATUREELEMENT",2143335405:"IFCFEATUREELEMENTADDITION",1287392070:"IFCFEATUREELEMENTSUBTRACTION",738692330:"IFCFILLAREASTYLE",374418227:"IFCFILLAREASTYLEHATCHING",315944413:"IFCFILLAREASTYLETILES",819412036:"IFCFILTER",1810631287:"IFCFILTERTYPE",1426591983:"IFCFIRESUPPRESSIONTERMINAL",4222183408:"IFCFIRESUPPRESSIONTERMINALTYPE",2652556860:"IFCFIXEDREFERENCESWEPTAREASOLID",2058353004:"IFCFLOWCONTROLLER",3907093117:"IFCFLOWCONTROLLERTYPE",4278956645:"IFCFLOWFITTING",3198132628:"IFCFLOWFITTINGTYPE",182646315:"IFCFLOWINSTRUMENT",4037862832:"IFCFLOWINSTRUMENTTYPE",2188021234:"IFCFLOWMETER",3815607619:"IFCFLOWMETERTYPE",3132237377:"IFCFLOWMOVINGDEVICE",1482959167:"IFCFLOWMOVINGDEVICETYPE",987401354:"IFCFLOWSEGMENT",1834744321:"IFCFLOWSEGMENTTYPE",707683696:"IFCFLOWSTORAGEDEVICE",1339347760:"IFCFLOWSTORAGEDEVICETYPE",2223149337:"IFCFLOWTERMINAL",2297155007:"IFCFLOWTERMINALTYPE",3508470533:"IFCFLOWTREATMENTDEVICE",3009222698:"IFCFLOWTREATMENTDEVICETYPE",900683007:"IFCFOOTING",1893162501:"IFCFOOTINGTYPE",263784265:"IFCFURNISHINGELEMENT",4238390223:"IFCFURNISHINGELEMENTTYPE",1509553395:"IFCFURNITURE",1268542332:"IFCFURNITURETYPE",3493046030:"IFCGEOGRAPHICELEMENT",4095422895:"IFCGEOGRAPHICELEMENTTYPE",987898635:"IFCGEOMETRICCURVESET",3448662350:"IFCGEOMETRICREPRESENTATIONCONTEXT",2453401579:"IFCGEOMETRICREPRESENTATIONITEM",4142052618:"IFCGEOMETRICREPRESENTATIONSUBCONTEXT",3590301190:"IFCGEOMETRICSET",3009204131:"IFCGRID",852622518:"IFCGRIDAXIS",178086475:"IFCGRIDPLACEMENT",2706460486:"IFCGROUP",812098782:"IFCHALFSPACESOLID",3319311131:"IFCHEATEXCHANGER",1251058090:"IFCHEATEXCHANGERTYPE",2068733104:"IFCHUMIDIFIER",1806887404:"IFCHUMIDIFIERTYPE",1484403080:"IFCISHAPEPROFILEDEF",3905492369:"IFCIMAGETEXTURE",3570813810:"IFCINDEXEDCOLOURMAP",2571569899:"IFCINDEXEDPOLYCURVE",178912537:"IFCINDEXEDPOLYGONALFACE",2294589976:"IFCINDEXEDPOLYGONALFACEWITHVOIDS",1437953363:"IFCINDEXEDTEXTUREMAP",2133299955:"IFCINDEXEDTRIANGLETEXTUREMAP",4175244083:"IFCINTERCEPTOR",3946677679:"IFCINTERCEPTORTYPE",3113134337:"IFCINTERSECTIONCURVE",2391368822:"IFCINVENTORY",3741457305:"IFCIRREGULARTIMESERIES",3020489413:"IFCIRREGULARTIMESERIESVALUE",2176052936:"IFCJUNCTIONBOX",4288270099:"IFCJUNCTIONBOXTYPE",572779678:"IFCLSHAPEPROFILEDEF",3827777499:"IFCLABORRESOURCE",428585644:"IFCLABORRESOURCETYPE",1585845231:"IFCLAGTIME",76236018:"IFCLAMP",1051575348:"IFCLAMPTYPE",2655187982:"IFCLIBRARYINFORMATION",3452421091:"IFCLIBRARYREFERENCE",4162380809:"IFCLIGHTDISTRIBUTIONDATA",629592764:"IFCLIGHTFIXTURE",1161773419:"IFCLIGHTFIXTURETYPE",1566485204:"IFCLIGHTINTENSITYDISTRIBUTION",1402838566:"IFCLIGHTSOURCE",125510826:"IFCLIGHTSOURCEAMBIENT",2604431987:"IFCLIGHTSOURCEDIRECTIONAL",4266656042:"IFCLIGHTSOURCEGONIOMETRIC",1520743889:"IFCLIGHTSOURCEPOSITIONAL",3422422726:"IFCLIGHTSOURCESPOT",1281925730:"IFCLINE",3092502836:"IFCLINESEGMENT2D",388784114:"IFCLINEARPLACEMENT",1154579445:"IFCLINEARPOSITIONINGELEMENT",2624227202:"IFCLOCALPLACEMENT",1008929658:"IFCLOOP",1425443689:"IFCMANIFOLDSOLIDBREP",3057273783:"IFCMAPCONVERSION",2347385850:"IFCMAPPEDITEM",1838606355:"IFCMATERIAL",1847130766:"IFCMATERIALCLASSIFICATIONRELATIONSHIP",3708119e3:"IFCMATERIALCONSTITUENT",2852063980:"IFCMATERIALCONSTITUENTSET",760658860:"IFCMATERIALDEFINITION",2022407955:"IFCMATERIALDEFINITIONREPRESENTATION",248100487:"IFCMATERIALLAYER",3303938423:"IFCMATERIALLAYERSET",1303795690:"IFCMATERIALLAYERSETUSAGE",1847252529:"IFCMATERIALLAYERWITHOFFSETS",2199411900:"IFCMATERIALLIST",2235152071:"IFCMATERIALPROFILE",164193824:"IFCMATERIALPROFILESET",3079605661:"IFCMATERIALPROFILESETUSAGE",3404854881:"IFCMATERIALPROFILESETUSAGETAPERING",552965576:"IFCMATERIALPROFILEWITHOFFSETS",3265635763:"IFCMATERIALPROPERTIES",853536259:"IFCMATERIALRELATIONSHIP",1507914824:"IFCMATERIALUSAGEDEFINITION",2597039031:"IFCMEASUREWITHUNIT",377706215:"IFCMECHANICALFASTENER",2108223431:"IFCMECHANICALFASTENERTYPE",1437502449:"IFCMEDICALDEVICE",1114901282:"IFCMEDICALDEVICETYPE",1073191201:"IFCMEMBER",1911478936:"IFCMEMBERSTANDARDCASE",3181161470:"IFCMEMBERTYPE",3368373690:"IFCMETRIC",2998442950:"IFCMIRROREDPROFILEDEF",2706619895:"IFCMONETARYUNIT",2474470126:"IFCMOTORCONNECTION",977012517:"IFCMOTORCONNECTIONTYPE",1918398963:"IFCNAMEDUNIT",3888040117:"IFCOBJECT",219451334:"IFCOBJECTDEFINITION",3701648758:"IFCOBJECTPLACEMENT",2251480897:"IFCOBJECTIVE",4143007308:"IFCOCCUPANT",590820931:"IFCOFFSETCURVE",3388369263:"IFCOFFSETCURVE2D",3505215534:"IFCOFFSETCURVE3D",2485787929:"IFCOFFSETCURVEBYDISTANCES",2665983363:"IFCOPENSHELL",3588315303:"IFCOPENINGELEMENT",3079942009:"IFCOPENINGSTANDARDCASE",4251960020:"IFCORGANIZATION",1411181986:"IFCORGANIZATIONRELATIONSHIP",643959842:"IFCORIENTATIONEXPRESSION",1029017970:"IFCORIENTEDEDGE",144952367:"IFCOUTERBOUNDARYCURVE",3694346114:"IFCOUTLET",2837617999:"IFCOUTLETTYPE",1207048766:"IFCOWNERHISTORY",2529465313:"IFCPARAMETERIZEDPROFILEDEF",2519244187:"IFCPATH",1682466193:"IFCPCURVE",2382730787:"IFCPERFORMANCEHISTORY",3566463478:"IFCPERMEABLECOVERINGPROPERTIES",3327091369:"IFCPERMIT",2077209135:"IFCPERSON",101040310:"IFCPERSONANDORGANIZATION",3021840470:"IFCPHYSICALCOMPLEXQUANTITY",2483315170:"IFCPHYSICALQUANTITY",2226359599:"IFCPHYSICALSIMPLEQUANTITY",1687234759:"IFCPILE",1158309216:"IFCPILETYPE",310824031:"IFCPIPEFITTING",804291784:"IFCPIPEFITTINGTYPE",3612865200:"IFCPIPESEGMENT",4231323485:"IFCPIPESEGMENTTYPE",597895409:"IFCPIXELTEXTURE",2004835150:"IFCPLACEMENT",603570806:"IFCPLANARBOX",1663979128:"IFCPLANAREXTENT",220341763:"IFCPLANE",3171933400:"IFCPLATE",1156407060:"IFCPLATESTANDARDCASE",4017108033:"IFCPLATETYPE",2067069095:"IFCPOINT",4022376103:"IFCPOINTONCURVE",1423911732:"IFCPOINTONSURFACE",2924175390:"IFCPOLYLOOP",2775532180:"IFCPOLYGONALBOUNDEDHALFSPACE",2839578677:"IFCPOLYGONALFACESET",3724593414:"IFCPOLYLINE",3740093272:"IFCPORT",1946335990:"IFCPOSITIONINGELEMENT",3355820592:"IFCPOSTALADDRESS",759155922:"IFCPREDEFINEDCOLOUR",2559016684:"IFCPREDEFINEDCURVEFONT",3727388367:"IFCPREDEFINEDITEM",3778827333:"IFCPREDEFINEDPROPERTIES",3967405729:"IFCPREDEFINEDPROPERTYSET",1775413392:"IFCPREDEFINEDTEXTFONT",677532197:"IFCPRESENTATIONITEM",2022622350:"IFCPRESENTATIONLAYERASSIGNMENT",1304840413:"IFCPRESENTATIONLAYERWITHSTYLE",3119450353:"IFCPRESENTATIONSTYLE",2417041796:"IFCPRESENTATIONSTYLEASSIGNMENT",2744685151:"IFCPROCEDURE",569719735:"IFCPROCEDURETYPE",2945172077:"IFCPROCESS",4208778838:"IFCPRODUCT",673634403:"IFCPRODUCTDEFINITIONSHAPE",2095639259:"IFCPRODUCTREPRESENTATION",3958567839:"IFCPROFILEDEF",2802850158:"IFCPROFILEPROPERTIES",103090709:"IFCPROJECT",653396225:"IFCPROJECTLIBRARY",2904328755:"IFCPROJECTORDER",3843373140:"IFCPROJECTEDCRS",3651124850:"IFCPROJECTIONELEMENT",2598011224:"IFCPROPERTY",986844984:"IFCPROPERTYABSTRACTION",871118103:"IFCPROPERTYBOUNDEDVALUE",1680319473:"IFCPROPERTYDEFINITION",148025276:"IFCPROPERTYDEPENDENCYRELATIONSHIP",4166981789:"IFCPROPERTYENUMERATEDVALUE",3710013099:"IFCPROPERTYENUMERATION",2752243245:"IFCPROPERTYLISTVALUE",941946838:"IFCPROPERTYREFERENCEVALUE",1451395588:"IFCPROPERTYSET",3357820518:"IFCPROPERTYSETDEFINITION",492091185:"IFCPROPERTYSETTEMPLATE",3650150729:"IFCPROPERTYSINGLEVALUE",110355661:"IFCPROPERTYTABLEVALUE",3521284610:"IFCPROPERTYTEMPLATE",1482703590:"IFCPROPERTYTEMPLATEDEFINITION",738039164:"IFCPROTECTIVEDEVICE",2295281155:"IFCPROTECTIVEDEVICETRIPPINGUNIT",655969474:"IFCPROTECTIVEDEVICETRIPPINGUNITTYPE",1842657554:"IFCPROTECTIVEDEVICETYPE",3219374653:"IFCPROXY",90941305:"IFCPUMP",2250791053:"IFCPUMPTYPE",2044713172:"IFCQUANTITYAREA",2093928680:"IFCQUANTITYCOUNT",931644368:"IFCQUANTITYLENGTH",2090586900:"IFCQUANTITYSET",3252649465:"IFCQUANTITYTIME",2405470396:"IFCQUANTITYVOLUME",825690147:"IFCQUANTITYWEIGHT",2262370178:"IFCRAILING",2893384427:"IFCRAILINGTYPE",3024970846:"IFCRAMP",3283111854:"IFCRAMPFLIGHT",2324767716:"IFCRAMPFLIGHTTYPE",1469900589:"IFCRAMPTYPE",1232101972:"IFCRATIONALBSPLINECURVEWITHKNOTS",683857671:"IFCRATIONALBSPLINESURFACEWITHKNOTS",2770003689:"IFCRECTANGLEHOLLOWPROFILEDEF",3615266464:"IFCRECTANGLEPROFILEDEF",2798486643:"IFCRECTANGULARPYRAMID",3454111270:"IFCRECTANGULARTRIMMEDSURFACE",3915482550:"IFCRECURRENCEPATTERN",2433181523:"IFCREFERENCE",4021432810:"IFCREFERENT",3413951693:"IFCREGULARTIMESERIES",1580146022:"IFCREINFORCEMENTBARPROPERTIES",3765753017:"IFCREINFORCEMENTDEFINITIONPROPERTIES",979691226:"IFCREINFORCINGBAR",2572171363:"IFCREINFORCINGBARTYPE",3027567501:"IFCREINFORCINGELEMENT",964333572:"IFCREINFORCINGELEMENTTYPE",2320036040:"IFCREINFORCINGMESH",2310774935:"IFCREINFORCINGMESHTYPE",160246688:"IFCRELAGGREGATES",3939117080:"IFCRELASSIGNS",1683148259:"IFCRELASSIGNSTOACTOR",2495723537:"IFCRELASSIGNSTOCONTROL",1307041759:"IFCRELASSIGNSTOGROUP",1027710054:"IFCRELASSIGNSTOGROUPBYFACTOR",4278684876:"IFCRELASSIGNSTOPROCESS",2857406711:"IFCRELASSIGNSTOPRODUCT",205026976:"IFCRELASSIGNSTORESOURCE",1865459582:"IFCRELASSOCIATES",4095574036:"IFCRELASSOCIATESAPPROVAL",919958153:"IFCRELASSOCIATESCLASSIFICATION",2728634034:"IFCRELASSOCIATESCONSTRAINT",982818633:"IFCRELASSOCIATESDOCUMENT",3840914261:"IFCRELASSOCIATESLIBRARY",2655215786:"IFCRELASSOCIATESMATERIAL",826625072:"IFCRELCONNECTS",1204542856:"IFCRELCONNECTSELEMENTS",3945020480:"IFCRELCONNECTSPATHELEMENTS",4201705270:"IFCRELCONNECTSPORTTOELEMENT",3190031847:"IFCRELCONNECTSPORTS",2127690289:"IFCRELCONNECTSSTRUCTURALACTIVITY",1638771189:"IFCRELCONNECTSSTRUCTURALMEMBER",504942748:"IFCRELCONNECTSWITHECCENTRICITY",3678494232:"IFCRELCONNECTSWITHREALIZINGELEMENTS",3242617779:"IFCRELCONTAINEDINSPATIALSTRUCTURE",886880790:"IFCRELCOVERSBLDGELEMENTS",2802773753:"IFCRELCOVERSSPACES",2565941209:"IFCRELDECLARES",2551354335:"IFCRELDECOMPOSES",693640335:"IFCRELDEFINES",1462361463:"IFCRELDEFINESBYOBJECT",4186316022:"IFCRELDEFINESBYPROPERTIES",307848117:"IFCRELDEFINESBYTEMPLATE",781010003:"IFCRELDEFINESBYTYPE",3940055652:"IFCRELFILLSELEMENT",279856033:"IFCRELFLOWCONTROLELEMENTS",427948657:"IFCRELINTERFERESELEMENTS",3268803585:"IFCRELNESTS",1441486842:"IFCRELPOSITIONS",750771296:"IFCRELPROJECTSELEMENT",1245217292:"IFCRELREFERENCEDINSPATIALSTRUCTURE",4122056220:"IFCRELSEQUENCE",366585022:"IFCRELSERVICESBUILDINGS",3451746338:"IFCRELSPACEBOUNDARY",3523091289:"IFCRELSPACEBOUNDARY1STLEVEL",1521410863:"IFCRELSPACEBOUNDARY2NDLEVEL",1401173127:"IFCRELVOIDSELEMENT",478536968:"IFCRELATIONSHIP",816062949:"IFCREPARAMETRISEDCOMPOSITECURVESEGMENT",1076942058:"IFCREPRESENTATION",3377609919:"IFCREPRESENTATIONCONTEXT",3008791417:"IFCREPRESENTATIONITEM",1660063152:"IFCREPRESENTATIONMAP",2914609552:"IFCRESOURCE",2943643501:"IFCRESOURCEAPPROVALRELATIONSHIP",1608871552:"IFCRESOURCECONSTRAINTRELATIONSHIP",2439245199:"IFCRESOURCELEVELRELATIONSHIP",1042787934:"IFCRESOURCETIME",1856042241:"IFCREVOLVEDAREASOLID",3243963512:"IFCREVOLVEDAREASOLIDTAPERED",4158566097:"IFCRIGHTCIRCULARCONE",3626867408:"IFCRIGHTCIRCULARCYLINDER",2016517767:"IFCROOF",2781568857:"IFCROOFTYPE",2341007311:"IFCROOT",2778083089:"IFCROUNDEDRECTANGLEPROFILEDEF",448429030:"IFCSIUNIT",3053780830:"IFCSANITARYTERMINAL",1768891740:"IFCSANITARYTERMINALTYPE",1054537805:"IFCSCHEDULINGTIME",2157484638:"IFCSEAMCURVE",2042790032:"IFCSECTIONPROPERTIES",4165799628:"IFCSECTIONREINFORCEMENTPROPERTIES",1862484736:"IFCSECTIONEDSOLID",1290935644:"IFCSECTIONEDSOLIDHORIZONTAL",1509187699:"IFCSECTIONEDSPINE",4086658281:"IFCSENSOR",1783015770:"IFCSENSORTYPE",1329646415:"IFCSHADINGDEVICE",4074543187:"IFCSHADINGDEVICETYPE",867548509:"IFCSHAPEASPECT",3982875396:"IFCSHAPEMODEL",4240577450:"IFCSHAPEREPRESENTATION",4124623270:"IFCSHELLBASEDSURFACEMODEL",3692461612:"IFCSIMPLEPROPERTY",3663146110:"IFCSIMPLEPROPERTYTEMPLATE",4097777520:"IFCSITE",1529196076:"IFCSLAB",3127900445:"IFCSLABELEMENTEDCASE",3027962421:"IFCSLABSTANDARDCASE",2533589738:"IFCSLABTYPE",2609359061:"IFCSLIPPAGECONNECTIONCONDITION",3420628829:"IFCSOLARDEVICE",1072016465:"IFCSOLARDEVICETYPE",723233188:"IFCSOLIDMODEL",3856911033:"IFCSPACE",1999602285:"IFCSPACEHEATER",1305183839:"IFCSPACEHEATERTYPE",3812236995:"IFCSPACETYPE",1412071761:"IFCSPATIALELEMENT",710998568:"IFCSPATIALELEMENTTYPE",2706606064:"IFCSPATIALSTRUCTUREELEMENT",3893378262:"IFCSPATIALSTRUCTUREELEMENTTYPE",463610769:"IFCSPATIALZONE",2481509218:"IFCSPATIALZONETYPE",451544542:"IFCSPHERE",4015995234:"IFCSPHERICALSURFACE",1404847402:"IFCSTACKTERMINAL",3112655638:"IFCSTACKTERMINALTYPE",331165859:"IFCSTAIR",4252922144:"IFCSTAIRFLIGHT",1039846685:"IFCSTAIRFLIGHTTYPE",338393293:"IFCSTAIRTYPE",682877961:"IFCSTRUCTURALACTION",3544373492:"IFCSTRUCTURALACTIVITY",2515109513:"IFCSTRUCTURALANALYSISMODEL",1179482911:"IFCSTRUCTURALCONNECTION",2273995522:"IFCSTRUCTURALCONNECTIONCONDITION",1004757350:"IFCSTRUCTURALCURVEACTION",4243806635:"IFCSTRUCTURALCURVECONNECTION",214636428:"IFCSTRUCTURALCURVEMEMBER",2445595289:"IFCSTRUCTURALCURVEMEMBERVARYING",2757150158:"IFCSTRUCTURALCURVEREACTION",3136571912:"IFCSTRUCTURALITEM",1807405624:"IFCSTRUCTURALLINEARACTION",2162789131:"IFCSTRUCTURALLOAD",385403989:"IFCSTRUCTURALLOADCASE",3478079324:"IFCSTRUCTURALLOADCONFIGURATION",1252848954:"IFCSTRUCTURALLOADGROUP",1595516126:"IFCSTRUCTURALLOADLINEARFORCE",609421318:"IFCSTRUCTURALLOADORRESULT",2668620305:"IFCSTRUCTURALLOADPLANARFORCE",2473145415:"IFCSTRUCTURALLOADSINGLEDISPLACEMENT",1973038258:"IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION",1597423693:"IFCSTRUCTURALLOADSINGLEFORCE",1190533807:"IFCSTRUCTURALLOADSINGLEFORCEWARPING",2525727697:"IFCSTRUCTURALLOADSTATIC",3408363356:"IFCSTRUCTURALLOADTEMPERATURE",530289379:"IFCSTRUCTURALMEMBER",1621171031:"IFCSTRUCTURALPLANARACTION",2082059205:"IFCSTRUCTURALPOINTACTION",734778138:"IFCSTRUCTURALPOINTCONNECTION",1235345126:"IFCSTRUCTURALPOINTREACTION",3689010777:"IFCSTRUCTURALREACTION",2986769608:"IFCSTRUCTURALRESULTGROUP",3657597509:"IFCSTRUCTURALSURFACEACTION",1975003073:"IFCSTRUCTURALSURFACECONNECTION",3979015343:"IFCSTRUCTURALSURFACEMEMBER",2218152070:"IFCSTRUCTURALSURFACEMEMBERVARYING",603775116:"IFCSTRUCTURALSURFACEREACTION",2830218821:"IFCSTYLEMODEL",3958052878:"IFCSTYLEDITEM",3049322572:"IFCSTYLEDREPRESENTATION",148013059:"IFCSUBCONTRACTRESOURCE",4095615324:"IFCSUBCONTRACTRESOURCETYPE",2233826070:"IFCSUBEDGE",2513912981:"IFCSURFACE",699246055:"IFCSURFACECURVE",2028607225:"IFCSURFACECURVESWEPTAREASOLID",3101698114:"IFCSURFACEFEATURE",2809605785:"IFCSURFACEOFLINEAREXTRUSION",4124788165:"IFCSURFACEOFREVOLUTION",2934153892:"IFCSURFACEREINFORCEMENTAREA",1300840506:"IFCSURFACESTYLE",3303107099:"IFCSURFACESTYLELIGHTING",1607154358:"IFCSURFACESTYLEREFRACTION",1878645084:"IFCSURFACESTYLERENDERING",846575682:"IFCSURFACESTYLESHADING",1351298697:"IFCSURFACESTYLEWITHTEXTURES",626085974:"IFCSURFACETEXTURE",2247615214:"IFCSWEPTAREASOLID",1260650574:"IFCSWEPTDISKSOLID",1096409881:"IFCSWEPTDISKSOLIDPOLYGONAL",230924584:"IFCSWEPTSURFACE",1162798199:"IFCSWITCHINGDEVICE",2315554128:"IFCSWITCHINGDEVICETYPE",2254336722:"IFCSYSTEM",413509423:"IFCSYSTEMFURNITUREELEMENT",1580310250:"IFCSYSTEMFURNITUREELEMENTTYPE",3071757647:"IFCTSHAPEPROFILEDEF",985171141:"IFCTABLE",2043862942:"IFCTABLECOLUMN",531007025:"IFCTABLEROW",812556717:"IFCTANK",5716631:"IFCTANKTYPE",3473067441:"IFCTASK",1549132990:"IFCTASKTIME",2771591690:"IFCTASKTIMERECURRING",3206491090:"IFCTASKTYPE",912023232:"IFCTELECOMADDRESS",3824725483:"IFCTENDON",2347447852:"IFCTENDONANCHOR",3081323446:"IFCTENDONANCHORTYPE",3663046924:"IFCTENDONCONDUIT",2281632017:"IFCTENDONCONDUITTYPE",2415094496:"IFCTENDONTYPE",2387106220:"IFCTESSELLATEDFACESET",901063453:"IFCTESSELLATEDITEM",4282788508:"IFCTEXTLITERAL",3124975700:"IFCTEXTLITERALWITHEXTENT",1447204868:"IFCTEXTSTYLE",1983826977:"IFCTEXTSTYLEFONTMODEL",2636378356:"IFCTEXTSTYLEFORDEFINEDFONT",1640371178:"IFCTEXTSTYLETEXTMODEL",280115917:"IFCTEXTURECOORDINATE",1742049831:"IFCTEXTURECOORDINATEGENERATOR",2552916305:"IFCTEXTUREMAP",1210645708:"IFCTEXTUREVERTEX",3611470254:"IFCTEXTUREVERTEXLIST",1199560280:"IFCTIMEPERIOD",3101149627:"IFCTIMESERIES",581633288:"IFCTIMESERIESVALUE",1377556343:"IFCTOPOLOGICALREPRESENTATIONITEM",1735638870:"IFCTOPOLOGYREPRESENTATION",1935646853:"IFCTOROIDALSURFACE",3825984169:"IFCTRANSFORMER",1692211062:"IFCTRANSFORMERTYPE",2595432518:"IFCTRANSITIONCURVESEGMENT2D",1620046519:"IFCTRANSPORTELEMENT",2097647324:"IFCTRANSPORTELEMENTTYPE",2715220739:"IFCTRAPEZIUMPROFILEDEF",2916149573:"IFCTRIANGULATEDFACESET",1229763772:"IFCTRIANGULATEDIRREGULARNETWORK",3593883385:"IFCTRIMMEDCURVE",3026737570:"IFCTUBEBUNDLE",1600972822:"IFCTUBEBUNDLETYPE",1628702193:"IFCTYPEOBJECT",3736923433:"IFCTYPEPROCESS",2347495698:"IFCTYPEPRODUCT",3698973494:"IFCTYPERESOURCE",427810014:"IFCUSHAPEPROFILEDEF",180925521:"IFCUNITASSIGNMENT",630975310:"IFCUNITARYCONTROLELEMENT",3179687236:"IFCUNITARYCONTROLELEMENTTYPE",4292641817:"IFCUNITARYEQUIPMENT",1911125066:"IFCUNITARYEQUIPMENTTYPE",4207607924:"IFCVALVE",728799441:"IFCVALVETYPE",1417489154:"IFCVECTOR",2799835756:"IFCVERTEX",2759199220:"IFCVERTEXLOOP",1907098498:"IFCVERTEXPOINT",1530820697:"IFCVIBRATIONDAMPER",3956297820:"IFCVIBRATIONDAMPERTYPE",2391383451:"IFCVIBRATIONISOLATOR",3313531582:"IFCVIBRATIONISOLATORTYPE",2769231204:"IFCVIRTUALELEMENT",891718957:"IFCVIRTUALGRIDINTERSECTION",926996030:"IFCVOIDINGFEATURE",2391406946:"IFCWALL",4156078855:"IFCWALLELEMENTEDCASE",3512223829:"IFCWALLSTANDARDCASE",1898987631:"IFCWALLTYPE",4237592921:"IFCWASTETERMINAL",1133259667:"IFCWASTETERMINALTYPE",3304561284:"IFCWINDOW",336235671:"IFCWINDOWLININGPROPERTIES",512836454:"IFCWINDOWPANELPROPERTIES",486154966:"IFCWINDOWSTANDARDCASE",1299126871:"IFCWINDOWSTYLE",4009809668:"IFCWINDOWTYPE",4088093105:"IFCWORKCALENDAR",1028945134:"IFCWORKCONTROL",4218914973:"IFCWORKPLAN",3342526732:"IFCWORKSCHEDULE",1236880293:"IFCWORKTIME",2543172580:"IFCZSHAPEPROFILEDEF",1033361043:"IFCZONE"},PropsNames={aggregates:{name:IFCRELAGGREGATES,relating:"RelatingObject",related:"RelatedObjects",key:"children"},spatial:{name:IFCRELCONTAINEDINSPATIALSTRUCTURE,relating:"RelatingStructure",related:"RelatedElements",key:"children"},psets:{name:IFCRELDEFINESBYPROPERTIES,relating:"RelatingPropertyDefinition",related:"RelatedObjects",key:"hasPsets"},materials:{name:IFCRELASSOCIATESMATERIAL,relating:"RelatingMaterial",related:"RelatedObjects",key:"hasMaterial"},type:{name:IFCRELDEFINESBYTYPE,relating:"RelatingType",related:"RelatedObjects",key:"hasType"}},Properties=class{constructor(api){this.api=api}getIfcType(type){return IfcTypesMap[type]}getItemProperties(modelID,id,recursive=!1){return __async(this,null,(function*(){return this.api.GetLine(modelID,id,recursive)}))}getPropertySets(modelID,elementID,recursive=!1){return __async(this,null,(function*(){return yield this.getProperty(modelID,elementID,recursive,PropsNames.psets)}))}getTypeProperties(modelID,elementID,recursive=!1){return __async(this,null,(function*(){return yield this.getProperty(modelID,elementID,recursive,PropsNames.type)}))}getMaterialsProperties(modelID,elementID,recursive=!1){return __async(this,null,(function*(){return yield this.getProperty(modelID,elementID,recursive,PropsNames.materials)}))}getSpatialStructure(modelID,includeProperties){return __async(this,null,(function*(){yield this.getAllTypesOfModel(modelID);const chunks=yield this.getSpatialTreeChunks(modelID),projectID=(yield this.api.GetLineIDsWithType(modelID,IFCPROJECT)).get(0),project=Properties.newIfcProject(projectID);return yield this.getSpatialNode(modelID,project,chunks,includeProperties),this.cleanupTypes(),project}))}getAllItemsOfType(modelID,type,verbose){return __async(this,null,(function*(){let items=[];const lines=yield this.api.GetLineIDsWithType(modelID,type);for(let i=0;i<lines.size();i++)items.push(lines.get(i));if(!verbose)return items;const result=[];for(let i=0;i<items.length;i++)result.push(yield this.api.GetLine(modelID,items[i]));return result}))}getProperty(modelID,elementID,recursive=!1,propName){return __async(this,null,(function*(){const propSetIds=yield this.getAllRelatedItemsOfType(modelID,elementID,propName),result=[];for(let i=0;i<propSetIds.length;i++)result.push(yield this.api.GetLine(modelID,propSetIds[i],recursive));return result}))}getChunks(modelID,chunks,propNames){return __async(this,null,(function*(){const relation=yield this.api.GetLineIDsWithType(modelID,propNames.name);for(let i=0;i<relation.size();i++){const rel=yield this.api.GetLine(modelID,relation.get(i),!1);this.saveChunk(chunks,propNames,rel)}}))}static isRelated(id,rel,propNames){const relatedItems=rel[propNames.related];if(Array.isArray(relatedItems)){return relatedItems.map((item=>item.value)).includes(id)}return relatedItems.value===id}static newIfcProject(id){return{expressID:id,type:"IFCPROJECT",children:[]}}getSpatialNode(modelID,node,treeChunks,includeProperties){return __async(this,null,(function*(){yield this.getChildren(modelID,node,treeChunks,PropsNames.aggregates,includeProperties),yield this.getChildren(modelID,node,treeChunks,PropsNames.spatial,includeProperties)}))}getChildren(modelID,node,treeChunks,propNames,includeProperties){return __async(this,null,(function*(){const children=treeChunks[node.expressID];if(null==children)return;const prop=propNames.key,nodes=[];for(let i=0;i<children.length;i++){const child=children[i];let node2=this.newNode(child);if(includeProperties){const properties=yield this.getItemProperties(modelID,node2.expressID);node2=__spreadValues(__spreadValues({},properties),node2)}yield this.getSpatialNode(modelID,node2,treeChunks,includeProperties),nodes.push(node2)}node[prop]=nodes}))}newNode(id){return{expressID:id,type:this.getNodeType(id),children:[]}}getNodeType(id){const typeID=this.types[id];return IfcElements2[typeID]}getSpatialTreeChunks(modelID){return __async(this,null,(function*(){const treeChunks={};return yield this.getChunks(modelID,treeChunks,PropsNames.aggregates),yield this.getChunks(modelID,treeChunks,PropsNames.spatial),treeChunks}))}saveChunk(chunks,propNames,rel){const relating=rel[propNames.relating].value,related=rel[propNames.related].map((r=>r.value));null==chunks[relating]?chunks[relating]=related:chunks[relating]=chunks[relating].concat(related)}getRelated(rel,propNames,IDs){const element=rel[propNames.relating];Array.isArray(element)?element.forEach((ele=>IDs.push(ele.value))):IDs.push(element.value)}getAllRelatedItemsOfType(modelID,id,propNames){return __async(this,null,(function*(){const lines=yield this.api.GetLineIDsWithType(modelID,propNames.name),IDs=[];for(let i=0;i<lines.size();i++){const rel=yield this.api.GetLine(modelID,lines.get(i));Properties.isRelated(id,rel,propNames)&&this.getRelated(rel,propNames,IDs)}return IDs}))}cleanupTypes(){this.types={}}getAllTypesOfModel(modelID){return __async(this,null,(function*(){const result={},elements=Object.keys(IfcElements2).map((e=>parseInt(e)));for(let i=0;i<elements.length;i++){const element=elements[i],lines=yield this.api.GetLineIDsWithType(modelID,element),size=lines.size();for(let i2=0;i2<size;i2++)result[lines.get(i2)]=element}this.types=result}))}};WebIFCWasm="undefined"!=typeof self&&self.crossOriginIsolated?require_web_ifc_mt():require_web_ifc();var UNKNOWN=0,STRING=1,LABEL=2,ENUM=3,REAL=4,REF=5,EMPTY=6,SET_BEGIN=7,SET_END=8,LINE_END=9;function ms(){return(new Date).getTime()}var IfcAPI2=class{constructor(){this.wasmModule=void 0,this.fs=void 0,this.wasmPath="",this.isWasmPathAbsolute=!1,this.ifcGuidMap=new Map,this.properties=new Properties(this)}Init(customLocateFileHandler){return __async(this,null,(function*(){if(WebIFCWasm){let locateFileHandler=(path,prefix)=>path.endsWith(".wasm")?this.isWasmPathAbsolute?this.wasmPath+path:prefix+this.wasmPath+path:prefix+path;this.wasmModule=yield WebIFCWasm({noInitialRun:!0,locateFile:customLocateFileHandler||locateFileHandler}),this.fs=this.wasmModule.FS}}))}OpenModel(data,settings){let s=__spreadValues({COORDINATE_TO_ORIGIN:!1,USE_FAST_BOOLS:!1,CIRCLE_SEGMENTS_LOW:5,CIRCLE_SEGMENTS_MEDIUM:8,CIRCLE_SEGMENTS_HIGH:12,BOOL_ABORT_THRESHOLD:1e4},settings),offsetInSrc=0;return this.wasmModule.OpenModel(s,((destPtr,destSize)=>{let srcSize=Math.min(data.byteLength-offsetInSrc,destSize),dest=this.wasmModule.HEAPU8.subarray(destPtr,destPtr+destSize),src=data.subarray(offsetInSrc,offsetInSrc+srcSize);return dest.set(src),offsetInSrc+=srcSize,srcSize}))}CreateModel(settings){let s=__spreadValues({COORDINATE_TO_ORIGIN:!1,USE_FAST_BOOLS:!1,CIRCLE_SEGMENTS_LOW:5,CIRCLE_SEGMENTS_MEDIUM:8,CIRCLE_SEGMENTS_HIGH:12,BOOL_ABORT_THRESHOLD:1e4},settings);return this.wasmModule.CreateModel(s)}ExportFileAsIFC(modelID){this.wasmModule.ExportFileAsIFC(modelID);let result=this.fs.readFile("/export.ifc");return this.wasmModule.FS_unlink("/export.ifc"),result}GetGeometry(modelID,geometryExpressID){return this.wasmModule.GetGeometry(modelID,geometryExpressID)}GetLine(modelID,expressID,flatten=!1){let rawLineData=this.GetRawLineData(modelID,expressID),lineData=FromRawLineData[rawLineData.type](rawLineData);return flatten&&this.FlattenLine(modelID,lineData),lineData}GetAndClearErrors(modelID){return this.wasmModule.GetAndClearErrors(modelID)}WriteLine(modelID,lineObject){Object.keys(lineObject).forEach((propertyName=>{let property=lineObject[propertyName];if(property&&void 0!==property.expressID)this.WriteLine(modelID,property),lineObject[propertyName]={type:5,value:property.expressID};else if(Array.isArray(property)&&property.length>0)for(let i=0;i<property.length;i++)void 0!==property[i].expressID&&(this.WriteLine(modelID,property[i]),lineObject[propertyName][i]={type:5,value:property[i].expressID})}));let rawLineData={ID:lineObject.expressID,type:lineObject.type,arguments:lineObject.ToTape()};this.WriteRawLineData(modelID,rawLineData)}FlattenLine(modelID,line){Object.keys(line).forEach((propertyName=>{let property=line[propertyName];if(property&&5===property.type)line[propertyName]=this.GetLine(modelID,property.value,!0);else if(Array.isArray(property)&&property.length>0&&5===property[0].type)for(let i=0;i<property.length;i++)line[propertyName][i]=this.GetLine(modelID,property[i].value,!0)}))}GetRawLineData(modelID,expressID){return this.wasmModule.GetLine(modelID,expressID)}WriteRawLineData(modelID,data){return this.wasmModule.WriteLine(modelID,data.ID,data.type,data.arguments)}GetLineIDsWithType(modelID,type){return this.wasmModule.GetLineIDsWithType(modelID,type)}GetAllLines(modelID){return this.wasmModule.GetAllLines(modelID)}SetGeometryTransformation(modelID,transformationMatrix){16==transformationMatrix.length&&this.wasmModule.SetGeometryTransformation(modelID,transformationMatrix)}GetCoordinationMatrix(modelID){return this.wasmModule.GetCoordinationMatrix(modelID)}GetVertexArray(ptr,size){return this.getSubArray(this.wasmModule.HEAPF32,ptr,size)}GetIndexArray(ptr,size){return this.getSubArray(this.wasmModule.HEAPU32,ptr,size)}getSubArray(heap,startPtr,sizeBytes){return heap.subarray(startPtr/4,startPtr/4+sizeBytes).slice(0)}CloseModel(modelID){this.ifcGuidMap.delete(modelID),this.wasmModule.CloseModel(modelID)}StreamAllMeshes(modelID,meshCallback){this.wasmModule.StreamAllMeshes(modelID,meshCallback)}StreamAllMeshesWithTypes(modelID,types,meshCallback){this.wasmModule.StreamAllMeshesWithTypes(modelID,types,meshCallback)}IsModelOpen(modelID){return this.wasmModule.IsModelOpen(modelID)}LoadAllGeometry(modelID){return this.wasmModule.LoadAllGeometry(modelID)}GetFlatMesh(modelID,expressID){return this.wasmModule.GetFlatMesh(modelID,expressID)}CreateIfcGuidToExpressIdMapping(modelID){const map=new Map;for(let x=0;x<IfcElements.length;x++){const type=IfcElements[x],lines=this.GetLineIDsWithType(modelID,type),size=lines.size();for(let y=0;y<size;y++){const expressID=lines.get(y),globalID=this.GetLine(modelID,expressID).GlobalId.value;map.set(expressID,globalID),map.set(globalID,expressID)}}this.ifcGuidMap.set(modelID,map)}SetWasmPath(path,absolute=!1){this.wasmPath=path,this.isWasmPathAbsolute=absolute}};return web_ifc_api_exports})();